{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"page-not-found/","title":"Page not found","text":"<p> Page Not Found <p>Sorry, but the page you are looking for does not exist, has been removed, renamed, or is temporarily unavailable. Please try using one of the navigation links above or the search bar in the top right corner.</p> <p>For further inquiries, reach us at the <code>help-asgardeo</code> channel in the WSO2 Discord server.             Alternatively, you can reach out to the Asgardeo support team.</p> </p>"},{"location":"api-manager/apim-revamped/general-config-migration/","title":"Configuration Migration Process","text":"<p>When migrating API-M from an older version to a newer one, it is crucial to move the configurations enabled in the older version to the newer version to maintain the behavior of the features of the new product as same in previous version.</p> <p>Under this step we will move the configurations in the old <code>deployment.toml</code> file to the new <code>deployment.toml</code> file. However, this is not straight forward and several considerations must be taken into account:</p> <ul> <li>The configuration names in the older version may have undergone name changes in the newer version.</li> <li>Some configurations available in the older version may not be present in the newer version.</li> <li>Behavior of several configurations may have changed between versions.</li> </ul> <p>Hence, you may have to rename some configurations, change some configurations while moving them and will be able to drop some configurations.</p>"},{"location":"api-manager/apim-revamped/general-config-migration/#guidelines","title":"Guidelines","text":"<ul> <li> <p>Do not copy entire configuration files from the current version of WSO2 API Manager to the new one, as some configuration files may have changed. Instead, redo the configuration changes in the new configuration files.</p> </li> <li> <p>You do not have to add/move a configuration to the <code>deployment.toml</code> file unless you want to modify the server\u2019s default value. Default values for all the configurations can be found in the <code>&lt;API-M-HOME&gt;/repository/resources/conf/default.json</code> file.</p> </li> <li> <p>Follow the the steps under configuration migration to smoothly migrate the old configurations to the new server.</p> </li> <li> <p>If you currently operate a distributed deployment and are planning to transition to a new distributed deployment, you must transfer configurations between each existing profile and its corresponding new profile. Essentially, you need to repeat the steps outlined under configuration migration for each profile.</p> </li> <li> <p>In case of a K8s deployment, you might not have separate TOML files, and instead, you may have configured the configurations in the HELM <code>values.yaml</code>. In such cases, proceed with the configuration migration steps, but make adjustments where necessary and do the changes directly within the YAML files as required.</p> </li> <li> <p>You may familiarize yourself with the New Configuration Model to gain a clear understanding of how the APIM config model operates(This is a must if you are migrating from a version prior to 3.x.).</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-data-migration/","title":"Data Migration Process","text":"<p>This document outlines the data migration process required when upgrading APIM from an older version to a newer version. The data migration process involves ensuring the compatibility of the databases with the new APIM version.</p> <p>Please note that no new databases will be created during the data migration process. Instead, the existing databases will be modified to accommodate the new version and these modifications may include creating new tables, altering existing ones, and transferring data between tables. Therefore, after data migration, the new version will function using the previous databases.</p> <p>This guide offers a general overview of the data migration process and its steps. It also provides a set of guidelines for executing the data migration.</p> <p>Important</p> <p>From APIM 4.3.0 onwards, running a migration client is no longer required for data migration. Instead, a database script will be used to update the existing table schema with necessary changes, which includes the addition of new columns and new tables.</p>"},{"location":"api-manager/apim-revamped/general-data-migration/#data-migration-steps","title":"Data Migration Steps","text":"<ol> <li> <p>Running Database Scripts:</p> </li> <li> <p>This step involves running the database scripts on the registry database(shared_db) to add missing registry indices.</p> </li> <li> <p>Migration of Identity Data:</p> </li> <li> <p>This step involves the migration of data associated with identity components. This mainly involves creating new tables, altering existing ones, and transferring data between tables.</p> </li> <li>This is applicable only for cases where inbuilt resident key manager(KM) is used; otherwise, if you have configured WSO2 IS as KM, you must independently migrate IS as KM first.</li> <li>Use the <code>Identity Migration Client</code> to execute the migration of identity data.</li> <li>Additional guidance on running the client can be found in version-specific data migration documents.</li> <li> <p>Note that depending on the number of records in the identity tables, the identity data migration will take a considerable amount of time to finish. Do not stop the server during the migration process and wait until the migration process finishes completely and the server gets started.</p> </li> <li> <p>Migration of APIM Data:</p> <ul> <li>This step involves the migration of data associated with API-M components. This mainly involves creating new tables, altering existing ones, and transferring data between tables.</li> <li>Use the <code>APIM Migration Client</code> to perform the migration of APIM data.</li> <li>Additional guidance on running the client can be found in version-specific data migration documents.</li> <li>Note that depending on the number of records in the tables, the APIM data migration will take a considerable amount of time to finish. Do not stop the server during the migration process and wait until the migration process finishes completely and the server gets started.</li> </ul> </li> </ol>"},{"location":"api-manager/apim-revamped/general-data-migration/#guidelines","title":"Guidelines","text":"<ol> <li> <p>Before running each migration client, create a backup of all the databases.</p> </li> <li> <p>If you are migrating to a distributed deployment, you are only required to run the data migration on the Control Plane profile. In other words, out of the various API-M profile packs you have for each profile, run the data migration only on a Control Plane pack.</p> </li> <li> <p>Regardless of your deployment environment, it is advisable to conduct the data migration on a separate VM/local machine. Once the data migration is completed, you can direct the production environment deployment to the migrated data source. For more information please refer Data Migration on Different Environments.</p> </li> <li> <p>If you have many APIs, there could be a high load on the database during the migration. Hence, increase the database pool size during migration. Please refer Tuning JDBC Pool Configurations for more details.</p> </li> <li> <p>Prior to API-M data migration, as a pre-migration step, validate your old data using the available pre-validators.       Available API Validators  API Validators CLI Tag Pre-validator Purpose <code>apiDefinitionValidation</code> API Definition Validator Validates if the API definitions are up to standards so that issues are not encountered during migration. Validations are done to check if APIs have valid OpenAPI, WSDL, Streaming API, or GraphQL API definitions. <code>apiAvailabilityValidation</code> API Availability Validator Validates the API availability in the database with respect to the API artifacts in the registry in order to verify there are no corrupted entries in the registry. <code>apiResourceLevelAuthSchemeValidation</code> API Resource Level Auth Scheme Validator Usage of resource level security with <code>Application</code> and <code>Application User</code> in 2.x versions, is not supported. This pre-validation checks and warns about such APIs with unsupported resource-level auth schemes. <code>apiDeployedGatewayTypeValidation</code> API Deployed Gateway Type Validator If the deployed Gateway type of an API is given as <code>none</code>, deployment of that API will be skipped at migration. This pre-validation warns on such APIs having deployed Gateway type as <code>none</code>. <p> Available Application Validators  Application Validators CLI Tag Pre-validator Purpose <code>appThirdPartyKMValidation</code> Third Party Key Manager Usage Validator If third party key managers were used with the old API-M, they may need to be reconfigured for the new API-M version. This pre-validation checks the usage of the built-in key manager and warns otherwise. <li> <p>Commands to run pre-validation can be found in version specific data migration documents.</p> </li> <li> <p>You can run data validation on all the existing validators or selected validators. If you only use the <code>-DrunPreMigration</code> command, all existing validations will be enabled. If not, you can provide a specific validator, such as <code>-DrunPreMigration=apiDefinitionValidation</code>, which only validates the API definitions.</p> </li> <li> <p>If you want to save the invalid API definitions, save the invalid API definitions to the local file system during this data validation step. Use the <code>-DsaveInvalidDefinition</code> option for this as follows. The invalid definitions will be stored under a folder named <code>&lt;API-M_HOME&gt;/invalid-swagger-definitions</code> in the form of <code>&lt;API_UUID&gt;.json</code>. Then you can manually correct these definitions.</p> </li> <li> <p>Check the server logs and verify if there are any error logs. If you have encountered any errors in the API definitions, you have to correct them manually on the old version before the component migration.</p> </li> <li> <p>If you are using PostgreSQL , the database user should have the 'superuser' permission to migrate the API Manager Databases. If the user is not already a superuser, assign the permission before starting the migration.     <pre><code>ALTER USER &lt;user&gt; WITH SUPERUSER;\n</code></pre></p> </li>"},{"location":"api-manager/apim-revamped/general-extensions-and-customizations/","title":"Extensions and Customizations Migration Process","text":"<p>This document outlines the migration process required to migrate extensions and customizations when upgrading APIM from an older version to a newer version.</p> <p>It's essential to note that migrating extensions and customizations is more complex than resource and artifact migration. Simply copying and pasting custom jars or dependency jars between versions may not be enough due to potential changes in APIs and extension points. As a result, the level of effort in this step will vary based on the extent of customization in your current API-M Deployment.</p>"},{"location":"api-manager/apim-revamped/general-extensions-and-customizations/#guidelines","title":"Guidelines","text":"<ul> <li> <p>Identify all the customizations you have used in the current API-M deployment.</p> </li> <li> <p>Check if your customizations are now supported out-of-the-box in the latest version. You can refer to the What has Changed document and the official API-M documentation for this purpose. If you need assistance, don't hesitate to reach out to WSO2 Support.</p> </li> <li> <p>If your customizations are already available in the latest version, you can ignore these customizations in the new version.</p> </li> <li> <p>If any custom requirement is not available in the latest version, you'll need to migrate the customization to support the latest product version.</p> </li> <li> <p>If you currently operate a distributed deployment and are planning to transition to a distributed deployment, you are required to move all customizations and extensions from each existing profile and its corresponding new profile.</p> </li> <li> <p>In case of a K8s deployment, in the previous version's K8s environment, you may have mounted custom artifacts and/or you may have created custom product Docker images with the jars embedded. You can adopt the same approach used in previous versions when applying customizations.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-guidelines/","title":"API-M Migration Guidelines","text":"<p>This section contains the general guidelines and information related to upgrading WSO2 API Manager.  Before you upgrade your production environment, please take a moment to go through the following.</p>"},{"location":"api-manager/apim-revamped/general-guidelines/#importance-of-upgrading","title":"Importance of Upgrading","text":"<p>There are numerous compelling reasons to consider upgrading the WSO2 API Manager to its latest version. These reasons include but are not limited to the following. </p> <ul> <li> <p>New Features: Embrace the latest version to leverage new features that enhance the overall functionality of the product.</p> </li> <li> <p>Security and Bug Fixes: Ensure the security and reliability of your system by accessing critical bug fixes and security updates available in the latest version.</p> </li> <li> <p>Approaching End of Life: If your current product version is approaching its end of life, upgrading ensures continued support and maintenance.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-guidelines/#understanding-api-m-migration-process","title":"Understanding API-M Migration Process","text":"<p>Upgrading the API-M involves four key steps, outlined below. To ensure a successful migration to the latest version, it's crucial to execute all of these steps in sequence.</p> <ol> <li>Configuration Migration: This step includes transferring configurations enabled in the older version to the newer version.</li> <li>Extensions and Customizations Migration: This step involves migrating customizations available in the old version to the new version.</li> <li>Resource and Artifact Migration: Involves migrating various resources and artifacts from the older version of API-M to the newer one.</li> <li>Data Migration: Ensures the compatibility of databases with the new APIM version.</li> </ol>"},{"location":"api-manager/apim-revamped/general-guidelines/#get-wso2-support","title":"Get WSO2 Support","text":"<ul> <li> <p>If you already have a WSO2 Subscription, you can reach out to our support team through your support account to receive assistance with the migration.</p> </li> <li> <p>If you require a zero downtime migration, you must contact WSO2 support. We do not recommend proceeding with zero downtime migration without WSO2 support. You can contact WSO2 Support for assistance.</p> </li> <li> <p>If you are migrating API-M from a version older than 3.2.0, contact the WSO2 Support Team to obtain instructions further instructions.</p> </li> <li> <p>If you are migrating IS as KM from a version older than 5.10.0 contact the WSO2 Support Team to obtain instructions further instructions.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-guidelines/#planning-the-upgrade","title":"Planning the Upgrade","text":"<ol> <li> <p>Always plan to migrate to the latest version as the latest fixes and new features are available in the latest version. If you already have a WSO2 subscription, you can use the Update Management Tool(UMT) to get any fixes or latest updates for this release. If you have a particular requirement to migrate to an intermediate version, contact WSO2 Support.</p> <p>Note - Migrating the production environment requires additional hardware/VM resources because both the old environment and the new environment will be running until all the traffic is routed to the new environment.</p> </li> <li> <p>List down the functional and non-functional use cases in your deployment and create test cases for them. This step is crucial to verify that the migrated environment works as expected.</p> </li> <li> <p>Once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to undertake the following steps:</p> </li> <li> <p>Firstly, create a deployment using the new API-M version, similar to your current deployment. </p> </li> <li>Direct this deployment to a new test database that supports the new API-M version.</li> <li>Then, conduct thorough testing of the new API-M functionalities alongside your configurations and customizations (excluding your data).</li> <li>Once you have verified that all functionalities operate as expected, you may proceed with the data migration.</li> <li>Following the completion of data migration, redirect the new deployment to your migrated data source as the last step.</li> </ol> <p></p> <ol> <li> <p>Start the migration from the lowest environment (e.g., dev) and continue up to the highest before the production (e.g., pre-prod). Run the test cases in the migrated environments to confirm that your functional and non-functional requirements are met in the migrated environment.</p> </li> <li> <p>Before you carry out the production migration, run a pilot migration on your pre-prod environment. </p> <ul> <li> <p>It will be ideal if the pre-prod environment is similar to the production environment.</p> </li> <li> <p>If possible, restore a database dump of the production environment to the pre-prod environment and perform the pilot migration.</p> </li> <li> <p>If the production database dump cannot be used, at least ensure that you have a sufficient amount of data in the database to mimic the production environment.</p> </li> </ul> </li> <li> <p>When you follow the above instructions, you can get a rough estimate of the time for the final production update, and you can allocate time slots based on the above analysis. WSO2 recommends that you perform the migration while the system is under minimum traffic. </p> </li> <li> <p>After you have completed the above instructions and are satisfied with the outcome, proceed with the production migration process. After the migration is complete, verify the migration process using the following instructions.</p> </li> <li> <p>Monitor the system health (CPU, memory usage, etc.).</p> </li> <li>Monitor the WSO2 logs for errors.</li> </ol>"},{"location":"api-manager/apim-revamped/general-guidelines/#required-skill-set-and-available-training","title":"Required Skill Set and Available Training","text":"<p>For more information about available training, please refer https://wso2.com/training/</p>"},{"location":"api-manager/apim-revamped/general-guidelines/#migration-catalog-structure","title":"Migration Catalog Structure","text":"<p>Once you have gone through the above, you can proceed with the migration by referring to the version specific migration documents in the migration catalog. The structure of the migration catalog is as follows, and please refer to the documents in the order given within the brackets.</p> <pre><code>\u251c\u2500\u2500 migration-catalog\n\u2502   \u251c\u2500\u2500 upgrading-to-apim-4xx\n\u2502   |   \u251c\u2500\u2500 version-specific-guidelines.md (1)\n\u2502   \u2502   \u251c\u2500\u2500 upgrading-from-3xx-to-4xx\n\u2502   |   \u2502   \u251c\u2500\u2500 upgrading-from-3xx-to-4xx.md (2)\n\u2502   |   \u2502   \u251c\u2500\u2500 config-migration.md (3)\n\u2502   |   \u2502   \u251c\u2500\u2500 resource-and-artifact-migration.md (4)\n\u2502   |   \u2502   \u251c\u2500\u2500 extensions-and-customizations-migration.md (5)\n\u2502   |   \u2502   \u251c\u2500\u2500 data-migration.md (6)\n\u2502   |   \u2502   \u251c\u2500\u2500 server-startup-actions.md (7)\n</code></pre>"},{"location":"api-manager/apim-revamped/general-resource-and-artifact-migration/","title":"Resource and Artifact Migration Process","text":"<p>During this step, we'll be migrating various resources and artifacts from the older version of API-M to the newer one. </p> <p>You will be able to simply copy certain resources from the previous API-M and place them in the appropriate folders in the newer version. Please consult the steps under resource and artifact migration to determine precisely what needs to be copied and transferred to the new version.</p> <p>Please note that this step doesn't cover migrating customizations and extensions, as it will be addressed later.</p>"},{"location":"api-manager/apim-revamped/general-resource-and-artifact-migration/#guidelines","title":"Guidelines","text":"<ul> <li>Please only transfer the specified resources and artifacts outlined in this step. Refrain from moving any other resources between versions, as certain resources are automatically generated within the new version during the data migration process. </li> <li> <p>For instance, you should not manually transfer tenant folders from the old version to the new one. These folders will be created automatically during the subsequent data migration process, which is explained later.</p> </li> <li> <p>If you are using a K8s deployment, you may need to create a custom product image by copying the required resources and artifacts, and then use that image for deployment.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/troubleshooting-and-FAQs/","title":"Troubleshooting and FAQ","text":"<p>This document contains all the FAQs and general troubleshooting guidelines.</p>"},{"location":"api-manager/apim-revamped/troubleshooting-and-FAQs/#troubleshooting","title":"Troubleshooting","text":"<ol> <li> <p>Before running the identity data migration and APIM data migration, it is recommended to create database dumps. If this step fails, do not proceed with a corrupt database; instead, restore it to its previous state.</p> </li> <li> <p>When running the identity data migration, if you encounter the following error message, follow the steps in this section. Note that this error could occur only if the identity tables contain a huge volume of data.</p> <p>Sample exception stack trace is given below.</p> <p><pre><code>ERROR {org.wso2.carbon.registry.core.dataaccess.TransactionManager} -  Failed to start new registry transaction. {org.wso2.carbon.registry.core.dataaccess.TransactionManager} org.apache.tomcat.jdbc.pool.PoolExhaustedException: [pool-30-thread-11] Timeout: Pool empty. Unable to fetch a connection in 60 seconds, none available[size:50; busy:50; idle:0; lastwait:60000\n</code></pre> A.  Add the following property in <code>&lt;API-M_HOME&gt;/repository/conf/deployment.toml</code> to a higher value (eg 10) <pre><code>[indexing]\nfrequency = 10\n</code></pre></p> <p>B.  Re-run the command above. Make sure to revert the change done 'A' after the migration is complete.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/what-has-changed/","title":"What has Changed ?","text":"<p>This offers an overview of the modifications in features and behaviors between each APIM version and its predecessor. It is recommended to review these changes before migrating to newer versions, as certain features and behaviors present in older versions may have been altered or removed in the updated versions.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-420","title":"Major Changes in API Manager 4.2.0","text":"<ul> <li> <p>Prior to WSO2 API Manager 4.2.0, the tenant configurations listed below were persisted only in the registry and only accessible via the Carbon Console. With the 4.2.0 release, these configurations are migrated to the <code>tenant-conf.json</code> file, and support is enabled to manage these through the Admin Portal (Advanced Configuration Section).</p> </li> <li> <p>Self Sign Up Config - Self-signup is enabled out-of-the-box not only for the super tenant, but also for the other tenants. The 'Internal/subscriber' role is then taken from the <code>Advanced Configurations \u2192 DefaultRoles \u2192 SubscriberRole</code> when creating a tenant. In addition, the <code>sign-up-config.xml</code> file is removed along with the connection with the registry. For more information, see Disabling or Enabling Self Signup.</p> </li> <li> <p>Life Cycle Config - XML configuration is converted to JSON format. The life cycle changes can then be managed via <code>Advanced Configurations \u2192 LifeCycle</code> via the Admin Portal. The <code>APILifeCycle.xml</code> file is removed along with the connection with the registry. For more information, see Customize API Life Cycle.</p> </li> <li> <p>From WSO2 API Manager 4.2.0 onwards, correlation logs can be enabled without restarting the server. Newly added CorrelationConfigManager will handle the configuration updates from the DevOps API.</p> </li> <li> <p>The schema name in the challenge string for basic auth will be changed from \"Basic Auth\" to \"Basic\" according to IANA standards. Therefore, when using the authorization header for REST calls, the header should be renamed to \"Basic\".</p> <p>Authorization: Basic  <li> <p>Prior to API Manager 4.2.0, only a single registry handler property with nested elements can be added. From API Manager 4.2.0 onwards multiple registry handler properties with nested elements can be added.</p> </li> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 4.2.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-410","title":"Major Changes in API Manager 4.1.0","text":"<ul> <li>With 4.1.0 release, WSO2 API manager has realigned its previous API level mediation policies feature to a more sophisticated policy feature which provides support for not only mediation policies, but a vast number of different use cases. Please refer About this release fro more information.</li> </ul> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 4.1.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-400","title":"Major Changes in API Manager 4.0.0","text":"<ul> <li> <p>Prior to WSO2 API Manager 4.0.0, the distributed deployment consisted of five main product profiles, namely Publisher, Developer Portal, Gateway, Key Manager, and Traffic Manager. However, the new architecture in API-M 4.0.0 only has three profiles, namely Gateway, Traffic Manager, and Control Plane.</p> </li> <li> <p>From API-M 4.0.0 onwards API Manager offers analytics as a cloud service. So, APIM analytics won't work if you simply migrate the old analytics configurations to the new version. Further, as the on-premise analytics data cannot be migrated to the Cloud, you need to maintain the old analytics server and keep the UI running for as long as you need that data (e.g. 3 months) after migrating to the new version of analytics in WSO2 API-M 4.0.0. You need to register with the analytics cloud in order to use the new API Manager Analytics. Please follow the Analytics Documentation.</p> </li> <li> <p>From API-M 4.0.0 onwards, synapse artifacts have been removed from the file system and are managed via database. At server startup the synapse configs are loaded to the memory from the Traffic Manager.</p> </li> <li> <p>Token and Revoke endpoints have been removed from the Gateway artifacts from API-M 4.0.0 onwards. Use endpoints in the Control Plane instead instead of Gateway endpoints as shown below.     <pre><code>https://localhost:8243/token --&gt; https://localhost:9443/oauth2/token\nhttps://localhost:8243/revoke --&gt; https://localhost:9443/oauth2/revoke\n</code></pre></p> </li> <li> <p>From WSO2 API-M 4.0.0 onwards error responses in API calls has changed from XML to JSON format. If you have developed client applications to handle XML error responses you have to change the client applications to handle the JSON responses.</p> </li> </ul> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 4.0.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-320","title":"Major Changes in API Manager 3.2.0","text":"<ul> <li> <p>Starting from version 3.2.0 of API Manager, support for Third Party Key Managers was introduced, allowing integration with systems like WSO2 Identity Server (WSO2 IS) as well as other authorization servers like Keycloak, Okta, Auth0, and PingFederate.</p> </li> <li> <p>API key validation calls now occur against an in-memory store.</p> </li> <li>Backend JWT generation now takes place at the gateway in API-M 3.2.0, requiring custom JWT generators to be added to the Gateway Node.</li> <li>The Jaggery-based Admin portal UI has been replaced with a new ReactJS-based application from version 3.2.0 onwards.</li> <li>The need for a separate BPS engine for simple approval and rejection tasks has been eliminated in API-M 3.2.0, thanks to the introduction of an Approval Workflow Executor with an inbuilt workflow.</li> <li>Support for tag-wise grouping has been removed in API-M 3.2.0, with users encouraged to utilize API category-based grouping instead.</li> <li>The implicit grant type has been removed from API-M 3.2.0 onwards.</li> <li>Out-of-the-box support for generating Opaque (Reference) access tokens via the Developer Portal has been removed starting from WSO2 API Manager version 3.2.0, requiring application developers to create new applications that only generate JWT type access tokens.</li> </ul> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 3.2.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-to-apim-400/","title":"Upgrading to API Manager 4.0.0","text":"<p>To start the migration you are required to perform the following,</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Understand what has changed between the API-M versions</p> </li> <li>Go through what-has-changed document and identify major changes between versions.</li> <li> <p>Find more details about the API-M 4.0.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.0.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.0.0 to the latest U2 update level.</p> </li> <li> <p>If you have a planning to have a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> <li> <p>Follow the relevant out of the following to continue the migration process.</p> </li> <li>Upgrading from API-M 3.0.0 to 4.0.0</li> <li>Upgrading from API-M 3.1.0 to 4.0.0</li> <li>Upgrading from API-M 3.2.0 to 4.0.0</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.0.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.0.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.0.0 to API-M 4.0.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.0.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.0.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.0.0, you need to move those configuration values to API-M 4.0.0 in place of the default values.</p> <ul> <li>Default API-M 4.0.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li> <p><code>[[event_listener]]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.0.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.0.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.0.0, make sure to include the corresponding configuration from column two in the API-M 4.0.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.0.0, you can safely ignore them during migration as these are no longer required for API-M 4.0.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.0.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.0.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.0.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.0.0 to <code>true</code> in API-M 4.0.0. It is recommended not to configure this in API-M 4.0.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.0.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.0.0 that weren't transferred in the previous steps to API-M 4.0.0. You can identify and copy these remaining configurations and paste them into the API-M 4.0.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.0.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.0.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.0.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.0.0. But, if registry versioning was enabled by you in WSO2 API-M 3.0.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.9.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>-  name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.0.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.0.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.0.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.0.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</li> </ul> </li> <li> <p>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</p> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.0.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.0.0 and API-M version 4.0.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.0.0, you will have to add them again to API-M 4.0.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.0.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.0.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.0.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.0.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>Get the <code>reg-index.sql</code> script from here and run it against the database contains the registry and user management data (<code>SHARED_DB</code>).</p> <p>Note</p> <p>Note that depending on the number of records in the <code>REG_LOG</code> table, this script will take a considerable amount of time to finish. Do not stop the execution of script until it is completed.</p> </li> <li> <p>If you have multiple tenants (no need to do this step if you do not have multiple tenants), Get the <code>tenantloader-1.0.jar</code> file script from here and add it to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If you are working with a clustered/distributed API Manager setup, follow this step on the Store and Publisher nodes.</p> <ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.0.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> <li> <p>If you completed step 2, start the server. Once the server is started, stop it. Then, delete the <code>tenantloader-1.0.jar</code> file from the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.0.0</p> <p>With API-M 3.0.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/upgrading-from-300-to-400/","title":"Upgrading from API-M 3.0.0 to 4.0.0","text":"<p>To migrate from API-M 3.0.0 to 4.0.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.0.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.0.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.1.0 to API-M 4.0.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.0.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.0.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.0.0, you need to move those configuration values to API-M 4.0.0 in place of the default values.</p> <ul> <li>Default API-M 4.0.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li> <p><code>[[event_listener]]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.0.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.0.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.1.0, make sure to include the corresponding configuration from column two in the API-M 4.0.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.1.0, you can safely ignore them during migration as these are no longer required for API-M 4.0.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.1.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.0.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.0.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.1.0 to <code>true</code> in API-M 4.0.0. It is recommended not to configure this in API-M 4.0.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.0.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.1.0 that weren't transferred in the previous steps to API-M 4.0.0. You can identify and copy these remaining configurations and paste them into the API-M 4.0.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.0.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.0.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.0.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.0.0. But, if registry versioning was enabled by you in WSO2 API-M 3.1.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>-  name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.0.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.0.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.0.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.0.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</li> </ul> </li> <li> <p>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</p> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.0.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.1.0 and API-M version 4.0.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.1.0, you will have to add them again to API-M 4.0.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.0.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.0.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.0.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.0.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>Get the <code>reg-index.sql</code> script from here and run it against the database contains the registry and user management data (<code>SHARED_DB</code>).</p> <p>Note</p> <p>Note that depending on the number of records in the <code>REG_LOG</code> table, this script will take a considerable amount of time to finish. Do not stop the execution of script until it is completed.</p> </li> <li> <p>If you have multiple tenants (no need to do this step if you do not have multiple tenants), Get the <code>tenantloader-1.0.jar</code> file script from here and add it to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If you are working with a clustered/distributed API Manager setup, follow this step on the Store and Publisher nodes.</p> <ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.0.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> <li> <p>If you completed step 2, start the server. Once the server is started, stop it. Then, delete the <code>tenantloader-1.0.jar</code> file from the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.1.0</p> <p>With API-M 3.2.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/upgrading-from-310-to-400/","title":"Upgrading from API-M 3.1.0 to 4.0.0","text":"<p>To migrate from API-M 3.1.0 to 4.0.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.0.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.0.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.2.0 to API-M 4.0.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.0.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.0.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.0.0, you need to move those configuration values to API-M 4.0.0 in place of the default values.</p> <ul> <li>Default API-M 4.0.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li> <p><code>[[event_listener]]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.0.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.0.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.2.0, make sure to include the corresponding configuration from column two in the API-M 4.0.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.2.0, you can safely ignore them during migration as these are no longer required for API-M 4.0.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.2.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.0.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.0.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.2.0 to <code>true</code> in API-M 4.0.0. It is recommended not to configure this in API-M 4.0.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.0.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.2.0 that weren't transferred in the previous steps to API-M 4.0.0. You can identify and copy these remaining configurations and paste them into the API-M 4.0.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.0.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.0.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.0.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.0.0. But, if registry versioning was enabled by you in WSO2 API-M 3.2.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.0.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.0.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.0.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.0.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</li> </ul> </li> <li> <p>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</p> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.0.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.2.0 and API-M version 4.0.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.2.0, you will have to add them again to API-M 4.0.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.0.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.0.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.0.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.0.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>Get the <code>reg-index.sql</code> script from here and run it against the database contains the registry and user management data (<code>SHARED_DB</code>).</p> <p>Note</p> <p>Note that depending on the number of records in the <code>REG_LOG</code> table, this script will take a considerable amount of time to finish. Do not stop the execution of script until it is completed.</p> </li> <li> <p>If you have multiple tenants (no need to do this step if you do not have multiple tenants), Get the <code>tenantloader-1.0.jar</code> file script from here and add it to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If you are working with a clustered/distributed API Manager setup, follow this step on the Store and Publisher nodes.</p> <ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.0.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> <li> <p>If you completed step 2, start the server. Once the server is started, stop it. Then, delete the <code>tenantloader-1.0.jar</code> file from the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/upgrading-from-320-to-400/","title":"Upgrading from API-M 3.2.0 to 4.0.0","text":"<p>To migrate from API-M 3.2.0 to 4.0.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-to-apim-410/","title":"Upgrading to API Manager 4.1.0","text":"<p>To start the migration you are required to perform the following,</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Understand what has changed between the API-M versions</p> </li> <li>Go through what-has-changed document and identify major changes between versions.</li> <li> <p>Find more details about the API-M 4.1.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.1.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.1.0 to the latest U2 update level.</p> </li> <li> <p>If you have a planning to have a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> <li> <p>Follow the relevant out of the following to continue the migration process.</p> </li> <li>Upgrading from API-M 3.0.0 to 4.1.0</li> <li>Upgrading from API-M 3.1.0 to 4.1.0</li> <li>Upgrading from API-M 3.2.0 to 4.1.0</li> <li>Upgrading from API-M 4.0.0 to 4.1.0</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.0.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li>Default API-M 4.1.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.0.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#step-2-migration-the-api-manager-data","title":"Step 2: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only user store, make sure not to change the admin_role configuration in the deployment.toml this time.</p> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.0.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 4.0.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only userstore, make sure to change the admin_role=\"\" under [super_admin] configuration in the deployment.toml file before restarting the server. After that, you have to follow the steps given below. <ol> <li>Log in to the admin portal and navigate to the scope mapping section.</li> <li>Map the admin role to the <code>&lt;admin_role&gt;</code> role.</li> <li>Then log in to the Management Console and delete the admin role</li> </ol> <ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/upgrading-from-400-to-410/","title":"Upgrading from API-M 4.0.0 to 4.1.0","text":"<p>To migrate from API-M 4.0.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.0.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li> <p>Default API-M 4.1.0 TOML Elements:</p> <ul> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li><code>[oauth.grant_type.token_exchange]</code></li> </ul> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.0.0, make sure to include the corresponding configuration from column two in the API-M 4.1.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.0.0, you can safely ignore them during migration as these are no longer required for API-M 4.1.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.0.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.1.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.1.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.0.0 to <code>true</code> in API-M 4.1.0. It is recommended not to configure this in API-M 4.1.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.1.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.0.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.1.0. But, if registry versioning was enabled by you in WSO2 API-M 3.0.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.9.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.1.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.0.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.0.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.0.0</p> <p>With API-M 3.0.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/upgrading-from-300-to-410/","title":"Upgrading from API-M 3.0.0 to 4.1.0","text":"<p>To migrate from API-M 3.0.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.1.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li>Default API-M 4.1.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.1.0, make sure to include the corresponding configuration from column two in the API-M 4.1.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.1.0, you can safely ignore them during migration as these are no longer required for API-M 4.1.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.1.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.1.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.1.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.1.0 to <code>true</code> in API-M 4.1.0. It is recommended not to configure this in API-M 4.1.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.1.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.1.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.1.0. But, if registry versioning was enabled by you in WSO2 API-M 3.1.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.1.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.1.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.1.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.1.0</p> <p>With API-M 3.2.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.    1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>  For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <p>To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below. </p> <p><code>https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb</code></p> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table. </p> <pre><code>`UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table. </p> <pre><code>`UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/upgrading-from-310-to-410/","title":"Upgrading from API-M 3.1.0 to 4.1.0","text":"<p>To migrate from API-M 3.1.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.2.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li>Default API-M 4.1.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.2.0, make sure to include the corresponding configuration from column two in the API-M 4.1.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.2.0, you can safely ignore them during migration as these are no longer required for API-M 4.1.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.2.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.1.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.1.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.2.0 to <code>true</code> in API-M 4.1.0. It is recommended not to configure this in API-M 4.1.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.1.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.2.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n-   name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.1.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.2.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.2.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/upgrading-from-320-to-410/","title":"Upgrading from API-M 3.2.0 to 4.1.0","text":"<p>To migrate from API-M 3.2.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-to-apim-420/","title":"Upgrading to API Manager 4.2.0","text":"<p>To start the migration you are required to perform the following,</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Understand what has changed between the API-M versions</p> </li> <li>Go through what-has-changed document and identify major changes between versions. </li> <li> <p>Find more details about the API-M 4.2.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.2.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.2.0 to the latest U2 update level. </p> </li> <li> <p>If you have a planning to have a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> <li> <p>Follow the relevant out of the following to continue the migration process.</p> <ul> <li>Upgrading from API-M 3.0.0 to 4.2.0</li> <li>Upgrading from API-M 3.1.0 to 4.2.0</li> <li>Upgrading from API-M 3.2.0 to 4.2.0</li> <li>Upgrading from API-M 4.0.0 to 4.2.0</li> <li>Upgrading from API-M 4.1.0 to 4.2.0</li> </ul> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.0.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.0.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note </p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5. </p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.11.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.11.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 6 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only user store, make sure not to change the admin_role configuration in the deployment.toml this time.</p> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.0.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 4.0.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only userstore, make sure to change the admin_role=\"\" under [super_admin] configuration in the deployment.toml file before restarting the server. After that, you have to follow the steps given below. <ol> <li>Log in to the admin portal and navigate to the scope mapping section.</li> <li>Map the admin role to the <code>&lt;admin_role&gt;</code> role.</li> <li>Then log in to the Management Console and delete the admin role</li> </ol> <ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/upgrading-from-400-to-420/","title":"Upgrading from API-M 4.0.0 to 4.2.0","text":"<p>To migrate from API-M 4.0.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.0.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li> <p>Default API-M 4.2.0 TOML Elements:</p> <ul> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li><code>[oauth.grant_type.token_exchange]</code></li> </ul> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.0.0, make sure to include the corresponding configuration from column two in the API-M 4.2.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.0.0, you can safely ignore them during migration as these are no longer required for API-M 4.2.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.0.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.2.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.2.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.0.0 to <code>true</code> in API-M 4.2.0. It is recommended not to configure this in API-M 4.2.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.2.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.0.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.2.0. But, if registry versioning was enabled by you in WSO2 API-M 3.0.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note</p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.9.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from <code>migration-config.yaml</code>, which are included under version: \"5.11.0\".</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> </li> <li> <p>Linux / Mac OS       <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>Windows       <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> </li> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> <li> <p>If you followed step 8 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.0.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.0.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.0.0</p> <p>With API-M 3.0.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/upgrading-from-300-to-420/","title":"Upgrading from API-M 3.0.0 to 4.2.0","text":"<p>To migrate from API-M 3.0.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.1.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.1.0, make sure to include the corresponding configuration from column two in the API-M 4.2.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.1.0, you can safely ignore them during migration as these are no longer required for API-M 4.2.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.1.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.2.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.2.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.1.0 to <code>true</code> in API-M 4.2.0. It is recommended not to configure this in API-M 4.2.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.2.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.1.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.2.0. But, if registry versioning was enabled by you in WSO2 API-M 3.1.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note</p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following 3 steps from <code>migration-config.yaml</code>, which are included under version: \"5.11.0\".</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> </li> <li> <p>Linux / Mac OS       <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>Windows       <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> </li> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.1.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.1.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.1.0</p> <p>With API-M 3.2.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.    1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>  For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <p>To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below. </p> <p><code>https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb</code></p> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table. </p> <pre><code>`UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table. </p> <pre><code>`UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/upgrading-from-310-to-420/","title":"Upgrading from API-M 3.1.0 to 4.2.0","text":"<p>To migrate from API-M 3.1.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.2.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.2.0, make sure to include the corresponding configuration from column two in the API-M 4.2.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.2.0, you can safely ignore them during migration as these are no longer required for API-M 4.2.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.2.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.2.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.2.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.2.0 to <code>true</code> in API-M 4.2.0. It is recommended not to configure this in API-M 4.2.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.2.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.2.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note </p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5. </p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following 3 steps from <code>migration-config.yaml</code>, which are included under version: \"5.11.0\".</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0\n</code></pre> <p>Important</p> <p>When migrating the API Manager (APIM) components in a distributed setup, you might encounter the following error. This error can be safely ignored, as it occurs because the other servers (Traffic Manager, Gateway) are not running during the APIM component migration on the Control Plane (CP) node.</p> </li> </ul> <p>ERROR - DataEndpointConnectionWorker Error while trying to connect to the endpoint. Cannot borrow client for ssl://localhost:9713    org.wso2.carbon.databridge.agent.exception.DataEndpointAuthenticationException: Cannot borrow client for ssl://localhost:9713</p> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.2.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.2.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#step-3-advanced-admin-configurations","title":"Step 3: Advanced Admin Configurations","text":"<ul> <li>In APIM 4.2.0, self-signup is enabled by default for all tenants. Hence make sure to disable or enable it based on your preference. Please refer the what-has-changed section for further information.</li> </ul> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/upgrading-from-320-to-420/","title":"Upgrading from API-M 3.2.0 to 4.2.0","text":"<p>To migrate from API-M 3.2.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.1.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.1.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note </p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5. </p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.11.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.11.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 6 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only user store, make sure not to change the admin_role configuration in the deployment.toml this time.</p> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.1.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 4.1.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only userstore, make sure to change the admin_role=\"\" under [super_admin] configuration in the deployment.toml file before restarting the server. After that, you have to follow the steps given below. <ol> <li>Log in to the admin portal and navigate to the scope mapping section.</li> <li>Map the admin role to the <code>&lt;admin_role&gt;</code> role.</li> <li>Then log in to the Management Console and delete the admin role</li> </ol> <ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/upgrading-from-410-to-420/","title":"Upgrading from API-M 4.1.0 to 4.2.0","text":"<p>To migrate from API-M 4.1.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-to-apim-430/","title":"Upgrading to API Manager 4.3.0","text":"<p>To start the migration you are required to perform the following,</p> <p>Important</p> <p>If you are migrating from a version prior to 4.2.0, you need to first migrate to 4.2.0 and then migrate to the latest version. For example, if you are migrating from 3.2.0 to 4.3.0, you need to first migrate to 4.2.0 and then migrate to 4.3.0.</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Find more details about the API-M 4.3.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.3.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.3.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.3.0 to the latest U2 update level.</p> <ul> <li> <p>If you have a plan to configure a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> </ul> </li> <li> <p>Navigate through the following link and follow the instructions to continue the migration process.</p> <ul> <li>Upgrading from API-M 4.2.0 to 4.3.0</li> </ul> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/","title":"Configuration Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.3.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.3.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.3.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.2.0 to API-M 4.3.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.3.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.3.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.3.0, you need to move those configuration values to API-M 4.3.0 in place of the default values.</p> <ul> <li>Default API-M 4.3.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.analytics]</code></li> <li><code>[apim.ai]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.3.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.3.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.2.0 that weren't transferred in the previous steps to API-M 4.3.0. You can identify and copy these remaining configurations and paste them into the API-M 4.3.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.3.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.3.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/","title":"Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/#data-migration","title":"Data Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.3.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>Note</p> <p>In the new approach a database script is executed on relevant databases for new columns and table additions. The required data migration will happen automatically with the update operations.</p> <p>From DB scripts included here, run the script corresponding to your DB type on the <code>apim_db</code> (database keeping specific API-M related data).</p> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/","title":"Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.3.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.2.0 and API-M version 4.3.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.3.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.3.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/","title":"Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.3.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if WSO2 IS has been configured as the Resident Key Manager in your previous deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.3.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.3.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.3.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.3.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.3.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.3.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.3.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/","title":"Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.3.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.3.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-2-start-the-api-manager","title":"Step 2: Start the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-3-add-tenant-specific-customizations","title":"Step 3: Add Tenant Specific Customizations","text":"<p>If you have tenant-specific customizations in the previous version stop the API-M server and reapply those customizations. </p> <p>This step need to be performed after the server startup actions because the tenant directories are created only at the server startup.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-4-restart-the-api-manager","title":"Step 4: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> </ul> <p>By now, you should have completed the migration process successfully.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/upgrading-from-420-to-430/","title":"Upgrading to 4.3.0","text":"<p>To migrate from API-M 4.2.0 to 4.3.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Complete the Resource and Artifact Migration. - Step 3: Execute the Extensions and Customizations Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/other-docs/data-migration-on-different-envs/","title":"Data Migration On Different Environments","text":""},{"location":"api-manager/apim-revamped/other-docs/data-migration-on-different-envs/#recommended-approach","title":"Recommended Approach","text":"<p>It's recommended to conduct the data migration on a separate virtual machine (VM)/ local machine regardless of your deployment environment. Once the data migration is completed, you can direct the production environment deployment to the migrated data source.</p> <p>The data migration process involves modifying existing databases to support the new API-M version. This is achieved by running a migration client through an API-M instance(All-in-One or Control-Plane instance). The migration client performs tasks such as creating new tables, altering existing ones, and transferring data between tables to ensure the database supports the new version. So, the primary requirement for data migration is access to the data source. The environment on which the migration client operates is not crucial, as the migration changes are directly applied to the database.</p> <p>Therefore, we suggest conducting the data migration on a VM/local machine. This will enable you to perform the data migration seamlessly while following our documentation as provided.</p>"},{"location":"api-manager/apim-revamped/other-docs/data-migration-on-different-envs/#alternate-approaches","title":"Alternate Approaches","text":"<ul> <li> <p>If you are unable to follow the previously mentioned approach and need to perform the data migration directly on a K8s cluster, you can do so using a single pod Deployment in K8s. However, this method is not straightforward. It involves creating custom product images with migration jars/ resources, and defining appropriate K8s Deployments. Moreover, this approach carries significant risks, as premature termination of pods conducting the data migration could potentially leave the database in a corrupted state. Therefore, if you intend to proceed with data migration on K8s, please contact WSO2 Support for assistance.</p> </li> <li> <p>If you are unable to follow the previously mentioned approach and need to perform the data migration directly within Docker containers, you can do so by configuring a Docker container environment. However, the specifics of this process may vary with your Docker environment. Therefore, if you intend to proceed with data migration within Docker containers, it is advisable to contact WSO2 Support for assistance.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/","title":"API-M Data Migration on Kubernetes","text":"<p>This guide provides a guide to follow during data migration, if you are using K8s.</p>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/#recommended-approach","title":"Recommended Approach","text":"<p>When migrating a Kubernetes environment to a newer API Manager version, it is recommended to perform the data migration in a separate VM (preferred), a local machine, or a single container. Once the data migration is complete, you can then simply connect your Kubernetes deployment to the migrated data source.</p> <ul> <li> <p>Firstly, ensure you have an APIM All-in-One/Control-Plane pack containing all your configurations and customizations. If you've completed previous migration steps, you should already have this pack.</p> </li> <li> <p>Then, follow the steps outlined in the version-specific data migration guideline to add migration resources and migration client(s) to the appropriate directories and carry out the data migration. Make sure your VM/machine/container has access to the data source.</p> </li> <li> <p>Once the migration is complete, update your Kubernetes deployment configuration to point to the migrated data source.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/#alternate-approach","title":"Alternate Approach","text":"<p>If you can not follow the above approach and require to perform the data migration on a K8s cluster itself, you can do so with a with a K8s single pod Deployment, please refer the following.</p> <p>IMPORTANT!</p> <p>This approach carries a significant risk and should only be considered as a last resort. If the pod running the client is prematurely terminated during the data migration process, it can potentially corrupt the database, necessitating a restoration to a previous state. Therefore, if you must proceed with this method, ensure you take database dumps beforehand to facilitate restoration if needed.</p> <ul> <li> <p>To begin, ensure you have an APIM All-in-One/Control-Plane pack containing all your configurations and customizations. If you've completed previous migration steps, obtaining this pack should be straightforward.</p> </li> <li> <p>Next, follow the version-specific data migration guideline and follow the outlined steps to add migration resources and migration clients to the appropriate directories.</p> </li> <li> <p>Then, create custom product images as follows:</p> <ul> <li>If you use the inbuilt resident KM, create a custom product image containing the IS migration client jar and resources. </li> <li>Create a custom product image containing the API migration client jar and resources.</li> <li>Please note that you cannot have both clients in a single image.</li> </ul> </li> <li> <p>Use these custom images with a K8s single pod Deployment to execute the identity/apim data migration process commands on the cluster. Below, we've provided a sample K8s Deployment for reference. Follow this example to develop your own K8s Deployment for the migration. </p> <ul> <li>Replace <code>&lt;CUSTOM_APIM_IMG_WITH_MIGRATION_JAR&gt;</code> with the custom images you built previously.</li> <li>You can modify the <code>command</code> field to execute the relevant migration command. Refer to the version-specific data migration to identify the appropriate commands.</li> <li> <p>Each command may necessitate a new deployment. After the K8s pod initiates, monitor the logs. Once the server launches and the migration commands conclude, remove the deployment and proceed to the next command. Essentially, this approach involves executing each migration command sequentially via a K8s Deployment.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: wso2am\nnamespace: wso2am\nspec:\nreplicas: 1\nselector:\nmatchLabels:\napp: wso2am\ntemplate:\nmetadata:\nlabels:\napp: wso2am\nspec:\ncontainers:\n- name: wso2am\nimage: \"&lt;CUSTOM_APIM_IMG_WITH_MIGRATION_JAR&gt;\"\nports:\n- containerPort: 9443\ncommand: [\"sh\", \"-c\", \"&lt;API_M_HOME&gt;/bin/api-manager.sh -Dmigrate -DmigrateFromVersion=3.x.x -DmigratedVersion=4.x.x\"]\nresources:\nrequests:\nmemory: \"2000Mi\"\ncpu: \"1000m\"\nlimits:\nmemory: \"4000Mi\"\ncpu: \"1000m\"\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/#-once-the-data-migration-is-complete-update-your-kubernetes-new-production-deployment-configuration-to-point-to-the-migrated-data-source","title":"- Once the data migration is complete, update your Kubernetes new production deployment configuration to point to the migrated data source.","text":"<p>IMPORTANT</p> <p>With either of the above options, if you are migrating from WSO2 IS/ WSO2 IS as KM in the previous version to WSO2 IS in the latest version, first migrate WSO2 IS/IS as KM.</p>"}]}