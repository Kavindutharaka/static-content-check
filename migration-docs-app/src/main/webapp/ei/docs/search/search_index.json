{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"page-not-found/","title":"Page not found","text":"<p> Page Not Found <p>Sorry, but the page you are looking for does not exist, has been removed, renamed, or is temporarily unavailable. Please try using one of the navigation links above or the search bar in the top right corner.</p> <p>For further inquiries, reach us at the <code>help-asgardeo</code> channel in the WSO2 Discord server.             Alternatively, you can reach out to the Asgardeo support team.</p> </p>"},{"location":"enterprise-integrator/","title":"WSO2 Enterprise Integrator Documentation","text":"<p> Document WSO2 Enterprise Integrator (WSO2 EI) 7.x is an open-source hybrid integration platform that enables API-centric integration using integration architecture styles such as microservices or centralized ESB. The platform provides a graphical drag-and-drop flow designer and a configuration-driven approach to build low-code integration solutions for cloud and container-native projects."},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/","title":"Upgrading from WSO2 ESB 4.8.1 to 5.0.0","text":"<p>This page walks you through the process of upgrading to ESB 5.0.0 from ESB 4.8.1.</p> <p>If you are upgrading from a version older than ESB 4.8.1, you will need to first upgrade to ESB 4.8.1 and then upgrade to ESB 5.0.0.</p> <p>From WSO2 ESB 5.0.0 onwards, it does not support processing any mediators added after the send mediator in a given sequence because it may lead to erroneous behaviors when the message stream is consumed by the send mediator in passthrough scenarios. Therefore, if you have sequences with mediators after the send mediator, you need to change those sequences to have the send mediator inside a clone mediator, thereby, it will clone the message and process it separately. For example, see below.</p> <pre><code>&lt;clone sequential=\"true\"&gt;\n    &lt;target&gt;\n         &lt;sequence&gt;\n              &lt;send&gt;\n                   &lt;endpoint key=\"ABC\"/&gt;\n               &lt;/send&gt;\n         &lt;/sequence&gt;\n     &lt;/target&gt;\n     &lt;target&gt;\n         &lt;sequence&gt;\n             &lt;switch xmlns:ns=\"http://org.apache.synapse/xsd\" source=\"get-property('XYZ')\"&gt;\n                  &lt;case regex=\"CASE1 \"&gt;\n                       &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### CASE ####\" value=\"IN CASE1\"/&gt;\n                       &lt;/log&gt;\n                       &lt;sequence key=\"TEST.PQR \"/&gt;\n                        &lt;drop/&gt;\n                     &lt;/case&gt;\n                     &lt;default&gt;\n                        &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### DEFAULT ####\" value=\"IN DEFAULT\"/&gt;\n                        &lt;/log&gt;\n                        &lt;drop/&gt;\n                     &lt;/default&gt;\n                  &lt;/switch&gt;\n           &lt;/sequence&gt;\n     &lt;/target&gt;\n&lt;/clone&gt;\n</code></pre> <p>The followings steps describe how you can upgrade data and configurations when upgrading from ESB 4.8.1 to ESB 5.0.0. For more information on release versions, see the Release Matrix.</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the database in your ESB instance.</li> <li>Copy the  directory to back up the ESB product configurations. Download ESB 5.0.0 from http://wso2.com/products/enterprise-service-bus/. <p>Note</p> <p>The downtime is limited to the time taken for switching databases in the production environment</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#upgrading-the-database","title":"Upgrading the database","text":"<p>The instructions in this section describe how you can perform a data migration to upgrade the 4.8.1 database for use in ESB 5.0.0.</p> <ol> <li> <p>Before you upgrade to ESB 5.0.0, create a new database and restore the backup of the ESB 4.8.1 database in this new database.</p> <ul> <li>You should NOT connect a new version of WSO2 ESB to an older database that has not been upgraded.</li> <li>If you are using a MySQL database, you will need to select the mysql.sql script for the upgrade from  list of scripts provided by the WSO2 team and run it on the new database. Running this script will ensure that the new database is upgraded to have the additional tables and schemas that are required for ESB 5.0.0. </li> </ul> </li> <li> <p>Get the WSO2 Identity Server Migration Client provided by the WSO2 team. This client will migrate the user management database schemas that are used by WSO2 ESB. Unzip the downloaded file to the local file system, and you will have a directory named  wso2is-5.1.0-migration . Then do the following:</p> <p>The user management database is where information about the users and user roles are stored, e.g., login name, password, first name, last name, e-mail address, etc. The user management database of every Carbon based product is handled by a feature that comes with WSO2 Identity Server. Therefore, to migrate the user management database schemas we have to use the WSO2 Identity Server Migration Client.</p> <ol> <li>Copy the wso2is-5.1.0-migration/dbscripts/migration\u00ad-5.0.0_to_5.1.0 directory to the /dbscripts directory. <li>Copy the wso2is-5.1.0-migration/dbscripts/identity/migration\u00ad-5.0.0SP1_to_5.1.0 directory and the wso2is-5.1.0-migration/dbscripts/identity/migration-5.0.0_to_5.0.0SP1 directory to the /dbscripts/identity directory. <li>Copy the wso2is-5.1.0-migration/dropins/org.wso2.carbon.is.migrate.client-\u00ad5.1.0.jar file to the /repository/components/dropins directory. <li> <p>Start WSO2 ESB 5.0.0 using the command line with the options given below in the following order:</p> <pre><code>-Dmigrate -DmigrateUMDB -Dcomponent=identity\n-Dmigrate -DmigrateUMData -Dcomponent=identity\n</code></pre> <p>There is a known issue where an exception is thrown when you run the -Dmigrate -DmigrateUMData -Dcomponent=identity command and this will be fixed soon. However, based on our testing this has no impact on the migration process.</p> </li> <p>This will carry out the migration of the user management database.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#migrating-the-configuration-files","title":"Migrating the configuration files","text":"<p>Note</p> <p>Configurations should not be copied directly between servers.</p> <p>To connect ESB 5.0.0 to the upgraded database, configure the following files:</p> <ol> <li>Go to the /repository/conf/datasources directory and update the master-datasources.xml file. See Configuring master-datasources.xml. <li> <p>Go to the /repository/conf directory and update the datasource references in the user-mgt.xml and registry.xml files to match the updated configurations in the  master-datasources.xml file that you made in the above step. See Configuring user-mgt.xml and Configuring registry.xml. <li> <p>Check for any other configurations that were done for ESB 4.8.1 based on your solution and update the configuration files in ESB 5.0.0 accordingly. For example, configurations related to external user stores, caching, mounting, transports, etc.</p> <p>Note</p> <p>The following files have changed from ESB 4.8.1 to ESB 5.0.0:</p> <ul> <li>axis2.xml</li> <li>axis2_nhttp.xml</li> <li>axis2_pt.xml</li> <li>tenant-axis2.xml</li> <li>cache.xml</li> <li>config-validation.xml</li> <li>logging-bridge.properties</li> <li>osgi-debug.option</li> <li>cloud-services-desc.xml</li> <li>authenticators.xml</li> <li>ciper-tool.properties</li> <li>catalina-server.xml</li> <li>carbon.xml</li> <li>identity.xml</li> <li>nhttp.properties</li> <li>passthru-http.properties</li> <li>synapse.properties</li> <li>user-mgt.xml</li> </ul> </li> <li> <p>If there are any third-party libraries used with ESB 4.8.1 that you want to migrate, copy the contents of the following directories as applicable from ESB 4.8.1 to ESB 5.0.0: </p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents of /repository/components/lib <li>If you have used OSGi bundles such as SVN kit, etc, copy the contents of /repository/components/dropins"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#migrating-artifacts","title":"Migrating artifacts","text":"<p>You should manually deploy Composite Application Archive (CAR) files that you have in ESB 4.8.1 to ESB 5.0.0. If you have a mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR. See Deploying Composite Applications in the Server in WSO2 Admin Guide for further details.</p> <p>Note</p> <p>To migrate deployment artifacts including ESB message flow configurations.</p> <ul> <li> <p>Copy the required Synapse artifacts from the /repository/deployment/server directory of ESB 4.8.1 to ESB 5.0.0. If you do not have axis2 modules or axis2 services, you can copy the required Synapse artifacts from the /repository/deployment/server/synapse-configs/default directory of ESB 4.8.1 to ESB 5.0.0. <ul> <li>If you have used the Script mediator within your synapse configuration with the setProperty() method, you will need to modify the configuration as described here.</li> <li>Ensure that there are no mediator configurations after Send mediator in the same sequence, because WSO2 ESB does not process them. Any mediator configuration after the Send mediator should go to the outSequence or receive sequence.</li> </ul> <li> <p>If multi-tenancy is used, copy the /repository/tenants directory from ESB 4.8.1 to ESB 5.0.0. <p>Warning</p> <p>The org.wso2.caching.digest.REQUESTHASHGenerator interface, which is supported by WSO2 ESB 4.8.1 is not supported by later versions. Therefore, change the artifacts to use the org.wso2.carbon.mediator.cache.digest.DOMHASHGenerator as the hash generator when migrating artifacts related to the Cache mediator from WSO2 ESB 4.8.1 to a later version.</p> <p>Warning</p> <p>Prior to copying the above folders, remove all secured services from the folder.</p> <p>With the removal of QoS features from the ESB management console, enabling security for services hosted in ESB has changed from ESB 4.9.0 onwards. You now need to secure your services using ESB Tooling before you can migrate them to ESB 5.0.0. </p> <p>See Applying Security to a Proxy Service for instructions on how to create secured services and deploy them in ESB.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#testing-the-upgrade","title":"Testing the upgrade","text":"<p>Verify that all the required scenarios are working as expected in ESB 5.0.0. This confirms that the upgrade is successful.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/","title":"Upgrading from WSO2 ESB 4.9.0 to 5.0.0","text":"<p>This page walks you through the process of upgrading to ESB 5.0.0 from ESB 4.9.0.</p> <p>If you are upgrading from a version older than ESB 4.9.0, you will need to first upgrade to ESB 4.9.0 and then upgrade to ESB 5.0.0.</p> <p>From WSO2 ESB 5.0.0 onwards, it does not support processing any mediators added after the send mediator in a given sequence because it may lead to erroneous behaviors when the message stream is consumed by the send mediator in passthrough scenarios. Therefore, if you have sequences with mediators after the send mediator, you need to change those sequences to have the send mediator inside a clone mediator, thereby, it will clone the message and process it separately. For example, see below.</p> <pre><code>&lt;clone sequential=\"true\"&gt;\n    &lt;target&gt;\n         &lt;sequence&gt;\n              &lt;send&gt;\n                   &lt;endpoint key=\"ABC\"/&gt;\n               &lt;/send&gt;\n         &lt;/sequence&gt;\n     &lt;/target&gt;\n     &lt;target&gt;\n         &lt;sequence&gt;\n             &lt;switch xmlns:ns=\"http://org.apache.synapse/xsd\" source=\"get-property('XYZ')\"&gt;\n                  &lt;case regex=\"CASE1 \"&gt;\n                       &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### CASE ####\" value=\"IN CASE1\"/&gt;\n                       &lt;/log&gt;\n                       &lt;sequence key=\"TEST.PQR \"/&gt;\n                        &lt;drop/&gt;\n                     &lt;/case&gt;\n                     &lt;default&gt;\n                        &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### DEFAULT ####\" value=\"IN DEFAULT\"/&gt;\n                        &lt;/log&gt;\n                        &lt;drop/&gt;\n                     &lt;/default&gt;\n                  &lt;/switch&gt;\n           &lt;/sequence&gt;\n     &lt;/target&gt;\n&lt;/clone&gt;\n</code></pre> <p>The followings steps describe how you can upgrade data and configurations when upgrading from ESB 4.9.0 to ESB 5.0.0. For more information on release versions, see the Release Matrix.</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the database in your ESB instance.</li> <li>Copy the  directory to back up the ESB product configurations. Download ESB 5.0.0 from http://wso2.com/products/enterprise-service-bus/. <p>Note</p> <p>The downtime is limited to the time taken for switching databases in the production environment</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#upgrading-the-database","title":"Upgrading the database","text":"<p>The instructions in this section describe how you can perform a data migration to upgrade the 4.9.0 database for use in ESB 5.0.0.</p> <p>Note</p> <p>Before you upgrade to ESB 5.0.0, create a new database and restore the backup of the ESB 4.9.0 database in this new database.</p> <p>It is not mandatory that you migrate the user management database when upgrading from ESB 4.9.0 to ESB 5.0.0.</p> If you choose to proceed without migrating: <p>Set the following property to true in the <code>&lt;ESB_5.0.0_HOME&gt;/repository/conf/user-mgt.xml</code> file as shown below.</p> <p><code>&lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;</code></p> If you choose to migrate: <ol> <li> <p>Get the WSO2 Identity Server Migration Client provided by the WSO2 team. This client will migrate the user management database schemas that are used by WSO2 ESB. Unzip the downloaded file to the local file system, and you will have a directory named  wso2is-5.1.0-migration . Then do the following:</p> <p>The user management database is where information about the users and user roles are stored, e.g., login name, password, first name, last name, e-mail address, etc. The user management database of every Carbon based product is handled by a feature that comes with WSO2 Identity Server. Therefore, to migrate the user management database schemas we have to use the WSO2 Identity Server Migration Client.</p> <ol> <li>Copy the wso2is-5.1.0-migration/dbscripts/migration\u00ad-5.0.0_to_5.1.0 directory to the /dbscripts directory. <li>Copy the wso2is-5.1.0-migration/dbscripts/identity/migration\u00ad-5.0.0SP1_to_5.1.0 directory and the wso2is-5.1.0-migration/dbscripts/identity/migration-5.0.0_to_5.0.0SP1 directory to the /dbscripts/identity directory. <li>Copy the wso2is-5.1.0-migration/dropins/org.wso2.carbon.is.migrate.client-\u00ad5.1.0.jar file to the /repository/components/dropins directory. <li> <p>Start WSO2 ESB 5.0.0 using the command line with the options given below in the following order:</p> <pre><code>-Dmigrate -DmigrateUMDB -Dcomponent=identity\n-Dmigrate -DmigrateUMData -Dcomponent=identity\n</code></pre> <p>There is a known issue where an exception is thrown when you run the -Dmigrate -DmigrateUMData -Dcomponent=identity command and this will be fixed soon. However, based on our testing this has no impact on the migration process.</p> </li> <p>This will carry out the migration of the user management database.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#migrating-the-configuration-files","title":"Migrating the configuration files","text":"<p>Note</p> <p>Configurations should not be copied directly between servers.</p> <p>To connect ESB 5.0.0 to the upgraded database, configure the following files:</p> <ol> <li>Go to the /repository/conf/datasources directory and update the master-datasources.xml file. See Configuring master-datasources.xml. <li> <p>Go to the /repository/conf directory and update the datasource references in the user-mgt.xml and registry.xml files to match the updated configurations in the  master-datasources.xml file that you made in the above step. See Configuring user-mgt.xml and Configuring registry.xml. <li> <p>Check for any other configurations that were done for ESB 4.9.0 based on your solution and update the configuration files in ESB 5.0.0 accordingly. For example, configurations related to external user stores, caching, mounting, transports, etc.</p> <p>Note</p> <p>The following files have changed from ESB 4.9.0 to ESB 5.0.0:</p> <ul> <li>axis2.xml</li> <li>axis2_nhttp.xml</li> <li>axis2_pt.xml</li> <li>tenant-axis2.xml</li> <li>cache.xml</li> <li>config-validation.xml</li> <li>logging-bridge.properties</li> <li>osgi-debug.option</li> <li>cloud-services-desc.xml</li> <li>authenticators.xml</li> <li>ciper-tool.properties</li> <li>catalina-server.xml</li> <li>carbon.xml</li> <li>identity.xml</li> <li>nhttp.properties</li> <li>passthru-http.properties</li> <li>synapse.properties</li> <li>user-mgt.xml</li> </ul> </li> <li> <p>If there are any third-party libraries used with ESB 4.9.0 that you want to migrate, copy the contents of the following directories as applicable from ESB 4.9.0 to ESB 5.0.0: </p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents of /repository/components/lib <li>If you have used OSGi bundles such as SVN kit, etc, copy the contents of /repository/components/dropins"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#migrating-artifacts","title":"Migrating artifacts","text":"<p>You should manually deploy Composite Application Archive (CAR) files that you have in ESB 4.9.0 to ESB 5.0.0. If you have a mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR. See Deploying Composite Applications in the Server in WSO2 Admin Guide for further details.</p> <p>Note</p> <p>To migrate deployment artifacts including ESB message flow configurations.</p> <ul> <li> <p>Copy the required Synapse artifacts from the /repository/deployment/server directory of ESB 4.9.0 to ESB 5.0.0. If you do not have axis2 modules or axis2 services, you can copy the required Synapse artifacts from the /repository/deployment/server/synapse-configs/default directory of ESB 4.9.0 to ESB 5.0.0. <ul> <li>If you have used the Script mediator within your synapse configuration with the setProperty() method, you will need to modify the configuration as described here.</li> <li>Ensure that there are no mediator configurations after Send mediator in the same sequence, because WSO2 ESB does not process them. Any mediator configuration after the Send mediator should go to the outSequence or receive sequence.</li> </ul> <li> <p>If multi-tenancy is used, copy the /repository/tenants directory from ESB 4.9.0 to ESB 5.0.0. <p>Warning</p> <p>The org.wso2.caching.digest.REQUESTHASHGenerator interface, which is supported by WSO2 ESB 4.9.0 is not supported by later versions. Therefore, change the artifacts to use the org.wso2.carbon.mediator.cache.digest.DOMHASHGenerator as the hash generator when migrating artifacts related to the Cache mediator from WSO2 ESB 4.9.0 to a later version.</p> <p>Warning</p> <p>Prior to copying the above folders, remove all secured services from the folder.</p> <p>With the removal of QoS features from the ESB management console, enabling security for services hosted in ESB has changed from ESB 4.9.0 onwards. You now need to secure your services using ESB Tooling before you can migrate them to ESB 5.0.0. </p> <p>See Applying Security to a Proxy Service for instructions on how to create secured services and deploy them in ESB.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#testing-the-upgrade","title":"Testing the upgrade","text":"<p>Verify that all the required scenarios are working as expected in ESB 5.0.0. This confirms that the upgrade is successful.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/","title":"Upgrading from WSO2 EI 6.4.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.5.0 from WSO2 EI 6.4.0. This will cover the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile </li> <li>Business Process profile </li> <li>Analytics profile</li> </ul> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>If you are upgrading from a version older than WSO2 EI 6.4.0, you should first upgrade to WSO2 EI 6.4.0, and then upgrade to WSO2 EI 6.5.0.</li> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default ports of WSO2 Products. The default ports in WSO2 EI are listed under Enterprise Integrator.</li> </ul> <p>See the following topics for details: - Preparing to upgrade  - Upgrading the databases  - ESB profile   - Migrating configurations of the ESB profile   - Migrating artifacts of the ESB profile  - Message Broker profile   - Migrating configurations of the Message Broker profile   - Migrating artifacts of the Message Broker profile  - Business Process profile   - Migrating configurations of the Business Process profile   - Migrating artifacts of the Business Process profile  - Analytics profile - Starting the profiles</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.4.0 instance.</li> <li>Copy the <code>&lt;EI_6.4.0_HOME&gt;</code> directory to back up the product configurations. </li> <li>Download the product installer from here, and install WSO2 EI 6.5.0.</li> </ul> <p>Let's call the installation location of your product the <code>&lt;EI_HOME&gt;</code> directory.</p> <p>If you installed the product using the installer, this is located in a place specific to your OS as shown below:</p> OS Home directory MacOS <code>/Library/WSO2/EnterpriseIntegrator/6.5.0</code> Windows <code>C:\\Program Files\\WSO2\\EnterpriseIntegrator\\6.5.0\\</code> Ubuntu <code>/usr/lib/wso2/EnterpriseIntegrator/6.5.0</code> CentOS <code>/usr/lib64/EnterpriseIntegrator/6.5.0</code> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for WSO2 EI 6.4.0 with WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.4.0 to WSO2 EI 6.5.0: 1. Copy the database connector JAR files stored in the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.5.0. 2. Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.4.0 from the <code>&lt;EI_6.4.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.5.0. 3. If you have secondary user stores created for the ESB profile of WSO2 EI 6.4.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.5.0. 4. If there are any third-party libraries used with WSO2 EI 6.4.0 that you want to migrate, copy the relevant libraries from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:    - If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.5.0.    - If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.4.0_HOME&gt;/dropins</code> directory to the same directory in WSO2 EI 6.5.0. </p> <p>To migrate the configurations from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for WSO2 EI 6.4.0 based on your solution, and update the configuration files in WSO2 EI 6.5.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>To migrate connector artifacts:</li> <li>Create a folder named synapse-libs in the <code>&lt;EI_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of WSO2 EI 6.5.0, and copy the JARs from the directory by the same name in WSO2 EI 6.4.0. Note that this directory will not exist in your WSO2 EI 6.4.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>To migrate the data service artifacts, copy the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.5.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/repository/tenants</code> directory to the same directory in WSO2 EI 6.5.0:</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory WSO2 EI 6.5.0.</li> <li>Copy the keystores and truststores used in the Message Broker profile of WSO2 EI 6.4.0 from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have secondary user stores created for the Message Broker profile of WSO2 EI 6.4.0, you need to copy the 'userstore' folder in the /wso2/broker/repository/deployment/server/ directory to the same directory in WSO2 EI 6.5.0. <p>To migrate the configurations from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. See Changing the Carbon Database for instructions.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any further configurations that were done for the Message Broker profile in WSO2 EI 6.4.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of WSO2 EI 6.5.0:</li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.5.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of WSO2 EI 6.4.0 from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business- process/repository/resources/security</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have secondary user stores created for the Business Process profile of WSO2 EI 6.4.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6 .4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.5.0.</li> </ol> <p>To migrate the configurations from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry .xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database: If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.    If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.    For instructions, see Changing the Default Databases for BPMN and BPEL.</li> <li>Open the <code>&lt;EI_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change <code>GenerateDdl</code> to <code>false</code>. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of WSO2 EI 6.4.0 based on your solution. For example, check and update the following configurations in WSO2 EI 6.5.0:</li> <li><code>humantask.xml</code> </li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code></li> <li><code>Activiti.xml</code> </li> <li><code>Tenant-mgt.xml</code></li> <li><code>b4p-coordination-config.xml</code></li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.5.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in WSO2 EI 6.5.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#analytics-profile","title":"Analytics profile","text":"<p>If you have configured EI 6.4.0 to publish ESB data to the Analytics profile, you need to enable the same in EI 6.5.0. To do this, follow the instructions in Publishing ESB Data to the Analytics Profile.</p> <p>Info:</p> <p>Note that from EI 6.5.0 onwards, you need to configure the <code>&lt;EI_HOME&gt;/conf/carbon.xml</code> file to enable the ESB server to publish statistics to the Analytics profile, whereas in the EI 6.4.0 and older versions you need to configure the <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code> and <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code> files instead.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the WSO2 EI 6.5.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/","title":"Upgrading from WSO2 Data Services Server","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.6.0 from WSO2 Data Services Server (WSO2 DSS) 3.5.1.</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>If you are upgrading from a version older than WSO2 DSS 3.5.1, you should first upgrade to WSO2 DSS 3.5.1 and then upgrade to WSO2 EI 6.6.0.</li> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> <li>The distribution folder structure has changed from WSO2 DSS 3.5.1 to WSO2 EI 6.6.0.</li> </ul> Data Service Server 3.5.1 Enterprise Integrator 6.6.0 <code>&lt;DSS_HOME&gt;/repository/conf</code> <code>&lt;EI_HOME&gt;/conf</code> <code>&lt;DSS_HOME&gt;/repository/conf/axis2</code> <code>&lt;EI_HOME&gt;/conf/axis2</code> <code>&lt;DSS_HOME&gt;/repository/conf/datasources</code> <code>&lt;EI_HOME&gt;/conf/datasources</code> <code>&lt;DSS_HOME&gt;/repository/components/dropins</code> <code>&lt;EI_HOME&gt;/dropins</code> <code>&lt;DSS_HOME&gt;/repository/components/extensions</code> <code>&lt;EI_HOME&gt;/extensions</code> <code>&lt;DSS_HOME&gt;/repository/components/lib</code> <code>&lt;EI_HOME&gt;/lib</code> <p>See the following topics for instructions:</p> <ul> <li>Preparing to upgrade </li> <li>Upgrading the database </li> <li>Migrating configurations </li> <li>Migrating artifacts </li> <li>Starting the server</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading: - Create a backup of the databases in your WSO2 DSS 3.5.1 instance. - Copy the <code>&lt;DSS_HOME&gt;</code> directory to back up the product configurations. - Download the product installer from here, and install WSO2 EI 6.6.0.</p> <p>Let's call the installation location of your product the <code>&lt;EI_HOME&gt;</code> directory. This is located in a place specific to your OS as shown below:</p> OS Home directory MacOS <code>/Library/WSO2/EnterpriseIntegrator/6.6.0</code> Ubuntu <code>C:\\Program Files\\WSO2\\EnterpriseIntegrator\\6.6.0\\</code> Ubuntu <code>/usr/lib/wso2/EnterpriseIntegrator/6.6.0</code> CentOS <code>/usr/lib64/EnterpriseIntegrator/6.6.0</code> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#upgrading-the-database","title":"Upgrading the database","text":"<p>In WSO2 EI 6.6.0, you can use the same database that you used for WSO2 DSS 3.5.1. Therefore, you can simply restore the backup of the existing databases to use with WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#migrating-configurations","title":"Migrating configurations","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 DSS 3.5.1 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;DSS_HOME&gt;/repository/components/lib</code> directory to the <code>&lt;EI_HOME&gt;/lib</code> directory.</li> <li>Copy the keystores and truststores from the <code>&lt;DSS_HOME&gt;/repository/resources/security</code> directory to the <code>&lt;EI_HOME&gt;/repository/resources/security</code> directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for WSO2 DSS 3.5.1, you need to copy the 'userstore' folder in the <code>&lt;DSS_HOME&gt;/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If there are any third-party libraries used with WSO2 DSS 3.5.1 that you want to migrate, copy the relevant libraries to WSO2 EI 6.6.0:</li> <li>If you have used JMS libraries, JDBC libraries, etc., copy the files from <code>&lt;DSS_HOME&gt;/repository/components/lib</code> directory to the <code>&lt;EI_HOME&gt;/lib</code> directory.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents of <code>&lt;DSS_HOME&gt;/repository/components/dropins</code> director y to the <code>&lt;EI_HOME&gt;/dropins</code> directory.</li> </ol> <p>To migrate the configuration files from WSO2 DSS 3.5.1 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. See Configuring Keystores in WSO2 products for more information.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the master-datasources.xml file with the details of the Carbon database. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf</code> directory and update the datasource references in the user-mgt.xml and registry.xml files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any configurations that were done for WSO2 DSS 3.5.1 based on your solution. For example, update the following configurations in WSO2 EI 6.6.0 accordingly:</li> </ol> <p>a. <code>axis2.xml</code>    b. <code>axis2_client.xml</code>    c. <code>carbon.xml</code></p> <ol> <li>Check the configurations related to external user stores, caching, mounting, transports, etc.</li> </ol> <p>WSO2 EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead. Follow the instructions given below to migrate from log4j (in WSO2 DSS 3.5.1) to log4j2 (in WSO2 EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in WSO2 DSS 3.5.1, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#migrating-artifacts","title":"Migrating artifacts","text":"<ul> <li>To migrate the data service artifacts, copy the <code>&lt;DSS_HOME&gt;/repository/deployment/server/dataservices</code> directory of WSO2 DSS 3.5.1 to WSO2 EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;DSS_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant directory packages from the <code>&lt;DSS_HOME&gt;/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#starting-the-server","title":"Starting the server","text":"<p>Once you have completed the migration, you can start the ESB profile of WSO2 EI. For details see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/","title":"Upgrading from WSO2 Message Broker","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.6.0 from WSO2 Message Broker (WSO2 MB) 3.1.0.</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>If you are upgrading from a version older than WSO2 MB 3.1.0, you should first upgrade to WSO2 MB 3.1.0 and then upgrade to WSO2 EI 6.6.0.</li> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> <li>The distribution folder structure has changed from WSO2 MB 3.1.0 to WSO2 EI 6.6.0.</li> </ul> Message Broker 3.1.0 Enterprise Integrator 6.6.0 <code>&lt;MB_HOME&gt;/repository/conf</code> <code>&lt;EI_HOME&gt;/wso2/broker/conf</code> <code>&lt;MB_HOME&gt;/repository/conf/axis2</code> <code>&lt;EI_HOME&gt;/wso2/broker/conf/axis2</code> <code>&lt;MB_HOME&gt;/repository/conf/datasources</code> <code>&lt;EI_HOME&gt;/wso2/broker/conf/datasources</code> <code>&lt;MB_HOME&gt;/repository/components/dropins</code> <code>&lt;EI_HOME&gt;/dropins</code> <code>&lt;MB_HOME&gt;/repository/components/extensions</code> <code>&lt;EI_HOME&gt;/extensions</code> <code>&lt;MB_HOME&gt;/repository/components/lib</code> <code>&lt;EI_HOME&gt;/lib</code> <code>&lt;MB_HOME&gt;/repository/components/patches</code> <code>&lt;EI_HOME&gt;/patches</code> <p>See the following topics for instructions: - Preparing to upgrade  - Upgrading the databases   - Upgrading the Carbon database   - Upgrading the broker-specifc database  - Migrating the configurations - Migrating tenant artifacts  - Configuring the JMS client  - Starting the server</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Be sure to stop the publishers that are connected to WSO2 MB 3.1.0 before commencing the migration process. </li> <li>Create a backup of the databases in your WSO2 MB 3.1.0 instance.</li> <li>Copy the <code>&lt;MB_HOME&gt;</code> directory to back up the product configurations.</li> <li>Download the product installer from here and install WSO2 EI 6.6.0. Let's call the installation location of your product the <code>&lt;EI_HOME&gt;</code> directory. This is located in a place specific to your OS as shown below:</li> </ul> OS Home directory MacOS <code>/Library/WSO2/EnterpriseIntegrator/6.6.0</code> Windows <code>C:\\Program Files\\WSO2\\EnterpriseIntegrator\\6.6.0\\</code> Ubuntu <code>/usr/lib/wso2/EnterpriseIntegrator/6.6.0</code> CentOS <code>/usr/lib64/EnterpriseIntegrator/6.6.0</code> <p>Info:</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>See the following topics for information on upgrading the databases of WSO2 MB 3.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#upgrading-the-carbon-database","title":"Upgrading the Carbon database","text":"<p>In WSO2 EI 6.6.0, you can use the same Carbon database that you used for MB 3.1.0. Therefore, you can simply restore the backup of the existing Carbon database to use with WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#upgrading-the-broker-specifc-database","title":"Upgrading the broker-specifc database","text":"<p>The Message Broker profile of WSO2 EI comes with several changes to the broker-specific database, and therefore you must upgrade this database as explained below. We are providing a simple tool that you can easily download and run to carry out this upgrade. Follow the steps given below.</p> <ol> <li>Disconnect all the subscribers and publishers of WSO2 MB 3.1.0. </li> <li>Shut down the server.</li> <li>Run the migration script to update the database:</li> <li>Open a terminal and navigate to the <code>&lt;EI_HOME&gt;/wso2/broker/dbscripts/mb-store/migration-3.1.0_to_3.2.0</code> directory, which contains scripts for each database type.</li> <li>Run the migration script relevant to your database type. For example, if you are using Oracle, use the following script: <code>oracle-mb.sql</code>.</li> <li>Run the migration tool:</li> <li>Use the migration tool (<code>org.wso2.mb.migration.tool-2.0.zip</code>) provided by WSO2 Support.</li> <li>Unzip the <code>org.wso2.mb.migration.tool-2.0.zip</code> file. The directory structure of the unzipped folder is as follows:</li> </ol> <code>&lt;TOOL_HOME&gt;</code> <code>lib &lt;folder&gt;</code> <code>config.properties &lt;file&gt;</code> <code>tool.sh &lt;file&gt;</code> <code>README.txt &lt;file&gt;</code> <code>org.wso2.carbon.mb.migration.tool.jar</code> <ol> <li>Download the relevant database connector and copy it to the lib directory in the above folder structure. For example, if you are upgrading your MySQL databases, you can download the MySQL connector JAR from http://dev.mysql.com/downloads/connector/j/5.1.html and copy it to the lib directory.</li> <li> <p>Open the <code>config.properties</code> file from the folder structure shown above and update the database connection details shown below.</p> <pre><code>#Configurations for the database\ndburl=\ndriverclassname=\ndbuser=\ndbpassword=\n</code></pre> <p>The parameters in the above file are as follows:</p> dburl The URL for your broker-specific database. For example, <code>jdbc:mysql://localhost/wso2_mb</code>. driverclassname The database driver class. For example, <code>com.mysql.jdbc.Driver</code> for MySQL. dbuser The user name for connecting to the database. dbpassword The password for connecting to the database. </li> <li> <p>Run the migration tool:</p> <ol> <li>If you are on a Linux environment, open a command prompt and execute the following command: tool.sh.</li> <li>If you are on a non-Linux environment, execute the <code>org.wso2.carbon.mb.migration.tool.jar</code> manually.</li> </ol> </li> </ol> <p>The database is now upgraded with the changes relevant to the Message Broker profile of WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#migrating-the-configurations","title":"Migrating the configurations","text":"<p>To migrate all the required folders, files, libraries, etc. from WSO2 MB 3.1.0 to WSO2 EI 6.6.0:</p> <p>Warning:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;MB_HOME&gt;/repository/components/lib</code> directory to the <code>&lt;EI_HOME&gt;/lib</code> directory of WSO2 EI 6.6.0.</li> <li>Copy the keystores and truststores from the <code>&lt;MB_HOME&gt;/repository/resources/security</code> directory to the <code>&lt;EI_HOME&gt;/wso2/broker/respository/resources/security</code> directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for WSO2 MB 3.1.0, you need to copy the 'userstore' folder in the <code>&lt;MB_HOME&gt;/repository/deployment/server/</code> directory to the <code>&lt;EI_HOME&gt;/wso2/broker/repository/deployment/server</code> directory in WSO2 EI 6.6.0.</li> </ol> <p>To migrate the configurations from WSO2 MB 3.1.0 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. See Configuring Keystores in WSO2 products for more information.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. See Changing the Carbon Database for instructions.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and registry.xml files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li> <p>Check for any further configurations that were done for WSO2 MB 3.1.0 based on your solution. For example, update the following configurations in the Message Broker profile of WSO2 EI 6.6.0:</p> </li> <li> <p><code>broker.xml</code></p> </li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check the configurations related to external user stores, caching, mounting, transports etc.</p> </li> </ol> <p>WSO2 EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead. Follow the instructions given below to migrate from log4j (in WSO2 MB 3.1.0) to log4j2 (in WSO2 EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in WSO2 MB 3.1.0, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If commons.logging is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#migrating-tenant-artifacts","title":"Migrating tenant artifacts","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;MB_HOME&gt;/repository/tenants</code> directory to the <code>&lt;EI_HOME&gt;/wso2/broker/repository/tenants</code> directory of WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#configuring-the-jms-client","title":"Configuring the JMS client","text":"<p>To be able to connect the queues, topics, and durable topic subscribers to the Message Broker profile, change the AMQP transport port of the JMS client to 5675.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#starting-the-server","title":"Starting the server","text":"<p>Once you have completed the migration, you can start the Message Broker profile of WSO2 EI. For details see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/","title":"Upgrade WSO2 Enterprise Integrator","text":"<p>This document walks you through the process of upgrading WSO2 Enterprise Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/#why-upgrade","title":"Why upgrade?","text":"<p>There are multiple reasons why you would want to upgrade the WSO2 product to the latest version. These reasons include but are not limited to the following.</p> <ul> <li>The current product version you are using is reaching its end of life. To see if this is the case, view the support matrix documentation.</li> <li>You want to leverage the new features of the latest version of the product.</li> <li>The version of the product you have does not have certain security and bug fixes that you require.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/#what-has-changed","title":"What has changed","text":"<p>Over the course of its lifetime, WSO2 Enterprise Integrator has changed significantly and some of the features you were using in an older version may not work the same way.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/#get-started","title":"Get started","text":"<p>To make sure that the upgrade process is smooth and you have the best experience, WSO2 recommends that you reach out to WSO2 Support in order to upgrade WSO2 Enterprise Integrator with minimal difficulty.</p> <p>If you are ready to start the migration process, follow the instructions given below.</p> <p>If you already have a WSO2 subscription, create a support ticket with your migration requirements and one of our support engineers will get in touch with you.</p> <ul> <li>Create a ticket</li> </ul> <p>If you are not a WSO2 customer and still need migration assistance and resources, please contact us through the following link. One of our Account Managers will get in touch with you to help.</p> <ul> <li>Contact us</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/","title":"Upgrading from WSO2 EI 6.1.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.1.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile</li> <li>Business Process profile</li> <li>Analytics profile</li> </ul> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <p>See the following topics for details:</p> <ul> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases<ul> <li>Update the database structure</li> <li>Update the data</li> </ul> </li> <li>Migrating configurations of the ESB profile</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.1.0 instance.</li> <li>Copy the <code>&lt;EI_6.1.0_HOME&gt;</code> directory to back up the product configurations.</li> <li>Go to the WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.1.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for the ESB profile of EI 6.1.0 with EI 6.6.0. However, you need to apply the following updates. </p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to update some of the data in the database before you use it with EI 6.6.0.</p> <ul> <li>Re-encrypt (using OAEP) the internally-encrypted information in the database.</li> </ul> <p>As per the Security Advisory (WSO2-2017-0345), EI 6.6.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in the ESB profile of EI 6.1.0). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> <ul> <li>Remove any instances of Message Processor Tasks that were stored in the registry database by EI 6.1.0.</li> </ul> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX + messageProcessorName + taskNumber</code> (in EI 6.1.0) to <code>TASK_PREFIX + messageProcessorName + SYMBOL_UNDERSCORE + taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task  references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.1.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Re-encrypt all internally-encrypted data using OAEP </p> <p>First, let's re-encrypt all the internally-encrypted data by using OAEP.</p> <ol> <li>Get the latest WUM updates (later than the update level released on 18/04/2018) for your EI 6.1.0. This will give you a new EI distribution with the latest updates.</li> <li>Connect the WUM-updated EI distribution to your existing databases (which are used for registry data and user management data):</li> </ol> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf</code> directory) and specify the datasource name.</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> </ol> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (<code>master-datasources.xml</code>, <code>user-mgt.xml</code>, etc.).</li> <li>Be sure that the <code>carbon.properties file</code> which you received from WSO2 Support is included in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory with the following parameter:</li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the WUM-updated ESB server of EI 6.1.0. This will re-encrypt the data in the databases.</li> </ol> <p>Step 2: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <ol> <li>Connect the ESB profile of EI 6.6.0 to your existing databases (which are used for registry data and user management data):</li> </ol> <ol> <li>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</li> </ol> <p>Tip:</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. <ol> <li>Open the <code>registry.xml</code> file (stored in the &lt;<code>EI_6.6.0_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').     <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre></li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"</code>&gt; section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> </ol> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Migrate the keystores from from EI 6.1.0 to EI 6.6.0 .</li> </ol> <p>Tip:</p> <p>These keystores are required when you perform data re-encryption later in this guide.</p> <ol> <li>Move the keystore and truststore files by copying the <code>&lt;EI_6.1.0_HOME&gt;/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li> <p>Open the <code>carbon.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory) and update the details of the keystore used for data encryption.</p> <p>Update the following configuration element:</p> <pre><code>&lt;KeyStore&gt;\n    &lt;Location&gt;${carbon.home}/resources/security/wso2carbon.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n&lt;TrustStore&gt;\n    &lt;!-- trust-store file location --&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;!-- trust-store type (JKS/PKCS12 etc.) --&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;!-- trust-store password --&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre> <p>Add the following configuration element under  in the carbon.xml file, and update the values: <pre><code>&lt;CryptoService&gt;\n  &lt;Enabled&gt;true&lt;/Enabled&gt;\n  &lt;InternalCryptoProviderClassName&gt;org.wso2.carbon.crypto.provider.\nKeyStoreBasedInternalCryptoProvider&lt;/InternalCryptoProviderClassName&gt;\n  &lt;ExternalCryptoProviderClassName&gt;org.wso2.carbon.core.encryption.\nKeyStoreBasedExternalCryptoProvider&lt;/ExternalCryptoProviderClassName&gt;\n  &lt;KeyResolvers&gt;\n    &lt;KeyResolver className=\"org.wso2.carbon.crypto.defaultProvider.resolver.\nContextIndependentKeyResolver\" priority=\"-1\"/&gt;\n  &lt;/KeyResolvers&gt;\n&lt;/CryptoService&gt;\n&lt;InternalKeyStore&gt;  &lt;Location&gt;${carbon.home}/repository/resources/security/internal.jks&lt;\n/Location&gt;\n  &lt;Type&gt;JKS&lt;/Type&gt;\n  &lt;Password&gt;wso2carbon&lt;/Password&gt;\n  &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n  &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre> <p>See Configuring Keystores in WSO2 Products for more information.</p> <p>Step 3: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client re-encrypts plain text strings with OAEP and also changes any message processor data according to the new naming convention.</p> <ol> <li>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</li> <li>Copy the <code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update the following properties:</li> </ol> admin.user.name The user name of the system administrator. keystore.identity.location The location of the keystore that is used for data encryption in the EI 6.6.0. By default, this is <code>&lt;EI_6.6.0_HOME&gt;/repository/resources/security/wso2carbon.jks</code>. keystore.identity.key.password The key password of the default keystore. By default, this is <code>wso2carbon</code>. <ol> <li>Get the migration JAR file which you received from WSO2 Support, and copy it to the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> <li>Open a terminal and navigate to the <code>&lt;EI_6.6.0_HOME&gt;/bin/</code> directory.</li> <li>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei610</code> command as shown below.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command: <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei610\n</code></pre> On Windows</p> <p>Open a terminal and execute the following command: ``` integrator.bat -Dmigrate.from.product.version=ei610</p> <ol> <li>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar</code>) from the <code>&lt;EI _6.6.0_HOME&gt;/dropins/</code> directory.</li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Warning:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Verify that the keystores are migrated. See Configuring Keystores in WSO2 products.</p> </li> </ol> <p>Note:</p> <p>If you successfully followed the instructions on upgrading the databases, the keystore configurations should already be migrated by now.</p> <ol> <li>If you have secondary user stores created for the ESB profile of EI 6.1.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> <li>If there are any third-party libraries used with EI 6.1.0 that you want to migrate, copy the relevant libraries from EI 6.1.0 to EI 6.6.0:</li> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.1.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for EI 6.1.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the ESB profile.</li> </ol> <p>Note:</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the <code>jcifs-1.3.17.jar</code> from here and then place it in <code>&lt;EI_6.6.0_HOME/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.1.0 to EI 6.6.0.</p> <p>Note:</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:</li> <li>Create a folder named <code>synapse-libs</code> in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.1.0. Note that this directory will not exist in your EI 6.1.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> <li>To migrate the data service artifacts, copy the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/repository/tenants</code> directory to the same directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.1.0, the Analytics profile is based on WSO2 Data Analytics Server (WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on WSO2 Stream Processor (WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.1.0 to EI 6.6.0.</p> <p>WSO2 Data Analytics Server is the predecessor of WSO2 Stream Processor. Similar to WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime. In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.1.0 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.1.0.</p> <p>Warning:</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the <code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based Analytics profile in EI 6.1.0, and then transfer the data that you have in EI 6.1.0.</p> <p>Follow the steps given below.</p> <ol> <li>Fork the wos2/product-ei repository.</li> <li>Then, download this repository from your fork.</li> </ol> <p>Info:</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>. 3. In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</p> <pre><code>mvn clean install\n</code></pre> <p>A new JAR named <code>migEI.one-jar.jar</code> is now created inside the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory. The dependencies of this JAR are also created within the same directory.</p> <ol> <li>Copy the <code>migEIAnalytics.bat</code> and <code>migEIAnalytics.sh</code> files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory.</li> <li>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory and execute the Analytics migration script:</li> </ol> <p>On MacOS/Linux/CentOS</p> <pre><code>sh migEIAnalytics.sh\n</code></pre> <p>On Windows</p> <p><pre><code>migEIAnalytics.bat\n</code></pre> 6. As shown below, you must provide the database type.</p> <p>Note:</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>Database types... 1) MySQL 2) Oracle 3) PostgreSQL 4) MSSQL 5) Enter no. of your database type:</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> <ol> <li>To run the Analytics profile of EI 6.1.0, open the terminal, navigate to the <code>&lt;EI-6.1.0_HOME&gt;/wso2/analytics/bin</code> directory, and issue the following command.</li> </ol> <p>On MacOS/Linux/CentOS:</p> <pre><code>sh wso2server.sh\n</code></pre> <p>On Windows:</p> <p><pre><code>wso2server.bat\n</code></pre> </p> <ol> <li>To migrate data related to the Analytics profile, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory and execute the <code>migEIAnalyticsSpark.sql</code> Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.1.0 Analytics profile, you need to add them in the EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li>To start the Analytics profile of EI 6.6.0, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p><pre><code>sh worker.sh\n</code></pre> </p> <p>On Windows</p> <pre><code>worker.bat \n</code></pre> <ol> <li>To view the migrated statistics, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command:</li> </ol> <p>On MacOS/Linux/CentOS</p> <pre><code>sh dashboard.sh\n</code></pre> <p>On Windows</p> <pre><code>dashboard.bat\n</code></pre> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.1.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Note:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.0 to EI 6.6.0: 1. Copy the database connector JAR files stored in the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory EI 6.6.0. 2. Copy the keystores and truststores used in the Message Broker profile of EI 6.1.0 from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in EI 6.6.0. 3. If you have secondary user stores created for the Message Broker profile of EI 6.1.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/broker/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</p> <p>To migrate the configurations from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the  <code>master-datasources.xml</code>  file.</li> <li>Check for any further configurations that were done for the Message Broker profile in EI 6.1.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> <li>See the instructions on migrating log4j configurations for the Message Broker profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.1.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Info:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually. To migrate all the required folders, files, libraries, etc. from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of EI 6.1.0 from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Business Process profile of EI 6.1.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database:</li> <li>If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.</li> <li>If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.</li> </ol> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> <ol> <li>Open the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change <code>GenerateDdl</code> to <code>false</code>. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of EI 6.1.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</li> <li><code>humantask.xml</code></li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code></li> <li><code>Activiti.xml</code></li> <li><code>Tenant-mgt.xml</code></li> <li><code>b4p-coordination-config.xml</code></li> <li><code>process-cleanup.properties</code></li> <li>Check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the Business Process profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>Note:</p> <p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.1.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.1.0, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt; \n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt; \n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <p> org.ops4j.pax.logging pax-logging-log4j2 ${pax.logging.log4j2.version} </p> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging; \nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/","title":"Upgrading from WSO2 EI 6.1.1","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.1.1. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile</li> <li>Business Process profile</li> <li>Analytics profile</li> </ul> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release. </li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <p>See the following topics for details:</p> <ul> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases<ul> <li>Update the database structure</li> <li>Update the data</li> </ul> </li> <li>Migrating configurations of the ESB profile</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.1.1 instance.</li> <li>Copy the <code>&lt;EI_6.1.1_HOME&gt;</code> directory to back up the product configurations.</li> <li>Go to the WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.1.1 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for the ESB profile of EI 6.1.1 with EI 6.6.0. However, you need to apply the following updates. </p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to update some of the data in the database before you use it with EI 6.6.0.</p> <ul> <li>Re-encrypt (using OAEP) the internally-encrypted information in the database.</li> </ul> <p>As per the Security Advisory (WSO2-2017-0345), EI 6.6.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in the ESB profile of EI 6.1.1). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> <ul> <li>Remove any instances of Message Processor Tasks that were stored in the registry database by EI 6.1.1.</li> </ul> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX + messageProcessorName + taskNumber</code> (in EI 6.1.1) to <code>TASK_PREFIX + messageProcessorName + SYMBOL_UNDERSCORE + taskNumber</code> (in EI 6.6.0). </p> <p>When you run the migration client, the existing Task  references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.1.1 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Re-encrypt all internally-encrypted data using OAEP </p> <p>First, let's re-encrypt all the internally-encrypted data by using OAEP.</p> <ol> <li>Get the latest WUM updates (later than the update level released on 18/04/2018) for your EI 6.1.1. This will give you a new EI distribution with the latest updates.</li> <li> <p>Connect the WUM-updated EI distribution to your existing databases (which are used for registry data and user management data):</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> </ol> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).</li> </ol> </li> <li> <p>Be sure that the <code>carbon.properties file</code> which you received from WSO2 Support is included in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory with the following parameter:</p> </li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the WUM-updated ESB server of EI 6.1.1. This will re-encrypt the data in the databases.</li> </ol> <p>Step 2: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <ol> <li> <p>Connect the ESB profile of EI 6.6.0 to your existing databases (which are used for registry data and user management data):</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> </li> <li> <p>Migrate the keystores from from EI 6.1.1 to EI 6.6.0.</p> </li> </ol> <p>Note</p> <p>These keystores are required when you perform data re-encryption later in this guide. </p> <pre><code>1. Move the keystore and truststore files by copying the `&lt;EI_6.1.1_HOME&gt;/repository/resources/security` directory to the same directory in EI 6.6.0.\n2. Open the `carbon.xml` file (stored in the `&lt;EI_6.6.0_HOME&gt;/conf/` directory) and update the details of the keystore used for data encryption.\n\n   &gt; Update the following configuration element:\n   &gt; \n   &gt; ```\n   &gt; &lt;KeyStore&gt;    \n   &gt;    &lt;Location&gt;${carbon.home}/resources/security/wso2carbon.jks&lt;/Location&gt;\n   &gt;    &lt;Type&gt;JKS&lt;/Type&gt;\n   &gt;    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n   &gt;    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n   &gt;    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n   &gt; &lt;/KeyStore&gt;    \n   &gt; ``` \n   &gt; ``` \n   &gt; &lt;TrustStore&gt;\n   &gt;    &lt;!-- trust-store file location --&gt;\n   &gt;    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;     &lt;!-- trust-store type (JKS/PKCS12 etc.) --&gt;\n   &gt;    &lt;Type&gt;JKS&lt;/Type&gt;\n   &gt;    &lt;!-- trust-store password --&gt;\n   &gt;    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n   &gt; &lt;/TrustStore&gt;\n   &gt; ``` \n   &gt; Add the following configuration element under `&lt;Security&gt;` in the `carbon.xml` file, and update the values:\n   &gt; \n   &gt; ```\n   &gt; &lt;CryptoService&gt;\n   &gt;    &lt;Enabled&gt;true&lt;/Enabled&gt;\n   &gt;    &lt;InternalCryptoProviderClassName&gt;org.wso2.carbon.crypto.provider. KeyStoreBasedInternalCryptoProvider&lt;/InternalCryptoProviderClassName&gt;\n   &gt;    &lt;ExternalCryptoProviderClassName&gt;org.wso2.carbon.core.encryption. KeyStoreBasedExternalCryptoProvider&lt;/ExternalCryptoProviderClassName&gt;\n   &gt;    &lt;KeyResolvers&gt;\n   &gt;    &lt;KeyResolver className=\"org.wso2.carbon.crypto.defaultProvider.resolver. ContextIndependentKeyResolver\" priority=\"-1\"/&gt;\n   &gt;    &lt;/KeyResolvers&gt;\n   &gt; &lt;/CryptoService&gt;\n   &gt; ```\n   &gt; ```\n   &gt; &lt;InternalKeyStore&gt;  \n   &gt;    &lt;Location&gt;${carbon.home}/repository/resources/security/internal.jks&lt;/Location&gt;\n   &gt;    &lt;Type&gt;JKS&lt;/Type&gt;\n   &gt;    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n   &gt;    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n   &gt;    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n   &gt; &lt;/InternalKeyStore&gt;\n   &gt; ```\n   &gt; \n   &gt; See [Configuring Keystores in WSO2 Products](https://wso2docs.atlassian.net/wiki/spaces/EI660/pages/6522317/Configuring+Keystores+in+WSO2+Products) for more information.\n</code></pre> <p>Step 3: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client re-encrypts plain text strings with OAEP and also changes any message processor data according to the new naming convention.</p> <ol> <li>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</li> <li> <p>Copy the <code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update the following properties:</p> admin.user.name The user name of the system administrator. keystore.identity.location The location of the keystore that is used for data encryption in the EI 6.6.0. By default, this is <code>&lt;EI_6.6.0_HOME&gt;/repository/resources/security/wso2carbon.jks</code>. keystore.identity.key.password The key password of the default keystore. By default, this is <code>wso2carbon</code>. </li> <li> <p>Get the migration JAR file which you received from WSO2 Support, and copy it to the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</p> </li> <li>Open a terminal and navigate to the <code>&lt;EI_6.6.0_HOME&gt;/bin/</code> directory.</li> <li>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei611</code> command as shown below.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command: <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei611\n</code></pre> On Windows</p> <p>Open a terminal and execute the following command: <pre><code>integrator.bat -Dmigrate.from.product.version=ei611\n</code></pre></p> <ol> <li>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar</code>) from the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Warning:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</li> <li>Verify that the keystores are migrated. See Configuring Keystores in WSO2 products.</li> </ol> <p>Note:</p> <p>If you successfully followed the instructions on upgrading the databases, the keystore configurations should already be migrated by now.</p> <ol> <li>If you have secondary user stores created for the ESB profile of EI 6.1.1, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> <li>If there are any third-party libraries used with EI 6.1.1 that you want to migrate, copy the relevant libraries from EI 6.1.1 to EI 6.6.0:<ul> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.1.1_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> <p>To migrate the configurations from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for EI 6.1.1 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the ESB profile.</li> </ol> <p>Note:</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the  jcifs-1.3.17.jar from here and then place it in <code>&lt;EI_6.6.0_HOME/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.1.1 to EI 6.6.0.</p> <p>Note:</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in EI 6.6.0.</li> <li> <p>To migrate connector artifacts:</p> <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.1.1. Note that this directory will not exist in your EI 6.1.1 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li> <p>To migrate the data service artifacts, copy the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in EI 6.6.0.</p> </li> <li>If you have custom artifacts created in the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/repository/tenants</code> directory to the same directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.1.1, the Analytics profile is based on WSO2 Data Analytics Server (WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on WSO2 Stream Processor (WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.1.1 to EI 6.6.0.</p> <p>WSO2 Data Analytics Server is the predecessor of WSO2 Stream Processor. Similar to WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime. </p> <p>In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.1.1 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.1.1.</p> <p>Warning:</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the <code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based  Analytics profile in EI 6.1.1, and then transfer the data that you have in EI 6.1.1.</p> <p>Follow the steps given below.</p> <ol> <li>Fork the wos2/product-ei repository.</li> <li>Then, download this repository from your fork.</li> </ol> <p>Info:</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>.</p> <ol> <li>In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</li> </ol> <pre><code>mvn clean install\n</code></pre> <p>A new JAR named <code>migEI.one-jar.jar</code> is now created inside the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory. The dependencies of this JAR are also created within the same directory.</p> <ol> <li>Copy the <code>migEIAnalytics.bat</code> and <code>migEIAnalytics.sh</code> files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory.</li> <li>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory and execute the Analytics migration script:</li> </ol> <p>On MacOS/Linux/CentOS</p> <pre><code>sh migEIAnalytics.sh\n</code></pre> <p>On Windows</p> <pre><code>migEIAnalytics.bat\n</code></pre> <ol> <li>As shown below, you must provide the database type.</li> </ol> <p>Note:</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>Database types... 1) MySQL 2) Oracle 3) PostgreSQL 4) MSSQL 5) Enter no. of your database type:</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> <ol> <li>To run the Analytics profile of EI 6.1.1, open the terminal, navigate to the <code>&lt;EI-6.1.1_HOME&gt;/wso2/analytics/bin</code> directory, and issue the following command.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>sh wso2server.sh</p> <p>On Windows</p> <p>wso2server.bat</p> <ol> <li>To migrate data related to the Analytics profile, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory and execute the migEIAnalyticsSpark.sql Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.1.1 Analytics profile, you need to add them in the EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li>To start the Analytics profile of EI 6.6.0, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>sh worker.sh </p> <p>On Windows</p> <p>worker.bat</p> <ol> <li>To view the migrated statistics, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command:</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>sh dashboard.sh </p> <p>On Windows</p> <p>dashboard.bat</p> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.1.1 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Note:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory EI 6.6.0.</li> <li>Copy the keystores and truststores used in the Message Broker profile of EI 6.1.1 from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.1.1, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/broker/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the  <code>master-datasources.xml</code>  file.</li> <li>Check for any further configurations that were done for the Message Broker profile in EI 6.1.1 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> <li>See the instructions on migrating log4j configurations for the Message Broker profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.1.1 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Info:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of EI 6.1.1 from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Business Process profile of EI 6.1.1, you need to copy the 'userstore' folder in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database:</li> <li>If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.</li> <li>If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.</li> </ol> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> <ol> <li>Open the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change GenerateDdl to false. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of EI 6.1.1 based on your solution. For example, check and update the following configurations in EI 6.6.0:</li> <li><code>humantask.xml</code></li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code></li> <li><code>Activiti.xml</code></li> <li><code>Tenant-mgt.xml</code></li> <li><code>b4p-coordination-config.xml</code></li> <li><code>process-cleanup.properties</code></li> <li>Check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the Business Process profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>Note:</p> <p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.1.1) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.1.1, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt; \n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt; \n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <p> org.ops4j.pax.logging pax-logging-log4j2 ${pax.logging.log4j2.version} </p> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging; \nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/","title":"Upgrading from WSO2 EI 6.2.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.2.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <ul> <li>ESB\u00a0profile</li> <li>Message Broker\u00a0profile</li> <li>Business Process\u00a0profile</li> <li>Analytics\u00a0profile</li> </ul> <p>See the following topics for details:</p> <ul> <li>Upgrading from WSO2 EI 6.2.0</li> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases</li> <li>Update the database structure\u00a0</li> <li>Update the data</li> <li>Migrating configurations of the ESB profile</li> <li>Updating the configuration files manually</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the\u00a0databases\u00a0in your WSO2 EI 6.2.0 instance.</li> <li>Copy the\u00a0<code>&lt;EI_6.2.0_HOME&gt;</code>\u00a0directory to back up the product configurations.</li> <li>Go to the\u00a0WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.2.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same\u00a0 databases \u00a0that you used for the ESB profile of EI 6.2.0 with EI 6.6.0.\u00a0However, you need to apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks\u00a0that were stored in the registry database by EI 6.2.0.</p> <p>Info</p> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>taskNumber</code> (in EI 6.2.0) to <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>SYMBOL_UNDERSCORE</code> + <code>taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.2.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases\u00a0(which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the\u00a0<code>master-datasources.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code>\u00a0directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the\u00a0<code>master-datasources.xml</code>\u00a0file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the\u00a0<code>registry.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory) and specify the datasource name (as defined in step \\'a\\').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the\u00a0<code>user-mgt.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/</code>\u00a0directory), and update the following database connection parameters under the\u00a0<code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code>\u00a0section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the\u00a0system administrator configurations\u00a0and the\u00a0datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li> <p>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</p> </li> <li> <p>Copy the\u00a0<code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update\u00a0the following properties.</p> <p>admin.user.name   The user name of the system administrator.</p> <p>Note that you do not need to update the keystore-related properties given in the file.</p> </li> <li> <p>Copy the migration JAR file, which you received from WSO2 Support, into the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> <li> <p>Open a terminal and navigate to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/bin/</code>\u00a0directory.</p> </li> <li> <p>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei620</code> command as shown below.</p> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command:</p> <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei620\n</code></pre> <p>On Windows</p> <p>Open a terminal and execute the following command:</p> <pre><code>integrator.bat -Dmigrate.from.product.version=ei620\n</code></pre> </li> <li> <p>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar)</code>\u00a0from the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in     the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.2.0.\u00a0</p> </li> <li> <p>If you have secondary user stores created for the ESB profile of EI 6.2.0, you need to copy the \\'userstore\\' folder in     the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If there are any third-party libraries used with EI 6.2.0 that you want to migrate, copy the relevant libraries from EI 6.2.0 to EI 6.6.0:</p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc.,\u00a0copy the contents from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code> directory to the same     directory in EI 6.6.0.</li> <li>If\u00a0you have used OSGi bundles such as SVN kit etc., copy the contents from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> Updating the configuration files manually <p>To migrate the configurations from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in     the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available in.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory and update the\u00a0datasource\u00a0references in the\u00a0<code>user-mgt.xml</code>\u00a0and\u00a0<code>registry.xml</code>\u00a0files to match the updated configurations in the\u00a0<code>master-datasources.xml</code>\u00a0file. The instructions are available in.</p> </li> <li> <p>Check for any other configurations that were done for EI 6.2.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations configurations of the Message Broker profile) for the ESB profile.</p> </li> </ol> <p>Info</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the \u00a0jcifs-1.3.17.jar from here\u00a0and then place it in <code>&lt;EI_6.6.0_HOME&gt;/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in\u00a0this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.2.0 to EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:\u00a0 <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.2.0. Note that this directory will not exist in your EI 6.2.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/dataservices</code>     directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/tenants</code>\u00a0directory to the same     directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.2.0, the Analytics profile is based on\u00a0WSO2 Data Analytics Server\u00a0(WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on\u00a0WSO2 Stream Processor\u00a0(WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.2.0 to EI 6.6.0.</p> <p>Info</p> <p>WSO2 Data Analytics Server is the\u00a0predecessor of WSO2 Stream Processor. Similar to\u00a0WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime.</p> <p>In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.2.0 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.2.0.</p> <p>Warning</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based\u00a0 Analytics profile in EI 6.2.0, and then transfer the data that you have in EI 6.2.0.</p> <p>Follow the steps given below.</p> <ol> <li> <p>Fork the     wos2/product-ei repository.</p> </li> <li> <p>Then, download this repository from your fork.</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>.</p> </li> <li> <p>In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</p> <p>mvn clean install</p> <p>A new JAR named\u00a0<code>migEI.one-jar.jar</code> is now created inside the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory. The dependencies of this JAR are also created within the same directory.</p> </li> <li> <p>Copy the\u00a0<code>migEIAnalytics.bat</code>\u00a0and\u00a0<code>migEIAnalytics.sh</code>\u00a0files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory.</p> </li> <li> <p>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory and execute the Analytics migration\u00a0script:</p> <p>On MacOS/Linux/CentOS <pre><code>sh migEIAnalytics.sh\n</code></pre> On Windows <pre><code>migEIAnalytics.bat\n</code></pre></p> </li> <li> <p>As shown below, you must provide the database type.</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> </li> <li> <p>To run the Analytics profile of EI 6.2.0, open the terminal, navigate to the\u00a0<code>&lt;EI-6.2.0_HOME&gt;/wso2/analytics/bin</code> directory, and     issue the following command.</p> <p>On MacOS/Linux/CentOS sh wso2server.sh On Windows wso2server.bat</p> </li> <li> <p>To migrate data related to the Analytics profile, navigate to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory and execute the\u00a0<code>migEIAnalyticsSpark.sql</code> Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.2.0 Analytics profile, you need to add them in the\u00a0EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li> <p>To start the Analytics profile of EI 6.6.0, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the     following command.</p> <p>On MacOS/Linux/CentOS <pre><code>sh worker.sh\n</code></pre></p> <p>On Windows <pre><code>worker.bat\n</code></pre></p> </li> <li> <p>To view the migrated statistics, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the following command:</p> <p>On MacOS/Linux/CentOS <pre><code>sh dashboard.sh\n</code></pre> On Windows <pre><code>dashboard.bat\n</code></pre></p> </li> </ol> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.2.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.2.0 to EI 6.6.0:</p> <ol> <li>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code>directory to the same directory EI 6.6.0.</li> <li>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Message Broker profile of EI 6.2.0 from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/broker/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.2.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/broker/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For instructions, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available     in.</p> </li> <li> <p>Update the configurations related to the broker-specific database in the\u00a0<code>master-datasources.xml</code>\u00a0file and other related configurations files. See\u00a0Changing the Default Broker for instructions.</p> </li> <li> <p>Go to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the\u00a0datasource\u00a0references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in EI 6.2.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</p> <ol> <li> <p><code>broker.xml</code></p> </li> <li> <p><code>metrics.xml</code></p> </li> <li> <p><code>metrics-properties.xml</code></p> </li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check configurations related to external user stores, caching,     mounting, transports etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations for the Message Broker profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/broker/repository/tenants</code>\u00a0directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.2.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code>\u00a0directory to the same directory in EI     6.6.0.\u00a0For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</p> </li> <li> <p>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Business Process profile of EI 6.2.0 from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have secondary user stores created for the Business Process profile of EI 6.2.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> </ol> <p>updating_configs_bp To migrate the configurations from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For more information, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the Carbon\u00a0datasource configuration in the\u00a0<code>master-datasources.xml</code> file. The instructions are available in.</p> </li> <li> <p>Go\u00a0to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory\u00a0and update the\u00a0datasource references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files\u00a0to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the files relevant to your BPMN/BPEL database:\u00a0</p> <ul> <li>If you are using BPMN, update the\u00a0<code>activiti-datasources.xml</code>\u00a0file with the datasource connection details.</li> <li>If you are using BPEL, update the\u00a0<code>bps-datasources.xml</code>\u00a0file with the datasource connection details.</li> </ul> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> </li> <li> <p>Open the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code>\u00a0file and change\u00a0<code>GenerateDdl</code>\u00a0to\u00a0<code>false</code>.\u00a0You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</p> <pre><code>&lt;GenerateDdl\\&gt;false&lt;/GenerateDdl\\&gt;\n</code></pre> </li> <li> <p>Check for any further configurations that were done for the Business Process profile of EI 6.2.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</p> <ol> <li> <p><code>humantask.xml</code></p> </li> <li> <p><code>axis2.xml</code></p> </li> <li> <p><code>bps.xml</code></p> </li> <li> <p><code>Activiti.xml</code></p> </li> <li> <p><code>Tenant-mgt.xml</code></p> </li> <li> <p><code>b4p-coordination-config.xml</code></p> </li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores,     caching, mounting, transports, etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations\u00a0for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages\u00a0in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code>\u00a0directory     to the same directory in EI 6.6.0.<code></code></p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory,     copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/tenants</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces\u00a0log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.2.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.2.0, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or\u00a0 <code>commons.logging</code> dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</p> </li> <li> <p>If\u00a0<code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> </ol> </li> <li> <p>Follow the instructions on configuring log4j2 \u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see\u00a0Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/","title":"Upgrading from WSO2 EI 6.3.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.3.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <ul> <li>ESB\u00a0profile</li> <li>Message Broker\u00a0profile</li> <li>Business Process\u00a0profile</li> <li>Analytics\u00a0profile</li> </ul> <p>See the following topics for details:</p> <ul> <li>Upgrading from WSO2 EI 6.3.0</li> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases</li> <li>Update the database structure\u00a0</li> <li>Update the data</li> <li>Migrating configurations of the ESB profile</li> <li>Updating the configuration files manually</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the\u00a0databases\u00a0in your WSO2 EI 6.3.0 instance.</li> <li>Copy the\u00a0<code>&lt;EI_6.3.0_HOME&gt;</code>\u00a0directory to back up the product     configurations.</li> <li>Go to the\u00a0WSO2 Integration website     and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.3.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same\u00a0 databases \u00a0that you used for the ESB profile of EI 6.3.0 with EI 6.6.0.\u00a0However, you need to apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and s elect the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks\u00a0that were stored in the registry database by EI 6.3.0.</p> <p>Info</p> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>taskNumber</code> (in EI 6.3.0) to <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>SYMBOL_UNDERSCORE</code> + <code>taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.3.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases\u00a0(which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the\u00a0<code>master-datasources.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code>\u00a0directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the\u00a0<code>master-datasources.xml</code>\u00a0file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the\u00a0<code>registry.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory) and specify the datasource name (as defined in step \\'a\\').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the\u00a0<code>user-mgt.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/</code>\u00a0directory), and update the following database connection parameters under the\u00a0<code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code>\u00a0section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the\u00a0system administrator configurations\u00a0and the\u00a0datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li> <p>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</p> </li> <li> <p>Copy the\u00a0<code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update\u00a0the following properties.</p> <p>admin.user.name   The user name of the system administrator.</p> <p>Note that you do not need to update the keystore-related properties given in the file.</p> </li> <li> <p>Copy the migration JAR file, which you received from WSO2 Support, into the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> <li> <p>Open a terminal and navigate to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/bin/</code>\u00a0directory.</p> </li> <li> <p>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei630</code> command as shown below.</p> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command:</p> <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei630\n</code></pre> <p>On Windows</p> <p>Open a terminal and execute the following command:</p> <pre><code>integrator.bat -Dmigrate.from.product.version=ei630\n</code></pre> </li> <li> <p>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar)</code>\u00a0from the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in     the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.3.0.\u00a0</p> </li> <li> <p>If you have secondary user stores created for the ESB profile of EI 6.3.0, you need to copy the \\'userstore\\' folder in     the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If there are any third-party libraries used with EI 6.3.0 that you want to migrate, copy the relevant libraries from EI 6.3.0 to EI 6.6.0:</p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc.,\u00a0copy the contents from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code> directory to the same     directory in EI 6.6.0.</li> <li>If\u00a0you have used OSGi bundles such as SVN kit etc., copy the contents from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> Updating the configuration files manually <p>To migrate the configurations from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in     the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available in.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory and update the\u00a0datasource\u00a0references in the\u00a0<code>user-mgt.xml</code>\u00a0and\u00a0<code>registry.xml</code>\u00a0files to match the updated configurations in the\u00a0<code>master-datasources.xml</code>\u00a0file. The instructions are available in.</p> </li> <li> <p>Check for any other configurations that were done for EI 6.3.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations configurations of the Message Broker profile) for the ESB profile.</p> </li> </ol> <p>Info</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the \u00a0jcifs-1.3.17.jar from here\u00a0and then place it in <code>&lt;EI_6.6.0_HOME&gt;/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in\u00a0this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.3.0 to EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:\u00a0 <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.3.0. Note that this directory will not exist in your EI 6.3.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/dataservices</code>     directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/tenants</code>\u00a0directory to the same     directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.3.0, the Analytics profile is based on\u00a0WSO2 Data Analytics Server\u00a0(WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on\u00a0WSO2 Stream Processor\u00a0(WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.3.0 to EI 6.6.0.</p> <p>Info</p> <p>WSO2 Data Analytics Server is the\u00a0predecessor of WSO2 Stream Processor. Similar to\u00a0WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime.</p> <p>In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.3.0 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.3.0.</p> <p>Warning</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based\u00a0 Analytics profile in EI 6.3.0, and then transfer the data that you have in EI 6.3.0.</p> <p>Follow the steps given below.</p> <ol> <li> <p>Fork the     wos2/product-ei repository.</p> </li> <li> <p>Then, download this repository from your fork.</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>.</p> </li> <li> <p>In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</p> <p>mvn clean install</p> <p>A new JAR named\u00a0<code>migEI.one-jar.jar</code> is now created inside the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory. The dependencies of this JAR are also created within the same directory.</p> </li> <li> <p>Copy the\u00a0<code>migEIAnalytics.bat</code>\u00a0and\u00a0<code>migEIAnalytics.sh</code>\u00a0files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory.</p> </li> <li> <p>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory and execute the Analytics migration\u00a0script:</p> <p>On MacOS/Linux/CentOS <pre><code>sh migEIAnalytics.sh\n</code></pre> On Windows <pre><code>migEIAnalytics.bat\n</code></pre></p> </li> <li> <p>As shown below, you must provide the database type.</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> </li> <li> <p>To run the Analytics profile of EI 6.3.0, open the terminal, navigate to the\u00a0<code>&lt;EI-6.3.0_HOME&gt;/wso2/analytics/bin</code> directory, and     issue the following command.</p> <p>On MacOS/Linux/CentOS sh wso2server.sh On Windows wso2server.bat</p> </li> <li> <p>To migrate data related to the Analytics profile, navigate to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory and execute the\u00a0<code>migEIAnalyticsSpark.sql</code> Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.3.0 Analytics profile, you need to add them in the\u00a0EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li> <p>To start the Analytics profile of EI 6.6.0, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the     following command.</p> <p>On MacOS/Linux/CentOS <pre><code>sh worker.sh\n</code></pre></p> <p>On Windows <pre><code>worker.bat\n</code></pre></p> </li> <li> <p>To view the migrated statistics, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the following command:</p> <p>On MacOS/Linux/CentOS <pre><code>sh dashboard.sh\n</code></pre> On Windows <pre><code>dashboard.bat\n</code></pre></p> </li> </ol> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.3.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.3.0 to EI 6.6.0:</p> <ol> <li>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code>directory to the same directory EI 6.6.0.</li> <li>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Message Broker profile of EI 6.3.0 from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/broker/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.3.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/broker/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For instructions, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available     in.</p> </li> <li> <p>Update the configurations related to the broker-specific database in the\u00a0<code>master-datasources.xml</code>\u00a0file and other related configurations files. See\u00a0Changing the Default Broker for instructions.</p> </li> <li> <p>Go to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the\u00a0datasource\u00a0references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in EI 6.3.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</p> <ol> <li> <p><code>broker.xml</code></p> </li> <li> <p><code>metrics.xml</code></p> </li> <li> <p><code>metrics-properties.xml</code></p> </li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check configurations related to external user stores, caching,     mounting, transports etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations for the Message Broker profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/broker/repository/tenants</code>\u00a0directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.3.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code>\u00a0directory to the same directory in EI     6.6.0.\u00a0For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</p> </li> <li> <p>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Business Process profile of EI 6.3.0 from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have secondary user stores created for the Business Process profile of EI 6.3.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> </ol> <p>updating_configs_bp To migrate the configurations from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For more information, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the Carbon\u00a0datasource configuration in the\u00a0<code>master-datasources.xml</code> file. The instructions are available in.</p> </li> <li> <p>Go\u00a0to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory\u00a0and update the\u00a0datasource references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files\u00a0to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the files relevant to your BPMN/BPEL database:\u00a0</p> <ul> <li>If you are using BPMN, update the\u00a0<code>activiti-datasources.xml</code>\u00a0file with the datasource connection details.</li> <li>If you are using BPEL, update the\u00a0<code>bps-datasources.xml</code>\u00a0file with the datasource connection details.</li> </ul> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> </li> <li> <p>Open the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code>\u00a0file and change\u00a0<code>GenerateDdl</code>\u00a0to\u00a0<code>false</code>.\u00a0You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</p> <pre><code>&lt;GenerateDdl\\&gt;false&lt;/GenerateDdl\\&gt;\n</code></pre> </li> <li> <p>Check for any further configurations that were done for the Business Process profile of EI 6.3.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</p> <ol> <li> <p><code>humantask.xml</code></p> </li> <li> <p><code>axis2.xml</code></p> </li> <li> <p><code>bps.xml</code></p> </li> <li> <p><code>Activiti.xml</code></p> </li> <li> <p><code>Tenant-mgt.xml</code></p> </li> <li> <p><code>b4p-coordination-config.xml</code></p> </li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores,     caching, mounting, transports, etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations\u00a0for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages\u00a0in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code>\u00a0directory     to the same directory in EI 6.6.0.<code></code></p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory,     copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/tenants</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces\u00a0log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.3.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.3.0, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or\u00a0 <code>commons.logging</code> dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</p> </li> <li> <p>If\u00a0<code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> </ol> </li> <li> <p>Follow the instructions on configuring log4j2 \u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see\u00a0Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/","title":"Upgrading from WSO2 EI 6.4.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.4.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <ul> <li>ESB\u00a0profile</li> <li>Message Broker\u00a0profile</li> <li>Business Process\u00a0profile</li> <li>Analytics\u00a0profile</li> </ul> <p>See the following topics for details:</p> <ul> <li>Upgrading from WSO2 EI 6.4.0</li> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases</li> <li>Update the database structure\u00a0</li> <li>Update the data</li> <li>Migrating configurations of the ESB profile</li> <li>Updating the configuration files manually</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile</li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the\u00a0databases\u00a0in your WSO2 EI 6.4.0 instance.</li> <li>Copy the\u00a0<code>&lt;EI_6.4.0_HOME&gt;</code>\u00a0directory to back up the product configurations.</li> <li>Go to the\u00a0WSO2 Integration website     and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.4.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same\u00a0 databases \u00a0that you used for the ESB profile of EI 6.4.0 with EI 6.6.0.\u00a0However, you need to apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and s elect the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks\u00a0that were stored in the registry database by EI 6.4.0.</p> <p>Info</p> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>taskNumber</code> (in EI 6.4.0) to <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>SYMBOL_UNDERSCORE</code> + <code>taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.4.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases\u00a0(which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the\u00a0<code>master-datasources.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code>\u00a0directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the\u00a0<code>master-datasources.xml</code>\u00a0file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the\u00a0<code>registry.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory) and specify the datasource name (as defined in step \\'a\\').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the\u00a0<code>user-mgt.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/</code>\u00a0directory), and update the following database connection parameters under the\u00a0<code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code>\u00a0section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the\u00a0system administrator configurations\u00a0and the\u00a0datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li> <p>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</p> </li> <li> <p>Copy the\u00a0<code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update\u00a0the following properties.</p> <p>admin.user.name   The user name of the system administrator.</p> <p>Note that you do not need to update the keystore-related properties given in the file.</p> </li> <li> <p>Copy the migration JAR file, which you received from WSO2 Support, into the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> <li> <p>Open a terminal and navigate to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/bin/</code>\u00a0directory.</p> </li> <li> <p>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei640</code> command as shown below.</p> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command:</p> <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei640\n</code></pre> <p>On Windows</p> <p>Open a terminal and execute the following command:</p> <pre><code>integrator.bat -Dmigrate.from.product.version=ei640\n</code></pre> </li> <li> <p>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar)</code>\u00a0from the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in     the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.4.0.\u00a0</p> </li> <li> <p>If you have secondary user stores created for the ESB profile of EI 6.4.0, you need to copy the \\'userstore\\' folder in     the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If there are any third-party libraries used with EI 6.4.0 that you want to migrate, copy the relevant libraries from EI 6.4.0 to EI 6.6.0:</p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc.,\u00a0copy the contents from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same     directory in EI 6.6.0.</li> <li>If\u00a0you have used OSGi bundles such as SVN kit etc., copy the contents from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> Updating the configuration files manually <p>To migrate the configurations from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in     the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available in.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory and update the\u00a0datasource\u00a0references in the\u00a0<code>user-mgt.xml</code>\u00a0and\u00a0<code>registry.xml</code>\u00a0files to match the updated configurations in the\u00a0<code>master-datasources.xml</code>\u00a0file. The instructions are available in.</p> </li> <li> <p>Check for any other configurations that were done for EI 6.4.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations configurations of the Message Broker profile) for the ESB profile.</p> </li> </ol> <p>Info</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the \u00a0jcifs-1.3.17.jar from here\u00a0and then place it in <code>&lt;EI_6.6.0_HOME&gt;/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in\u00a0this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.4.0 to EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:\u00a0 <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.4.0. Note that this directory will not exist in your EI 6.4.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/dataservices</code>     directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/tenants</code>\u00a0directory to the same     directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#analytics-profile","title":"Analytics profile","text":"<p>If you have configured EI 6.4.0 to publish ESB data to the Analytics profile, you need to enable the same in EI 6.4.0. To do this, follow the instructions in Publishing ESB Data to Analytics.</p> <p>Note</p> <p>Note that from EI 6.6.0 onwards, you need to configure the <code>&lt;EI_6.6.0_HOME&gt;/conf/carbon.xml</code> file to enable the ESB server to publish statistics to the Analytics profile, whereas in the EI 6.4.0 and older versions you need to configure the <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code> and <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code> files instead.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.4.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.4.0 to EI 6.6.0:</p> <ol> <li>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code>directory to the same directory EI 6.6.0.</li> <li>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Message Broker profile of EI 6.4.0 from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.4.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For instructions, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available     in.</p> </li> <li> <p>Update the configurations related to the broker-specific database in the\u00a0<code>master-datasources.xml</code>\u00a0file and other related configurations files. See\u00a0Changing the Default Broker for instructions.</p> </li> <li> <p>Go to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the\u00a0datasource\u00a0references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in EI 6.4.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</p> <ol> <li> <p><code>broker.xml</code></p> </li> <li> <p><code>metrics.xml</code></p> </li> <li> <p><code>metrics-properties.xml</code></p> </li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check configurations related to external user stores, caching,     mounting, transports etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations for the Message Broker profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/tenants</code>\u00a0directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.4.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code>\u00a0directory to the same directory in EI     6.6.0.\u00a0For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</p> </li> <li> <p>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Business Process profile of EI 6.4.0 from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have secondary user stores created for the Business Process profile of EI 6.4.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> </ol> <p>updating_configs_bp To migrate the configurations from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For more information, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the Carbon\u00a0datasource configuration in the\u00a0<code>master-datasources.xml</code> file. The instructions are available in.</p> </li> <li> <p>Go\u00a0to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory\u00a0and update the\u00a0datasource references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files\u00a0to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the files relevant to your BPMN/BPEL database:\u00a0</p> <ul> <li>If you are using BPMN, update the\u00a0<code>activiti-datasources.xml</code>\u00a0file with the datasource connection details.</li> <li>If you are using BPEL, update the\u00a0<code>bps-datasources.xml</code>\u00a0file with the datasource connection details.</li> </ul> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> </li> <li> <p>Open the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code>\u00a0file and change\u00a0<code>GenerateDdl</code>\u00a0to\u00a0<code>false</code>.\u00a0You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</p> <pre><code>&lt;GenerateDdl\\&gt;false&lt;/GenerateDdl\\&gt;\n</code></pre> </li> <li> <p>Check for any further configurations that were done for the Business Process profile of EI 6.4.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</p> <ol> <li> <p><code>humantask.xml</code></p> </li> <li> <p><code>axis2.xml</code></p> </li> <li> <p><code>bps.xml</code></p> </li> <li> <p><code>Activiti.xml</code></p> </li> <li> <p><code>Tenant-mgt.xml</code></p> </li> <li> <p><code>b4p-coordination-config.xml</code></p> </li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores,     caching, mounting, transports, etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations\u00a0for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages\u00a0in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code>\u00a0directory     to the same directory in EI 6.6.0.<code></code></p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory,     copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/tenants</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces\u00a0log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.4.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.4.0, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or\u00a0 <code>commons.logging</code> dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</p> </li> <li> <p>If\u00a0<code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> </ol> </li> <li> <p>Follow the instructions on configuring log4j2 \u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see\u00a0Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/","title":"Upgrading from WSO2 EI 6.5.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.6.0 from WSO2 EI 6.5.0. This will cover the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile</li> <li>Business Process profile</li> <li>Analytics profile</li> </ul> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release. </li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <p>See the following topics for details:</p> <ul> <li>Preparing to upgrade </li> <li>ESB profile</li> <li>Upgrading the databases<ul> <li>Update the database structure </li> <li>Update the data</li> </ul> </li> <li>Migrating configurations of the ESB profile</li> <li>Migrating artifacts of the ESB profile</li> <li>Analytics profile</li> <li>Message Broker profile</li> <li>Migrating configurations of the Message Broker profile </li> <li>Migrating artifacts of the Message Broker profile</li> <li>Business Process profile</li> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.5.0 instance.</li> <li>Copy the <code>&lt;EI_6.5.0_HOME&gt;</code> directory to back up the product configurations.</li> <li>Go to the WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for the ESB profile of WSO2 EI 6.5.0 with WSO2 EI 6.6.0. However, you need to first apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks that were stored in the registry database by WSO2 EI 6.5.0.</p> <p>Info</p> <p>WSO2 EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX + messageProcessorName + taskNumber</code> (in WSO2 EI 6.5.0) to <code>TASK_PREFIX + messageProcessorName + SYMBOL_UNDERSCORE + taskNumber</code> (in WSO2 EI 6.6.0). </p> <p>When you run the following migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.5.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases (which are used for registry data and user management data):</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</li> <li>Copy the <code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update the following properties:</li> </ol> admin.user.name The user name of the system administrator. <p>Note </p> <p>You do not need to update the keystore-related properties given in the file.</p> <ol> <li>Copy the migration JAR file, which you received from WSO2 Support, into the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> <li>Open a terminal and navigate to the <code>&lt;EI_6.6.0_HOME&gt;/bin/</code> directory.</li> <li>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei650</code> command as shown below.</li> </ol> <p>On MacOS/Linux/CentOS Open a terminal and execute the following command:     <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei650\n</code></pre></p> <p>On Windows Open a terminal and execute the following command:     <pre><code>integrator.bat -Dmigrate.from.product.version=ei650\n</code></pre></p> <ol> <li>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar</code>) from the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.5.0_HOME&gt;/lib</code>  directory to the same directory in WSO2 EI 6.6.0.</li> <li>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the <code>&lt;EI_6.5.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for the ESB profile of WSO2 EI 6.5.0, you need to copy the 'userstore' folder in the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If there are any third-party libraries used with WSO2 EI 6.5.0 that you want to migrate, copy the relevant libraries from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</li> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.5.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.5.0_HOME&gt;/dropins</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ol> Updating the configuration files manually <p>To migrate the configurations from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for WSO2 EI 6.5.0 based on your solution, and update the configuration files in WSO2 EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the ESB profile.</li> </ol> <p>Info:</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the <code>jcifs-1.3.17.jar</code> from here and then place it in <code>&lt;EI_6.6.0_HOME/lib&gt;</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>To migrate connector artifacts:<ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of WSO2 EI 6.6.0, and copy the JARs from the directory by the same name in WSO2 EI 6.5.0. Note that this directory will not exist in your WSO2 EI 6.5.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#analytics-profile","title":"Analytics profile","text":"<p>If you have configured EI 6.5.0 to publish ESB data to the Analytics profile, you need to enable the same in EI 6.6.0. To do this, follow the instructions in Publishing ESB Data to Analytics.</p> <p>Note:</p> <p>From EI 6.6.0 onwards, you need to configure the <code>&lt;EI_HOME&gt;/conf/carbon.xml</code> file to enable the ESB server to publish statistics to the Analytics profile, whereas in the EI 6.5.0 and older versions you need to configure the <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code> and <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code> files instead.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.5.0_HOME&gt;/lib</code>  directory to the same directory WSO2 EI 6.6.0.</li> <li>Copy the keystores and truststores used in the Message Broker profile of WSO2 EI 6.5.0 from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of WSO2 EI 6.5.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/broker/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ol> <p>To migrate the configurations from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. See Changing the Carbon Database for instructions.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Carbon Database for instructions.</li> <li> <p>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in WSO2 EI 6.5.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of WSO2 EI 6.6.0:</p> </li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> <li>See the instructions on migrating log4j configurations for the Message Broker profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.5.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.6.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of WSO2 EI 6.5.0 from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/resources/security</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for the Business Process profile of WSO2 EI 6.5.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ol> <p>To migrate the configurations from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database:</li> <li>If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.</li> <li>If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.</li> </ol> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> <ol> <li>Open the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change <code>GenerateDdl</code> to <code>false</code>. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of WSO2 EI 6.5.0 based on your solution. For example, check and update the following configurations in WSO2 EI 6.6.0:<ol> <li><code>humantask.xml</code></li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code> </li> <li><code>Activiti.xml</code> </li> <li><code>Tenant-mgt.xml</code> </li> <li><code>b4p-coordination-config.xml</code> </li> <li><code>process-cleanup.properties</code></li> </ol> </li> <li> <p>Check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>Note:</p> <p>All profiles of WSO2 EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>WSO2 EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in WSO2 EI 6.5.0) to log4j2 (in WSO2 EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.5.0, apply the following changes to your component:</p> <ol> <li>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</li> </ol> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n    &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n    &lt;version&gt;${pax.logging.api.version}&lt;/version&gt; \n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt; \n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> <ol> <li>If log4j dependency is directly used, apply one of the options given below.</li> </ol> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt; \n    &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n    &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n    &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt; \n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> <ol> <li>If commons.logging is imported using Import-Package add the version range.</li> </ol> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the WSO2 EI 6.6.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/","title":"Migrating from WSO2 EI 6.x to WSO2 EI 7.0","text":"<p>This guide provides an overview of the recommended migration strategy for migrating from WSO2 EI 6.x to WSO2 EI 7.0. Note that these guidelines are only applicable when you are migrating the ESB profile of EI 6.x to the Micro Integrator in EI 7.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#before-you-begin","title":"Before you begin","text":"<p>See the following topics to understand the benefits of moving to EI 7.0 from EI 6.x:</p> <ul> <li>Comparison: EI 6.x vs EI 7.0</li> <li>Advantages of using the Micro Integrator in EI 7.0</li> <li>Comparison: ESB profile of EI 6.x vs Micro Integrator of EI 7.0</li> <li>Features removed from the Micro Integrator of EI 7.0</li> </ul> <p>Note that EI 7 is a WUM-only release, which means that manual patches are not allowed. You can use WSO2 Update Manager(WUM) to get the latest fixes or updates for this release.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#why-migrate-to-ei-70","title":"Why migrate to EI 7.0?","text":"<p>If you are an EI 6.x user, migration is recommended for the following requirements:</p> <ul> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, container-friendly runtime.</li> <li>You need native support for Kubernetes.</li> </ul> <p>The decision on migration to the new platform needs to be taken by considering several factors including the preferred architectural style (centralized vs microservices), deployment environment in your organization, and the effort it takes to migrate existing integration configurations.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Both the ESB profile of EI 6.x and the Micro Integrator of EI 7.0 uses the same ESB runtime and the same developer tool (WSO2 Integration Studio) for developing integrations. Most of the mediation(ESB) and data integration features available in the ESB profile of EI 6.x are available in the Micro Integrator as well. Some of the features are removed from WSO2 Micro Integrator as they are not needed for microservice deployments or they are not frequently used.</p> <p>In summary, all the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes. However, EI 7.0 introduces a Toml-based configuration strategy to replace XML configurations, which simplifies your product configurations.</p> <p>See the detailed comparison of EI 6.5 and EI 7.0 to understand what has changed between the ESB profile of EI 6.x.x and the Micro Integrator of EI 7.0.</p> <p>Follow the instructions below to start the migration!</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the existing database used by the current EI 6.x.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li>Download and install EI 7.0 in your environment. The home directory of your installation will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.<ul> <li>On a VM</li> <li>On Docker</li> <li>On Kubernetes</li> </ul> </li> <li> <p>You can use WSO2 Update Manager to get the latest available updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-databases","title":"Migrating databases","text":"<p>If you are already using a JDBC user store with EI 6.x.x, you can connect the same database to the Micro Integrator of EI 7 by simply updating the user store configurations in the Micro Integrator.</p> <p>Note</p> <p>You cannot manage users and roles when you use a JDBC user store with the Micro Integrator. Therefore, be sure that your database is already up-to-date before connecting it to the Micro Integrator. Alternatively, you can shift to an LDAP user store. Read more about user stores in the Micro Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file based registry instead of a database (which is used in EI 6.x.x). Note the following when migrating the registry:</p> <ul> <li>If the artifacts in EI 6.x.x are added in carbon applications developed using WSO2 Integration Studio, you can directly migrate the artifacts to the Micro Integrator of EI 7.</li> <li>If the artifacts are added through the management console in EI 6.x.x, first download the artifacts from the management console, and then add to the <code>&lt;MI_HOME&gt;/registry/</code> folder by maintaining the same resource structure.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside <code>&lt;EI_6.x.x_HOME&gt;/repository/deployment</code> to the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_6.x.x_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;OLD_EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files in the <code>&lt;EI_6.x.x_HOME&gt;/repository/resources/security</code> directory to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>WSO2 EI 6.x.x versions supported multiple configuration files such as carbon.xml, synapse.properties, and axis2.xml. With the new configuration model in the Micro Integrator of EI 7, product configurations are primarily handled by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory). The log4j2 configurations are handled in the <code>log4j2.properties</code>.</p> <p>Migrating to TOML configurations</p> <p>See the product configuration catalog for the complete list of configurations that are available for the Micro Integrator.</p> <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to reach WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Migrating Log4j configurations</p> <p>Older versions of the WSO2 EI 6.x.x family (EI 6.5.0 and earlier) use log4j. In  WSO2 EI 7 Micro Integrator, the <code>carbon.logging.jar</code> file is not packed and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>Therefore, you need to follow the instructions given below to migrate from log4j (in EI 6.5.0 or earlier version) to log4j2 (in EI 7 Micro Integrator).</p> <p>If you have used a custom log4j component in you you older EI version, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> </li> <li> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging; \nversion=\"${commons.logging.version.range}\"\n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2\u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/","title":"Upgrade WSO2 Enterprise Integrator","text":"<p>This document walks you through the process of upgrading WSO2 Enterprise Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/#why-upgrade","title":"Why upgrade?","text":"<p>There are multiple reasons why you would want to upgrade the WSO2 product to the latest version. These reasons include but are not limited to the following.</p> <ul> <li>The current product version you are using is reaching its end of life. To see if this is the case, view the support matrix documentation.</li> <li>You want to leverage the new features of the latest version of the product.</li> <li>The version of the product you have does not have certain security and bug fixes that you require.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/#what-has-changed","title":"What has changed","text":"<p>Over the course of its lifetime, WSO2 Enterprise Integrator has changed significantly and some of the features you were using in an older version may not work the same way.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/#get-started","title":"Get started","text":"<p>To make sure that the upgrade process is smooth and you have the best experience, WSO2 recommends that you reach out to WSO2 Support in order to upgrade WSO2 Enterprise Integrator with minimal difficulty.</p> <p>If you are ready to start the migration process, follow the instructions given below.</p> <p>If you already have a WSO2 subscription, create a support ticket with your migration requirements and one of our support engineers will get in touch with you.</p> <ul> <li>Create a ticket</li> </ul> <p>If you are not a WSO2 customer and still need migration assistance and resources, please contact us through the following link. One of our Account Managers will get in touch with you to help.</p> <ul> <li>Contact us</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/","title":"Migrating from WSO2 EI 6.x to WSO2 EI 7.1","text":"<p>This guide provides the recommended strategy for migrating from the ESB profile of WSO2 EI 6.x to the Micro Integrator of WSO2 EI 7.1.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#why-migrate-to-ei-71","title":"Why migrate to EI 7.1?","text":"<p>Listed below are some of the advantages of moving to EI 7.1 from the ESB.</p> <ul> <li> <p>The Micro Integrator of EI 7.1 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, as well as the Micro Integrator of WSO2 EI 7.x contains versions of the same WSO2 ESB runtine.</p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The most significant change in EI 7.1 is the Toml-based configuration strategy, which replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used. </p> </li> </ul> <p>Migration from WSO2 ESB is recommended for the following requirements:</p> <ul> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of EI 7.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of EI 7.1 contains changes that will impact your migration process. Be sure to read the following resources before you start. </p> <ul> <li>Comparison: ESB vs the Micro Integrator</li> <li>Features removed from the Micro Integrator</li> </ul> </li> <li> <p>Note that EI 7.x is a WUM-only release, which means that manual patches are not allowed. You can use WSO2 Update Manager(WUM) to get the latest fixes or updates for this release.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.x distribution (<code>&lt;EI_6.x.x_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.x.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install EI 7.1 in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> <ul> <li>Install the product using the Installer.</li> <li>Install the product using the binary distribution.</li> </ul> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your EI 7.1 distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are already using a JDBC or LDAP user store with EI 6.x, you can simply connect the same to the Micro Integrator.</p> <p>Note that secondary user stores are currently not supported in the Micro Integrator of EI 7.1.0.</p> <p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing ESB user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> </ul> <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>Update the <code>[user_store]</code> section and other configurations as given below.</p> <p>RDBMS User Store <pre><code>[user_store]\ntype = \"database\"\nread_only = \"false\"\n\n[[datasource]]\nid = \"WSO2_USER_DB\"\nurl= \"jdbc:mysql://localhost:3306/userdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n[realm_manager]\ndata_source = \"WSO2_USER_DB\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Only LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_only_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Write LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Your EI 6.x registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of EI 6.x among multiple nodes, you can do the same for the file-based registry of EI 7.1. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of EI 7.1.</li> </ul> <p>The Micro Integrator uses a file-based registry instead of a database (which is used in EI 6.x). Note the following when migrating the registry:</p> <ul> <li>If the registry resources in EI 6.x are added via carbon applications developed using WSO2 Integration Studio, you can directly migrate the artifacts to the Micro Integrator of EI 7.1. Copy the carbon applications from the <code>&lt;EI_6.x.x_HOME&gt;/repository/deployment/server/carbonapps</code> folder to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li> <p>If the registry resources are added through the management console in EI 6.x.x, you need to convert them to a Registry Resources module in WSO2 Integration Studio and deploy them via a Carbon Application.</p> <p>Warning</p> <p>Known Issues</p> <p>A registry migration using this method is currently not possible due to the known issues listed below. Please contact WSO2 if you\u00a0require a registry migration.</p> <ul> <li> <p>issue1258</p> </li> <li> <p>issue19770</p> </li> <li> <p>issue1257</p> </li> </ul> <p>Use one of the following approaches:</p> <ul> <li>Checkout the Registry Resources from the EI 6.x.x server directly into the Registry Resources module in WSO2 Integration Studio.</li> <li>Download the Registry Resources from EI 6.x.x and import them into the Registry Resources module in WSO2 Integration Studio.</li> </ul> <p>Note</p> <p>Once you have imported the Registry Resources into WSO2 Integration Studio, open the resource editor and make sure that the media type of the resource is set properly.    </p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts (in EI 6.x or EI 7.x ) is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_6.x.x_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.x, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.x via a composite application with the Connector Exporter Project, the same can be used in EI 7.1 seamlessly. Simply copy the CAR file in EI 6.x to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 5.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in EI 7.1.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_6.x.x_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_6.x.x_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>WSO2 EI no longer packs the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator of EI 7.1. Therefore, if you used multiple tenants in your EI 6.x deployment, you can replicate the set up in EI 7.1 by using separate Micro Integrator nodes.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_6.x.x_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.x.x via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, <code>axis2.xml</code>, etc.</li> <li>Micro Integrator of EI 7.1 provides a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to reach WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_6.x.x_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;E1_6.x.x_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuraton files in the ESB profile of EI 6.x.x. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n      &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> </li> </ul> <p>TOML configuration <pre><code>  [server]\n  offset  = 0\n</code></pre></p> <pre><code>Find more [parameters](https://ei.docs.wso2.com/en/7.1.0/micro-integrator/references/config-catalog/#deployment).\n</code></pre> <ul> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/&gt;wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters. </p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n     &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n     &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n     &lt;jndiConfig&gt;\n         &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n     &lt;/jndiConfig&gt;\n     &lt;definition type=\"RDBMS\"&gt;\n         &lt;configuration&gt;\n             &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n             &lt;username&gt;wso2carbon&lt;/username&gt;\n             &lt;password&gt;wso2carbon&lt;/password&gt;\n             &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n             &lt;maxActive&gt;50&lt;/maxActive&gt;\n             &lt;maxWait&gt;60000&lt;/maxWait&gt;\n             &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n         &lt;/configuration&gt;\n     &lt;/definition&gt;\n &lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\" class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\" class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\" class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\" class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\" class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\" class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <pre><code>  Do not duplicate the `[transport.http]` TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (`listener_enabled` and `sender_enabled`).\n</code></pre> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <ul> <li>JMS transport sender</li> </ul> <pre><code>  **XML configuration**\n  ```\n  &lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n  ```\n\n  **TOML configuration**\n  ```\n  [transport.jms]\n  sender_enable = true\n  ```\n\n  Find more [parameters](https://ei.docs.wso2.com/en/7.1.0/micro-integrator/references/config-catalog/#jms-transport-sender-non-blocking-mode).\n</code></pre> <ul> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code> synapse.threads.core = 20\n synapse.threads.max = 100\n ```\n\n**TOML configuration**\n</code></pre>   [mediation]    synapse.core_threads = 20    synapse.max_threads = 100   ```</p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\n worker_pool_size_max=400\n worker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\n max_worker_pool_size = 400          # inferred default: 400\n worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n &lt;defaultLocationResolver&gt;\n     &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n &lt;/defaultLocationResolver&gt;     \n ```\n\n**TOML configuration**\n</code></pre>   [task_handling]    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"</p> <p>[[task_resolver]]    task_server_count = \"3\"    ```</p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the WSO2 EI 7 Micro Integrator, the <code>carbon.logging.jar</code> file is not packed and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in EI 7 Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\u00a0&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2\u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.x, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in EI 7. See Encrypt Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.x, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> tool, which was provided by WSO2 Support, into the <code>&lt;EI_HOME&gt;/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>&lt;EI_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file, which was provided by WSO2 Support, into the migration directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.x.</p> </li> </ol> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the Micro Integrator of EI 7.1.0. Therefore, see Configuring the HL7 transport to set up HL7 in the Micro Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/","title":"Migrating from WSO2 EI 7.0.x to WSO2 EI 7.1.x","text":"<p>This guide explains the recommended strategy for migrating from the Micro Integrator of WSO2 EI 7.0.0 to the Micro Integrator of WSO2 EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the database used by the current EI 7.0.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install EI 7.1 in your environment:</p> <ul> <li>Install the product using the Installer.</li> <li>Install the product using the binary distribution.</li> </ul> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your EI 7.0 distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are already using a JDBC or LDAP user store with the Micro Integrator of EI 7.0, you can simply connect the same to the Micro Integrator of EI 7.1 by updating the configuration details in <code>deployment.toml</code> file. Following is a set of high-level configurations. </p> <p>Tip</p> <p>See the instructions on configuring a user store for more information.</p> <p>```toml tab='RDBMS User Store' [user_store] type = \"database\" read_only = \"false\"</p> <p>[[datasource]] id = \"WSO2_USER_DB\" url= \"jdbc:mysql://localhost:3306/userdb\" username=\"root\" password=\"root\" driver=\"com.mysql.jdbc.Driver\"</p> <p>[realm_manager] data_source = \"WSO2_USER_DB\" </p> <p>[internal_apis.file_user_store] enable = false <pre><code>```toml tab='Read-Only LDAP User Store'\n[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_only_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>```toml tab='Read-Write LDAP User Store' [user_store] connection_url = \"ldap://localhost:10389\" connection_name = \"uid=admin,ou=system\" connection_password = \"admin\" user_search_base = \"ou=Users,dc=wso2,dc=org\" type = \"read_write_ldap\"</p> <p>[internal_apis.file_user_store] enable = false ```</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of EI 7.1.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0. </p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> directory in EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.0.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in EI 7.1.0.</p> <p>Info</p> <p>If you have done any customization to the <code>&lt;MI_HOME&gt;/conf/internal-apis.xml</code> file in the Micro Integrator of EI 7.0.0, you have to move them to the <code>deployment.toml</code> file in EI 7.1.0. </p> <p>See the following topics for the TOML configurations that correspond to your configurations in the <code>internal-apis.xml</code> file:</p> <ul> <li>Management API Token Handler Parameters.</li> <li>Management API Token Store Parameters.</li> <li>Management API Token Parameters.</li> <li>Management API - Default User Store Parameters.</li> <li>Management API - Users Parameters.</li> <li>Management API - CORS Parameters.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>In version 7.0.0, secure vault was used to store sensitive information used in synapse configurations and the cipher tool was used for sensitive server configurations. In EI 7.1.0, all the sensitive information (in server configurations as well as synapse configuration) can simply be encrypted and stored using the cipher tool.</p> <p>To migrate the encrypted passwords from EI 7.0.0, you need to first obtain the plain-text passwords. We provide a migration tool, which allows you to decrypt already encrypted passwords in EI 7.0.0.  The plain-text values can then be added to the <code>[secrets]</code> section of the <code>deployment.toml</code> file of the Micro Integrator of EI 7.1.0 and re-encrypted by running the cipher tool. </p> <p>Follow the instructions given below.</p> <ol> <li>Download the tool.</li> <li> <p>Get the latest update for your existing EI 7.0.0 distribution by using WSO2 Update Manager.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> file to the <code>MI_HOME/dropins</code> folder in the Micro Integrator of EI 7.0.0.</p> </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p><code>bash tab='On Linux/Unix' sh micro-integrator.sh -Dmigrate.from.product.version=110</code></p> <p><code>bash tab='On Windows' micro-integrator.bat -Dmigrate.from.product.version=110</code></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to <code>&lt;MI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;MI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in the Micro Integrator of EI 7.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in EI 7.1 See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the pack and the jars need to be added to the product manually. Please  refer Configuring the HL7 transport for more details.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/","title":"Migrating from WSO2 ESB 5.0 to WSO2 EI 7.1","text":"<p>This guide provides the recommended strategy for migrating from WSO2 ESB 5.0 to the Micro Integrator of WSO2 EI 7.1.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#why-migrate-to-ei-71","title":"Why migrate to EI 7.1?","text":"<p>Listed below are some of the advantages of moving to EI 7.1 from the ESB.</p> <ul> <li> <p>The Micro Integrator of EI 7.1 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, as well as the Micro Integrator of WSO2 EI 7.x contains versions of the same WSO2 ESB runtine.</p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The most significant change in EI 7.1 is the Toml-based configuration strategy, which replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used. </p> </li> </ul> <p>Migration from WSO2 ESB is recommended for the following requirements:</p> <ul> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of EI 7.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of EI 7.1 contains changes that will impact your migration process. Be sure to read the following resources before you start. </p> <ul> <li>Comparison: ESB vs the Micro Integrator</li> <li>Features removed from the Micro Integrator</li> </ul> </li> <li> <p>Note that EI 7.x is a WUM-only release, which means that manual patches are not allowed. You can use WSO2 Update Manager(WUM) to get the latest fixes or updates for this release.</p> </li> <li> <p>If you are migrating from a version older than WSO2 ESB 5.0.0, you should first migrate to ESB 5.0.0 and then migrate to the Micro Integrator of EI 7.1.0.</p> </li> <li>The distribution folder structure has changed from ESB 5.0.0 to EI 7.1:                       WSO2 ESB 5.0.0                               Micro Integrator of EI 7.1.0              <code>/repository/conf <code>/conf <code>/repository/components/dropins <code>/dropins <code>/repository/components/extensions <code>/extensions <code>/repository/components/lib <code>/lib <code> <code>/repository/components/plugins <code>/wso2/components/plugins"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the ESB 5.0 distribution (<code>&lt;ESB_5.0.0_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current ESB 5.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install EI 7.1 in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> <ul> <li>Install the product using the Installer.</li> <li>Install the product using the binary distribution.</li> </ul> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your EI 7.1 distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are already using a JDBC or LDAP as the primary user store of your ESB 5.0, you can simply connect the same to the Micro Integrator.</p> <p>Note that secondary user stores are currently not supported in the Micro Integrator of EI 7.1.0.</p> <p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing ESB user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> </ul> <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>Update the <code>[user_store]</code> section and other configurations as given below.</p> <p>RDBMS User Store <pre><code>[user_store]\ntype = \"database\"\nread_only = \"false\"\n\n[[datasource]]\nid = \"WSO2_USER_DB\"\nurl= \"jdbc:mysql://localhost:3306/userdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n[realm_manager]\ndata_source = \"WSO2_USER_DB\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Only LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_only_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Write LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Your ESB 5.0 registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of ESB 5.0 among multiple nodes, you can do the same for the file-based registry of EI 7.1. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of EI 7.1.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Execute one of the commands given below to start the tool (<code>registry-migration-service-1.0.0.jar</code>), which you received from WSO2 Support.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip   Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> <ul> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> </ol> </li> </ul> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective in the Micro Integrator of EI 7.1 when you migrate from WSO2 ESB 5.0.0 to the Micro Integrator.</p> <p>Removed mediators</p> <p>The following mediators and artifacts are removed in the ESB/Micro Integrator runtime after ESB 5.0.0.</p> <ul> <li>Priority Executors</li> <li>Enqueue Mediator</li> <li>Bean Mediator</li> <li>POJO Command Mediator</li> <li>Spring Mediator</li> <li>Conditional Router Mediator</li> <li>In, Out Mediators</li> <li>Event Mediator</li> <li>In memory Topics</li> <li>Router Mediator</li> <li>Publish Event Mediator </li> </ul> <p>Message mediation</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>HTTP content negotiation</p> <p>HTTP content negotiation is enabled in the Micro Integrator by default. This setting transforms the message (at the time of building the message) according to the content type specified using the 'Accept' header of the request message. You can disable this behavior by updating the <code>deployment.toml</code> file as shown below.   <pre><code>[server]\nhostname = \"localhost\"\nhttp_content_negotiation = true\n</code></pre></p> <p>The recommended way to create integration artifacts (in ESB 5.0 or EI 7.x ) is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;ESB_5.0.0_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of ESB 5.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to ESB 5.0 via a composite application with the Connector Exporter Project, the same can be used in EI 7.1 seamlessly. Simply copy the CAR file in ESB 5.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 5.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in EI 7.1.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;ESB_5.0.0_HOME&gt;/repository/components/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;ESB_5.0.0_HOME&gt;/repository/components/lib</code> folder, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>WSO2 EI no longer packs the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator of EI 7.1. Therefore, if you used multiple tenants in your ESB deployment, you can replicate the set up in EI 7.1 by using separate Micro Integrator nodes.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;ESB_5.0.0_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in WSO2 ESB 5.0 versions via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, <code>axis2.xml</code>, etc.</li> <li>Micro Integrator of EI 7.1 provides a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2 (whereas the ESB 5.0 used log4j), which are configured in the <code>log4j2.properties</code> file.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to reach WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous ESB versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code> &lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n &lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n &lt;/clustering&gt;\n ```\n\n**TOML configuration**\n</code></pre>   # Cluster coordination database connection.   [[datasource]]    id = \"WSO2_COORDINATION_DB\"    url= \"jdbc:mysql://localhost:3306/clusterdb\"    username=\"root\"    password=\"root\"    driver=\"com.mysql.jdbc.Driver\"</p> <p># Identifying nodes in the cluster.    [cluster_config]   node_id = \"node-1\"   ```</p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuraton files in ESB 5.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n         &lt;configuration&gt;\n             &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n             &lt;username&gt;wso2carbon&lt;/username&gt;\n             &lt;password&gt;wso2carbon&lt;/password&gt;\n             &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n             &lt;maxActive&gt;50&lt;/maxActive&gt;\n             &lt;maxWait&gt;60000&lt;/maxWait&gt;\n             &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n         &lt;/configuration&gt;\n     &lt;/definition&gt;\n &lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\n id = \"WSO2_CARBON_DB\"\n url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n username=\"username\"\n password=\"password\"\n driver=\"org.h2.Driver\"\n pool_options.maxActive=50\n pool_options.maxWait = 60000 # wait in milliseconds\n pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\" class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\" class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\" class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\" class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\" class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\" class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\" class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\" class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\" class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\" class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\" class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\" class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\" class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\" class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;    \n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code> synapse.threads.core = 20\n synapse.threads.max = 100\n ```\n\n**TOML configuration**\n</code></pre>   [mediation]    synapse.core_threads = 20    synapse.max_threads = 100   ```</p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\n worker_pool_size_max=400\n worker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\n max_worker_pool_size = 400          # inferred default: 400\n worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code> http.user.agent.preserve=false\n http.server.preserve=true\n http.headers.preserve=Content-Type\n ```\n\n **TOML configuration**\n</code></pre>    [transport.http]    preserve_http_user_agent = false    preserve_http_server_name = true    preserve_http_headers = [\"Content-Type\"]    ```</p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n 'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n 'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code> queue.JMSMS=JMSMS\n ```\n\n **TOML configuration**\n</code></pre>    [transport.jndi.queue]    JMSMS = \"JMSMS\"    ```</p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code> topic.MyTopic = example.MyTopic\n ```\n\n **TOML configuration**\n</code></pre>    [transport.jndi.topic]    MyTopic = \"example.MyTopic\"    ```</p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n &lt;defaultLocationResolver&gt;\n     &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n &lt;/defaultLocationResolver&gt;     \n ```\n\n**TOML configuration**\n</code></pre>   [task_handling]    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"</p> <p>[[task_resolver]]    task_server_count = \"3\"    ```</p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>WSO2 ESB 5.0 (and all ESB versions prior to EI 6.6.0) use log4j. In  WSO2 EI 7 Micro Integrator, the <code>carbon.logging.jar</code> file is not packed and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in EI 7 Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older ESB version.</p> <ol> <li> <p>Replace carbon logging or <code>commons.logging</code> dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\u00a0&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2\u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from ESB 5.0.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in EI 7. See Encrypt Secrets for instructions.</p> <p>In case you need to obtain the plaintext passwords from the encrypted passwords in the WSO2 ESB 5.0.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>), which you received from WSO2 Support, into the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>ESB_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the migration directory, and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh wso2server.sh -Dmigrate.from.product.version=esb\n</code></pre></p> <p>On Windows <pre><code>wso2server.bat -Dmigrate.from.product.version=esb\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;ESB_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;ESB_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in ESB 5.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>You can now follow the instructions in Encrypting Secrets to re-encrypt the plain text secrets for the Micro Integrator.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the Micro Integrator of EI 7.1.0. Therefore, see Configuring the HL7 transport to set up HL7 in the Micro Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/","title":"Upgrade WSO2 Enterprise Integrator","text":"<p>This document walks you through the process of upgrading WSO2 Enterprise Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/#why-upgrade","title":"Why upgrade?","text":"<p>There are multiple reasons why you would want to upgrade the WSO2 product to the latest version. These reasons include but are not limited to the following.</p> <ul> <li>The current product version you are using is reaching its end of life. To see if this is the case, view the support matrix documentation.</li> <li>You want to leverage the new features of the latest version of the product.</li> <li>The version of the product you have does not have certain security and bug fixes that you require.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/#what-has-changed","title":"What has changed","text":"<p>Over the course of its lifetime, WSO2 Enterprise Integrator has changed significantly and some of the features you were using in an older version may not work the same way.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/#get-started","title":"Get started","text":"<p>To make sure that the upgrade process is smooth and you have the best experience, WSO2 recommends that you reach out to WSO2 Support in order to upgrade WSO2 Enterprise Integrator with minimal difficulty.</p> <p>If you are ready to start the migration process, follow the instructions given below.</p> <p>If you already have a WSO2 subscription, create a support ticket with your migration requirements and one of our support engineers will get in touch with you.</p> <ul> <li>Create a ticket</li> </ul> <p>If you are not a WSO2 customer and still need migration assistance and resources, please contact us through the following link. One of our Account Managers will get in touch with you to help.</p> <ul> <li>Contact us</li> </ul>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/","title":"Migrating from WSO2 Stream Processor","text":"<p>The Streaming Integrator performs all functions that are also performed by WSO2 Stream Processor. It also has additional features to trigger integration flows in order to take action in response to results derived after analyzing data.</p> <p>If you are currently using WSO2 Stream Processor to carry out any streaming integration/stream processing activities and want to carry them out in the Streaming Integrator, you can migrate your setup as follows:</p>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites should be completed before upgrading.</p> <ul> <li>Make a backup of the SP 4.4.0 database and copy the  directory in order to backup the product configurations. <li>Download the Streaming Integrator from the Enterprise Integrator Home</li>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#migrating-databases","title":"Migrating Databases","text":"<p>To connect the Streaming Integrator to the same databases as WSO2 SP 4.4.0 so that the persisted data can be accessed, configure the data sources as follows:</p> <ul> <li>Configure the data sources in the <code>&lt;SI_HOME&gt;/conf/server/deployment.yaml</code> file the same way you have configured them in <code>&lt;SP_HOME&gt;/conf/wso2/worker/deployment.yaml</code> file.</li> <li>Configure the data sources in the <code>&lt;SI__TOOLING_HOME&gt;/conf/server/deployment.yaml</code> file the same way you have configured them in <code>&lt;SP_HOME&gt;/conf/wso2/editor/deployment.yaml</code> file.</li> <li> <p>Check the data source configured for Business Rules  in the <code>&lt;SP_HOME&gt;/conf/wso2/dashboard/deployment.yaml</code> file, and configure that data source with the same parameter values in the <code>&lt;SI__TOOLING_HOME&gt;/conf/server/deployment.yaml</code> file.</p> <p>Info</p> <p>The Business Rules feature which was a part of the <code>Dashboard</code> profile of the Stream Processor is now shipped with Streaming Integrator Tooling. Therefore, configurations related to this feature are added in the <code>&lt;SI__TOOLING_HOME&gt;/conf/server/deployment.yaml</code> file.</p> </li> </ul> <p>For the complete list of data sources configured for the Streaming Integrator, see Configuring Data sources.</p>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#migrating-siddhi-applications","title":"Migrating Siddhi applications","text":"<p>To migrate the Siddhi applications that you have deployed in WSO2 SP 4.4.0, follow the procedure below:</p> <ol> <li> <p>Copy all the Siddhi applications in the <code>&lt;SP_HOME/wso2/worker/deployment/siddhi-files</code> directory.</p> </li> <li> <p>Place the Siddhi applications you copied in the <code>&lt;SI_HOME/wso2/server/deployment/siddhi-files</code> directory.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#testing-the-migration","title":"Testing the migration","text":"<p>Simulate a few events to the Siddhi applications deployed in the Streaming Integrator to test whether they are generating the expected results.</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/","title":"Upgrading from Streaming Integrator 1.0.0","text":"<p>To upgrade from Streaming Integrator 1.0.0 to Streaming Integrator 1.1.0, follow the steps below:</p> <p>Before you begin</p> <p>Download Streaming Integrator 1.1.0 version from the Streaming Integrator Page</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-1-deploy-the-siddhi-applications","title":"Step 1: Deploy the Siddhi applications","text":"<p>To deploy the Siddhi applications you have been running in Streaming Integrator 1.0.0 to Streaming Integrator 1.1.0, follow the procedure below:</p> <ol> <li> <p>Open the <code>&lt;SI 1.0.0_HOME&gt;/wso2/server/deployment/siddhi-files</code> directory. Then copy all the siddhi files in it.</p> </li> <li> <p>Paste all the Siddhi files that you copied in the <code>&lt;SI 1.1.0_HOME&gt;/wso2/server/deployment/siddhi-files</code> directory.</p> </li> </ol> <p>Now your Siddhi applications are deployed in Streaming Integrator 1.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-2-update-configuration-files","title":"Step 2: Update configuration files","text":"<p>To configure Streaming Integrator 1.1.0 the same way as Streaming Integrator 1.0.0, open the <code>&lt;SI 1.0.0_HOME&gt;/conf/server/deployment.yaml</code> file. Then read each line, and update the <code>&lt;SI 1.1.0_HOME&gt;/conf/server/deployment.yaml</code> file with the same values</p> <p>Note</p> <p>The deployment.yaml files must not be copied directly between servers due to certain differences in the parameters included in the two Streaming Integrator versions.</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-3-start-the-si-110-server-and-install-required-extensions","title":"Step 3: Start the SI 1.1.0 server and install required extensions","text":"<p>The purpose of this step is to Start the Streaming Integrator and identify any further reqirements to run the Siddhi applications that are deployed in it.</p> <ol> <li> <p>Navigate to the <code>&lt;SI 1.1.0_HOME&gt;/bin</code> directory and issue the appropriate command based on your operating system:</p> <ul> <li>For Windows     : <code>server.bat</code></li> <li>For Linux/MacOS :<code>./server.sh</code></li> </ul> <p>If any of the deployed Siddhi applications uses a Siddhi extension that is not currently installed, it is indicated via an error in the start up logs as shown in the example below:</p> <p></p> </li> <li> <p>To install all the missing extensions that are required to run the Siddhi applications currently deployed, navigate to the <code>&lt;SI 1.1.0_HOME&gt;/bin</code> directory and issue the appropriate command based on your operating system:</p> <ul> <li>For Windows     : <code>extension-installer.bat install</code></li> <li>For Linux/MacOS : <code>./extension-installer.sh install</code> </li> </ul> <p>As a result, the following message is logged.</p> <p></p> <p>If you enter <code>y</code> to specify that you want to proceed with the installation, the following message appears to inform you of the status of the installation and to prompt you to restart the WSO2 Streaming Integrator server once the installation is complete.</p> <p></p> <p>Info</p> <p>The Extension Installer tool is currently unable to install a few of the supported Siddhi applications. Therefore, if the start-up logs indicate a missing extension, but you are unable to install that extension via the Extension Installer tool, you can install it manually.We will be upgrading the Extension Installer to handle all the supported Siddhi extensions in a future release.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-4-test-the-migration","title":"Step 4: Test the migration","text":"<p>To test the migration, simulate events for the Siddhi applications you have deployed and verify whether they generate the expected results. For instructions to simulate events, see Testing Siddhi Applications. </p>"},{"location":"micro-integrator/MI-4.0.0/registry-migration/","title":"Migrating the Registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). <ul> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> </li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Download the tool and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/","title":"Migrating from WSO2 EI 6.1.0 to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.1.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#why-upgrade-to-wso2-api-m-400","title":"Why upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</li> </ul> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> <ul> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations.</p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace.</li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.1.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.1.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li>Download and install the latest Micro Integrator in your environment:</li> </ul> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> <ul> <li>Use WSO2 Update Manager to get the latest available updates for your Micro Integrator distribution.</li> </ul> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.1.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.1.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.1.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.1.0. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts (<code>migration-scripts-ei6.1.0-to-apim4.0.0.zip</code>), which you received from WSO2 Support.</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator of API-M 4.0.0 to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-the-registry","title":"Migrating the registry","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Use the registry migration tool (<code>registry-migration-service-1.0.0.jar</code>) provided by the WSO2 Support and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li>To start the tool without a log file:</li> </ul> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> <ul> <li>To start the tool with a log file:</li> </ul> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> </li> </ol> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> <ol> <li>Select one of the following options and proceed.</li> </ol> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> <ol> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> </li> </ol> <p>You should now have a CAR file with the required registry resources.</p> <ol> <li>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.1.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.1.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.1.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.1.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.1.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> <p>Warning</p> <p>Note that WSO2 API Manager 3.0.0, 3.1.0, 3.2.0, and 4.0.0 are affected by the Log4j2 zero-day vulnerability, which has been reported to WSO2 on 10th December 2021. You can mitigate this vulnerability in your product by following our instructions and guidelines.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'  nonWorkerManager <pre><code>```toml tab='TOML configuration'\n# Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations </p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.1.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml </p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'    www.wso2.org <pre><code>```toml tab='TOML configuration'\n[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'     1 <pre><code>```toml tab='TOML configuration'\n[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml </p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'     admin admin admin <pre><code>```toml tab='TOML configuration'\n[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'     true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'     org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml </p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'     WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml </p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'    true <pre><code>```toml tab='TOML configuration'\n[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'     8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'     8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'    &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'     org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'     localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'         9292 <pre><code>```toml tab='TOML configuration'\n[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'     true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'         <pre><code>```toml tab='TOML configuration'\n[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties </p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'    synapse.threads.core = 20    synapse.threads.max = 100    <pre><code>```toml tab='TOML configuration'\n[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties </p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'    worker_pool_size_core=400    worker_pool_size_max=400    worker_pool_queue_length=-1    <pre><code>```toml tab='TOML configuration'\n[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'    http.user.agent.preserve=false    http.server.preserve=true    http.headers.preserve=Content-Type    <pre><code>```toml tab='TOML configuration'\n[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties </p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'    connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'    queue.JMSMS=JMSMS    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'    topic.MyTopic = example.MyTopic    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml </p> <p>```xml tab='XML configuration'    1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.1.0, you need to first re-encrypt (using OAEP) all the encrypted information  in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets  in the Micro Integrator. See Encrypting Secrets  for instructions.</p> <p>Info </p> <p>API-M 4.0.0 uses OAEP for data encryption in addition to the RSA algorithm  (which is used in the ESB profile of EI 6.1.0). Therefore, the internally encrypted data in your current databases (such as  datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies,  event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using  secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1: Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update for your existing EI 6.1.0 by using WSO2 Updates. This will give you a new EI distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated EI distribution to your existing databases (which are used for registry data and user management data):</p> <p>Connecting to the database </p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.       By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf</code> directory) and specify the datasource name.       <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre></p> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section. </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.  </li> </ul> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> <li> <p>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </p> </li> </ol> </li> <li> <p>Be sure that the <code>carbon.properties</code> file provided by WSO2 Support is included in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory with the following parameter:</p> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> </li> <li> <p>Start the updated ESB server of EI 6.1.0. This will re-encrypt the data in the databases.</p> </li> </ol> Step 2: Run the migration tool <p>Now, let's run the password decryption tool from EI 6.1.0 to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.1.0.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file provided by WSO2 Support into the migration directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.1.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.0/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/","title":"Migrating from WSO2 EI 6.1.1 to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.1.1 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#why-upgrade-to-wso2-api-m-400","title":"Why upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations.</p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace.</li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.1.1 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.1.1 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin </p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.1.1 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.1.1, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.1.1, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.1.1. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts (<code>migration-scripts-ei6.1.1-to-apim4.0.0.zip</code>),which you received from WSO2 Support.</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-the-registry","title":"Migrating the registry","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Use the registry migration tool (<code>registry-migration-service-1.0.0.jar</code>) provided by WSO2 Support and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li>To start the tool without a log file:</li> </ul> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> <ul> <li>To start the tool with a log file:</li> </ul> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> </li> </ol> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> <ol> <li>Select one of the following options and proceed.</li> </ol> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> <ol> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> </li> </ol> <p>You should now have a CAR file with the required registry resources.</p> <ol> <li>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names </p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.1.1, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.1.1 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.1.1 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.1.1 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.1.1 deployment, you can replicate the set up by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.1.1 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> <p>Warning</p> <p>Note that WSO2 API Manager 3.0.0, 3.1.0, 3.2.0, and 4.0.0 are affected by the Log4j2 zero-day vulnerability, which has been reported to WSO2 on 10th December 2021. You can mitigate this vulnerability in your product by following our instructions and guidelines.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations </p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'     nonWorkerManager <pre><code>```toml tab='TOML configuration'\n# Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations </p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;E1_6.1.1_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.1.1. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml </p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'    www.wso2.org <pre><code>```toml tab='TOML configuration'\n[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'     1 <pre><code>```toml tab='TOML configuration'\n[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml </p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'     admin admin admin <pre><code>```toml tab='TOML configuration'\n[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'     true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'     org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml </p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'     WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml </p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'    true <pre><code>```toml tab='TOML configuration'\n[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'     8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'     8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'    &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'     org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'     localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'         9292 <pre><code>```toml tab='TOML configuration'\n[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'     true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'         <pre><code>```toml tab='TOML configuration'\n[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties </p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'    synapse.threads.core = 20    synapse.threads.max = 100    <pre><code>```toml tab='TOML configuration'\n[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties </p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'    worker_pool_size_core=400    worker_pool_size_max=400    worker_pool_queue_length=-1    <pre><code>```toml tab='TOML configuration'\n[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'    http.user.agent.preserve=false    http.server.preserve=true    http.headers.preserve=Content-Type    <pre><code>```toml tab='TOML configuration'\n[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties </p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'    connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'    queue.JMSMS=JMSMS    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'    topic.MyTopic = example.MyTopic    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml </p> <p>```xml tab='XML configuration'    1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.1.1, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets  for instructions.</p> <p>Info </p> <p>API-M 4.0.0 uses OAEP for data encryption in addition to the RSA algorithm  (which is used in the ESB profile of EI 6.1.1). Therefore, the internally encrypted data in your current databases (such as  datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies,  event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using  secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1: Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update (later than the update level released on 18/04/2018) for your existing EI 6.1.1 by using WSO2 Updates. This will give you a new EI distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated EI distribution to your existing databases (which are used for registry data and user management data):</p> <p>Connecting to the database </p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.    By default, registry and user management data are stored in one database and are configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.      </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf</code> directory) and specify the datasource name.    <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre></p> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.    </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> </li> </ol> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </li> </ol> </li> <li> <p>Be sure that the <code>carbon.properties</code> file provided by WSO2 Support is included in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory with the following parameter:</p> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> </li> <li> <p>Start the updated ESB server of EI 6.1.1. This will re-encrypt the data in the databases.</p> </li> </ol> Step 2: Run the migration tool <p>Now, let's run the password decryption tool from EI 6.1.1 to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.1.1.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file provided by WSO2 Support into the migration directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.1.1.</p> </li> </ol> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> <ol> <li>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.1.1/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/","title":"Migrating from WSO2 EI 6.2.x to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.2.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#why-upgrade-to-wso2-api-m-400","title":"Why upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations.</p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace.</li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.2.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.2.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin </p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.2.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.2.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.2.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.2.0. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts (<code>migration-scripts-ei6.2.x-to-apim4.0.0.zip</code>), which you received from WSO2 Support..</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Before you begin </p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Use the registry migration tool (<code>registry-migration-service-1.0.0.jar</code>) provided by WSO2 Support and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> </li> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> </li> </ol> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> <ol> <li>Select one of the following options and proceed.</li> </ol> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> <ol> <li> <p>Specify input values depending on which export option you selected.</p> </li> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ol> <p>You should now have a CAR file with the required registry resources.</p> <ol> <li>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin </p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names </p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.2.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.2.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.2.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.2.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.2.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin </p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.2.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> <p>Warning</p> <p>Note that WSO2 API Manager 3.0.0, 3.1.0, 3.2.0, and 4.0.0 are affected by the Log4j2 zero-day vulnerability, which has been reported to WSO2 on 10th December 2021. You can mitigate this vulnerability in your product by following our instructions and guidelines.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations </p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'  nonWorkerManager <pre><code>```toml tab='TOML configuration'\n# Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations </p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.2.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml </p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'    www.wso2.org <pre><code>```toml tab='TOML configuration'\n[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'     1 <pre><code>```toml tab='TOML configuration'\n[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml </p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'     admin admin admin <pre><code>```toml tab='TOML configuration'\n[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'     true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'     org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml </p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'     WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml </p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'    true <pre><code>```toml tab='TOML configuration'\n[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'     8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'     8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'    &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'     org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'     localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'         9292 <pre><code>```toml tab='TOML configuration'\n[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'     true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'         <pre><code>```toml tab='TOML configuration'\n[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties </p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'    synapse.threads.core = 20    synapse.threads.max = 100    <pre><code>```toml tab='TOML configuration'\n[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties </p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'    worker_pool_size_core=400    worker_pool_size_max=400    worker_pool_queue_length=-1    <pre><code>```toml tab='TOML configuration'\n[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'    http.user.agent.preserve=false    http.server.preserve=true    http.headers.preserve=Content-Type    <pre><code>```toml tab='TOML configuration'\n[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties </p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'    connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'    queue.JMSMS=JMSMS    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'    topic.MyTopic = example.MyTopic    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml </p> <p>```xml tab='XML configuration'    1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</li> </ul> <p><pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> - Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.</p> </li> </ol> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> <ol> <li>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.2.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.2.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file provided by WSO2 Support into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.2.0.</p> </li> </ol> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> <ol> <li>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.2.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/","title":"Migrating from WSO2 EI 6.3.x to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.3.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#why-upgrade-to-wso2-api-m-400","title":"Why Upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.3.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.3.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.3.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.2.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.2.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.3.0. To update the database schema:</p> <ol> <li> <p>Download the database migration scripts (<code>migration-scripts-ei6.3.x-to-apim4.0.0.zip</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Unzip the downloaded file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-the-registry","title":"Migrating the Registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). <ul> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> </li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Download the tool and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.3.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.3.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.3.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.3.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.3.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.3.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> <p>Warning</p> <p>Note that WSO2 API Manager 3.0.0, 3.1.0, 3.2.0, and 4.0.0 are affected by the Log4j2 zero-day vulnerability, which has been reported to WSO2 on 10th December 2021. You can mitigate this vulnerability in your product by following our instructions and guidelines.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.3.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;    ```\n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.3.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator for API-M 4.0.0. See Encrypt Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.3.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Download the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>&lt;EI_HOME&gt;/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file, which was provided by WSO2 Support, into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.3.0.</p> </li> </ol> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> <ol> <li>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.3.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/","title":"Migrating from WSO2 EI 6.4.x to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.4.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#why-upgrade-to-wso2-api-m-400","title":"Why Upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.4.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.4.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.4.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.4.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.4.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.4.0. To update the database schema:</p> <ol> <li> <p>Download the database migration scripts (<code>migration-scripts-ei6.4.x-to-apim4.0.0.zip</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Unzip the downloaded file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-the-registry","title":"Migrating the Registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). <ul> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> </li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Download the tool and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.4.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.4.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.4.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.4.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer distributes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.4.0 deployment, you can replicate the setup using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.4.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> <p>Warning</p> <p>Note that WSO2 API Manager 3.0.0, 3.1.0, 3.2.0, and 4.0.0 are affected by the Log4j2 zero-day vulnerability, which has been reported to WSO2 on 10th December 2021. You can mitigate this vulnerability in your product by following our instructions and guidelines.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.4.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration   ```   [internal_apis.file_user_store]   enable = false</p> <p>[user_store]   class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"   type = \"database\"    ```</p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt; \n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.4.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.4.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Download the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>&lt;EI_HOME&gt;/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file, which was provided by WSO2 Support, into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.4.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.4.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/","title":"Migrating from WSO2 EI 6.5.x to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.5.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#why-upgrade-to-wso2-api-m-400","title":"Why Upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.5.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.5.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.5.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.5.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.5.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>There are changes in the database structure (schema) that is used in EI 6.5.0. To update the database schema:</p> <ol> <li> <p>Download the database migration scripts (<code>migration-scripts-ei6.5.x-to-apim4.0.0.zip</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Unzip the downloaded file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-the-registry","title":"Migrating the Registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). <ul> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> </li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Download the tool and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.5.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.5.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.5.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.5.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer includes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.<ul> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.5.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.5.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> <p>Warning</p> <p>Note that WSO2 API Manager 3.0.0, 3.1.0, 3.2.0, and 4.0.0 are affected by the Log4j2 zero-day vulnerability, which has been reported to WSO2 on 10th December 2021. You can mitigate this vulnerability in your product by following our instructions and guidelines.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\"\n                enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.5.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <code>[truststore]   file_name = \"client-truststore.jks\"     type = \"JKS\"                           password = \"wso2carbon\"               alias = \"symmetric.key.value\"         algorithm = \"AES\"</code></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt; \n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <p><pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>     -   Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.5.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.5.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Download the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>&lt;EI_HOME&gt;/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file, which was provided by WSO2 Support, into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.5.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.5.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/","title":"Upgrading from WSO2 EI 6.6.x to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.6.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#why-upgrade-to-wso2-api-m-400","title":"Why Upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#upgrading-to-the-micro-integrator","title":"Upgrading to the Micro Integrator","text":"<p>Follow the instructions below to start the upgrade!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.6.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.6.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.6.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.6.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.6.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li> <p>Download the database migration scripts, which was provided by WSO2 Support.</p> </li> <li> <p>Unzip the downloaded file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-the-registry","title":"Migrating the Registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). <ul> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> </li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Download the tool and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.6.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.6.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.6.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.6.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer includes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.6.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.6.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.6.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters. </p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;    ```\n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code> connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n ```\n\n **TOML configuration**\n</code></pre>   [transport.jndi.connection_factories]   'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"   'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"   ```</p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the Micro Integrator configuration catalog.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.6.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.6.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Download the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>&lt;EI_HOME&gt;/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>&lt;EI_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file, which was provided by WSO2 Support, into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.6.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-6.6.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/","title":"Upgrading from WSO2 EI 7.0.x to WSO2 API-M 4.0.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 EI 7.0.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current EI 7.0.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with EI 7.0.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 7.0.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 7.0.0. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts (<code>migration-scripts-ei7.0.x-to-apim4.0.0.zip</code>), which you received from WSO2 Support.</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.0.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.0.0. </p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.0.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.0.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.0.0.</p> <p>Info</p> <p>If you have done any customization to the <code>&lt;MI_HOME&gt;/conf/internal-apis.xml</code> file in the Micro Integrator of EI 7.0.0, you have to move them to the <code>deployment.toml</code> file in API-M 4.0.0. </p> <p>See Securing the Management API for instructions.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>In version 7.0.0, secure vault was used to store sensitive information used in synapse configurations and the cipher tool was used for sensitive server configurations. In API-M 4.0.0, all the sensitive information (in server configurations as well as synapse configurations) can simply be encrypted and stored using the cipher tool.</p> <p>To migrate the encrypted passwords from EI 7.0.0, you need to first obtain the plain-text passwords. We provide a migration tool, which allows you to decrypt already encrypted passwords in EI 7.0.0.  The plain-text values can then be added to the <code>[secrets]</code> section of the <code>deployment.toml</code> file of the Micro Integrator of API-M 4.0.0 and re-encrypted by running the cipher tool. </p> <p>Follow the instructions given below.</p> <ol> <li>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</li> <li> <p>Get the latest update for your existing EI 7.0.0 distribution by using WSO2 Updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> file to the <code>MI_HOME/dropins</code> folder in the Micro Integrator of EI 7.0.0.</p> </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh micro-integrator.sh -Dmigrate.from.product.version=mi110 <pre><code>```bash tab='On Windows'\nmicro-integrator.bat -Dmigrate.from.product.version=mi110\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;MI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;MI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in the Micro Integrator of EI 7.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.0.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.0.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/","title":"Upgrading from WSO2 EI 7.1.x to WSO2 API-M 4.0.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 EI 7.1.0 to the Micro Integrator of WSO2 API-M 4.0.0. </p> <p>Note</p> <p>Because there aren't any database changes between the Micro Integrators of EI 7.1.0 and API-M 4.0.0, upgrading involves moving (migrating) all your artifacts and configurations from EI 7.1.0 to API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current EI 7.1.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li>Download and install the latest Micro Integrator in your environment:</li> </ul> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> <ul> <li>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</li> </ul> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with EI 7.1.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 7.1.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 7.1.0. To update the database schema:</p> <ol> <li> <p>Download the database migration scripts (<code>migration-scripts-ei7.1.x-to-apim4.0.0.zip</code>), which was provided by WSO2 Support.</p> </li> <li> <p>Unzip the downloaded file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.0.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.0.0. </p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.0.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.1.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-ei-7.1.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/","title":"Migrating from WSO2 ESB 5.0.0 to WSO2 API-M 4.0.0","text":"<p>This guide provides the recommended strategy for upgrading from WSO2 ESB 5.0.0 to the Micro Integrator of WSO2 API-M 4.0.0.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#why-upgrade-to-wso2-api-m-400","title":"Why Upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> <li>If you are migrating from a version older than WSO2 ESB 5.0.0, you should first migrate to ESB 5.0.0 and then migrate to the Micro Integrator of API-M 4.0.0.</li> <li>The distribution folder structure has changed from ESB 5.0.0 to API-M 4.0.0:                       WSO2 ESB 5.0.0                               Micro Integrator of API-M 4.0.0              <code>/repository/conf <code>/conf <code>/repository/components/dropins <code>/dropins <code>/repository/components/extensions <code>/extensions <code>/repository/components/lib <code>/lib <code> <code>/repository/components/plugins <code>/wso2/components/plugins"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the ESB 5.0.0 distribution (<code>&lt;ESB_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current ESB 5.0.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment.</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin    Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing ESB 5.0.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with ESB 5.0.0, you can simply connect the same to the Micro Integrator of API-M 4.0.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with ESB 5.0.0, you need to first update the database before connecting the same to APIM 4.0.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in ESB 5.0.0. To update the database schema:</p> <ol> <li> <p>Contact WSO2 Support to obtain the database migration scripts if you do not have them already.</p> </li> <li> <p>Select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for API-M 4.0.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator of API-M 4.0.0 to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.0.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.0.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Before you begin</p> <pre><code>  Note the following:\n</code></pre> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 ESB). </li> <li>Your WSO2 ESB registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 ESB among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Contact WSO2 Support to obtain the tool if you do not have it and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 ESB server from the migration tool:</p> <p>              Input Value                       Description                       ESB Server URL                        Specify the ESB server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the ESB Server                       Specify the location of the internal truststore used by the ESB server.                       Internal Truststore Type of the ESB Server                       Specify the type of the internal Truststore used by the ESB server. The default is <code>JKS</code>.                       Internal Truststore Password of ESB Server                       Specify the password of the internal Truststore used by the ESB server. The default is <code>wso2carbon</code>.                       Username of the ESB Server          <code>admin</code>.                       Password of the ESB Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 ESB instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin</p> <p>Note that the following changes are effective in the Micro Integrator when you migrate from WSO2 ESB 5.0.0 to the Micro Integrator.</p> <p>Removed mediators</p> <p>The following mediators and artifacts are removed in the ESB/Micro Integrator runtime after ESB 5.0.0.</p> <pre><code>   -   Priority Executors\n   -   Enqueue Mediator\n   -   Bean Mediator\n   -   POJO Command Mediator\n   -   Spring Mediator\n   -   Conditional Router Mediator\n   -   In, Out Mediators\n   -   Event Mediator\n   -   In memory Topics\n   -   Router Mediator\n   -   Publish Event Mediator\n</code></pre> <p>Message mediation</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>HTTP content negotiation</p> <p>HTTP content negotiation is enabled in the Micro Integrator by default. This setting transforms the message (at the time of building the message) according to the content type specified using the 'Accept' header of the request message. You can disable this behavior by updating the <code>deployment.toml</code> file as shown below.</p> <pre><code>[server]\nhostname = \"localhost\"\nhttp_content_negotiation = true\n</code></pre> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;ESB_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of ESB 5.0.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <pre><code>For testing purposes, you can copy the artifacts to the same folder structure inside the `&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default` directory.\n</code></pre>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-deployed-connectors","title":"Migrating deployed connectors","text":"<ul> <li>If the connector is added to ESB 5.0.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in ESB 5.0.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 5.0.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;ESB_HOME&gt;/repository/components/lib</code> folder, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your ESB deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;ESB_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in WSO2 ESB 5.0.0 versions via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2 (whereas the ESB 5.0.0 used log4j), which are configured in the <code>log4j2.properties</code> file.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> <p>Warning</p> <p>Note that WSO2 API Manager 3.0.0, 3.1.0, 3.2.0, and 4.0.0 are affected by the Log4j2 zero-day vulnerability, which has been reported to WSO2 on 10th December 2021. You can mitigate this vulnerability in your product by following our instructions and guidelines.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous ESB versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used Analytics with your ESB, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in ESB 5.0.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'     www.wso2.org <pre><code>```toml tab='TOML configuration'\n    [server]\n    hostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'      1 <pre><code>```toml tab='TOML configuration'\n    [server]\n    offset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.primary]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.internal]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [truststore]\n    file_name = \"client-truststore.jks\"  \n    type = \"JKS\"                        \n    password = \"wso2carbon\"            \n    alias = \"symmetric.key.value\"      \n    algorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'      admin admin admin <pre><code>```toml tab='TOML configuration'\n    [super_admin]\n    username = \"admin\"              # inferred\n    password = \"admin\"              # inferred\n    admin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'      true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n    [realm_manager]\n    data_source = \"WSO2CarbonDB\"       \n    properties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    type = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\n    class = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\n    connection_url = \"ldap://localhost:10389\"   #inferred\n    connection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'       org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\n    type = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'      WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n    [[datasource]]\n    id = \"WSO2_CARBON_DB\"\n    url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n    username=\"username\"\n    password=\"password\"\n    driver=\"org.h2.Driver\"\n    pool_options.maxActive=50\n    pool_options.maxWait = 60000 # wait in milliseconds\n    pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n    [server]\n    hot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_formatters]\n    form_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\n    multipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\n    application_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\n    text_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    soap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    text_plain = \"org.apache.axis2.format.PlainTextFormatter\"\n    application_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\n    octet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n    # Custom message formatters.\n    [[custom_message_formatters]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_builders]\n    application_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\n    form_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\n    multipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\n    text_plain = \"org.apache.axis2.format.PlainTextBuilder\"\n    application_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\n    octet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n    # Custom message builders\n    [[custom_message_builders]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'      8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.secured_enable = true              \n    listener.secured_port = 8243        \n    listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \n    listener.secured_bind_address = \"hostname or IP address\"\n    listener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \n    listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    listener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\n    listener.keystore.key_password = \"wso2carbon\"\n    listener.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    listener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>WSO2 ESB 5.0.0 (and all ESB versions prior to EI 6.6.0) use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older ESB version.</p> <ol> <li> <p>Replace carbon logging or <code>commons.logging</code> dependencies with pax-logging dependency as shown below.</p> <pre><code>    &lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <p><pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>     -   Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</p> </li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.</p> <pre><code>    org.apache.commons.logging;\n    version=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from ESB 5.0.0, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>Info</p> <p>API-M 4.0.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in ESB 5.0.0). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1 - Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update for your existing ESB 5.0.0 by using WSO2 Updates. This will give you a new ESB distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated ESB distribution to your existing databases (which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> Element Description driverClassName The class name of the database driver. url The URL of the database. username and password The name and password of the database user. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf</code> directory) and specify the datasource name.</p> <pre><code>   &lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/</code> directory) and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.   </p> Element Description driverClassName The class name of the database driver. url The URL of the database. username and password The name and password of the database user. <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> <li> <p>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </p> </li> </ol> </li> <li> <p>Be sure that the carbon.properties file is included in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/</code> directory with the following parameter:</p> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <p>Contact WSO2 Support if you do not have this file.</p> </li> <li> <p>Start the updated ESB server. This will re-encrypt the data in the databases.</p> </li> </ol> Step 2 - Run the migration tool <p>Now, let's run the password decryption tool from ESB 5.0.0 to decrypt the encrypted passwords. This gives you access to the plain-text passwords in ESB 5.0.0. Contact WSO2 Support to get this tool if you do not already have it.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact WSO2 Support to obtain the tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder in the server. Contact WSO2 Support if you do not have this file.</p> </li> <li> <p>Create a directory named migration in <code>&lt;ESB_HOME&gt;</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the migration directory, and update the following property. Contact WSO2 Support if you do not have this file.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh wso2server.sh -Dmigrate.from.product.version=esb <pre><code>```bash tab='On Windows'\nwso2server.bat -Dmigrate.from.product.version=esb\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;ESB_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;ESB_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in ESB 5.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>You can now follow the instructions in Encrypting Secrets to re-encrypt the plain text secrets for the Micro Integrator.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.0.0/upgrading-from-esb-5.x.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.0.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.0.0/why-upgrade-to-4.0.0/","title":"why-upgrade-to-4.0.0","text":""},{"location":"micro-integrator/MI-4.0.0/why-upgrade-to-4.0.0/#why-upgrade-to-wso2-api-m-400","title":"Why Upgrade to WSO2 API-M 4.0.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.0.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.0.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 contains versions of the same WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.0.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.0.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.0.0/why-upgrade-to-4.0.0/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.0.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.0.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.0.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the more recent versions of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/registry-migration/","title":"registry-migration","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> <li>Since the recommended approach to deploying Datasources in MI is to create a Datasources project in the Integration Studio and deploy them as CAR files, if you have any Datasources deployed in the EI registry, you need to manually download the content from the EI Management Console and create the data source definitions in Integration Studio and export them as a CAR app. See the instructions on [Create Datasource Configs](../../...</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/","title":"Upgrading from WSO2 API-M 4.0.0 to WSO2 API-M 4.1.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 API-M 4.0.0 to the Micro Integrator of WSO2 API-M 4.1.0. </p> <p>Note Because there aren't any database changes between the Micro Integrators of API-M 4.0.0 and API-M 4.1.0, upgrading involves moving (migrating) all your artifacts and configurations from API-M 4.0.0 to API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current API-M 4.0.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Note</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with API-M 4.0.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with API-M 4.0.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/userstores</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.1.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.1.0. </p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.1.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of API-M 4.0.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-apim-4.0.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/","title":"Migrating from WSO2 EI 6.1.0 to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.1.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations.</p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace.</li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#before-you-begin","title":"Before you begin","text":"<p>Note the following: - Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator. - The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration. - Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release. - The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.1.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.1.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.1.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.1.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.1.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.1.0. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts, which you received from WSO2 Support.</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator of API-M 4.1.0 to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required. <pre><code>-DNonUserCoreMode=true \\\n</code></pre></p> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> <p> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager              org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager              org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager           org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager              org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager                org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager            </p> Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-the-registry","title":"Migrating the registry","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> <li>Since the recommended approach to deploying Datasources in MI is to create a Datasources project in the Integration Studio and deploy them as CAR files, if you have any Datasources deployed in the EI registry, you need to manually download the content from the EI Management Console and create the data source definitions in Integration Studio and export them as a CAR app. See the instructions on Create Datasource Configs.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Use the tool (<code>registry-migration-service-1.0.0.jar</code>) provided by WSO2 Support and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> </li> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> </li> </ol> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> <ol> <li>Select one of the following options and proceed.</li> </ol> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> <ol> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li>Enter the following input values:</li> </ol> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> <ol> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> </li> </ol> <p>You should now have a CAR file with the required registry resources.</p> <ol> <li>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.1.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.1.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.1.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.1.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.1.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Find the TOML configurations corresponding to the XML configurations below.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration: <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\"\n                enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration: <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.1.0. Find the TOML configurations corresponding to the XML configurations in the file below:</p> <p>carbon.xml</p> <ul> <li>Hostname</li> </ul> <p>```xml tab='XML configuration'  www.wso2.org <pre><code>```toml tab='TOML configuration'\n[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> <ul> <li>Port offset</li> </ul> <p>```xml tab='XML configuration'   1 <pre><code>```toml tab='TOML configuration'\n[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> <ul> <li>Primary keystore</li> </ul> <p>```xml tab='XML configuration'   ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> <ul> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'  ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'  ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'     admin admin admin <pre><code>```toml tab='TOML configuration'\n[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'     true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'     org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'     WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'    true <pre><code>```toml tab='TOML configuration'\n[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'     8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'     8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'    &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'     org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'     localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'         9292 <pre><code>```toml tab='TOML configuration'\n[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'     true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'    synapse.threads.core = 20    synapse.threads.max = 100    <pre><code>```toml tab='TOML configuration'\n[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'    worker_pool_size_core=400    worker_pool_size_max=400    worker_pool_queue_length=-1    <pre><code>```toml tab='TOML configuration'\n[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'    http.user.agent.preserve=false    http.server.preserve=true    http.headers.preserve=Content-Type    <pre><code>```toml tab='TOML configuration'\n[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'    connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'    queue.JMSMS=JMSMS    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'    topic.MyTopic = example.MyTopic    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'    1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.1.0, you need to first re-encrypt (using OAEP) all the encrypted information  in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets  in the Micro Integrator. See Encrypting Secrets  for instructions.</p> <p>Info </p> <p>API-M 4.1.0 uses OAEP for data encryption in addition to the RSA algorithm  (which is used in the ESB profile of EI 6.1.0). Therefore, the internally encrypted data in your current databases (such as  datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies,  event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using  secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1: Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update for your existing EI 6.1.0 by using WSO2 Updates. This will give you a new EI distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated EI distribution to your existing databases (which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.       By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf</code> directory) and specify the datasource name.       <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre></p> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section. </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.  </li> </ul> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> <li> <p>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </p> </li> </ol> </li> <li> <p>Be sure that the <code>carbon.properties</code> file provided by WSO2 Support is included in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory with the following parameter:</p> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> </li> <li> <p>Start the updated ESB server of EI 6.1.0. This will re-encrypt the data in the databases.</p> </li> </ol> Step 2: Run the migration tool <p>Now, let's run the password decryption tool from EI 6.1.0 to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.1.0.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file provided by WSO2 Support into the migration directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> </li> </ol> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.1.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> <ol> <li>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.0/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/","title":"Migrating from WSO2 EI 6.1.1 to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.1.1 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations.</p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace.</li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.1.1 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.1.1 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.1.1 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.1.1, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.1.1, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.1.1. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts, which you received from WSO2 Support.</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin </p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required. <pre><code>-DNonUserCoreMode=true \\\n</code></pre></p> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> <p> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager              org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager              org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager           org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager              org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager                org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager            </p> Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-the-registry","title":"Migrating the registry","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> <li>Since the recommended approach to deploying Datasources in MI is to create a Datasources project in the Integration Studio and deploy them as CAR files, if you have any Datasources deployed in the EI registry, you need to manually download the content from the EI Management Console and create the data source definitions in Integration Studio and export them as a CAR app. See the instructions on Create Datasource Configs.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Use the tool (<code>registry-migration-service-1.0.0.jar</code>) provided by WSO2 Support and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li>To start the tool without a log file:</li> </ul> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> <ul> <li>To start the tool with a log file:</li> </ul> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> </li> </ol> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> <ol> <li>Select one of the following options and proceed.</li> </ol> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> <ol> <li> <p>Specify input values depending on which export option you selected.</p> </li> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ol> <p>You should now have a CAR file with the required registry resources.</p> <ol> <li>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.1.1, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.1.1 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.1.1 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.1.1 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.1.1 deployment, you can replicate the set up by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.1.1 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'     nonWorkerManager <pre><code>```toml tab='TOML configuration'\n# Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;E1_6.1.1_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.1.1. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'    www.wso2.org <pre><code>```toml tab='TOML configuration'\n[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'     1 <pre><code>```toml tab='TOML configuration'\n[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'     admin admin admin <pre><code>```toml tab='TOML configuration'\n[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'     true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'     org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'     WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'    true <pre><code>```toml tab='TOML configuration'\n[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'     8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'     8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'    &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'     org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'     localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'         9292 <pre><code>```toml tab='TOML configuration'\n[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'     true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'         <pre><code>```toml tab='TOML configuration'\n[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'    synapse.threads.core = 20    synapse.threads.max = 100    <pre><code>```toml tab='TOML configuration'\n[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'    worker_pool_size_core=400    worker_pool_size_max=400    worker_pool_queue_length=-1    <pre><code>```toml tab='TOML configuration'\n[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'    http.user.agent.preserve=false    http.server.preserve=true    http.headers.preserve=Content-Type    <pre><code>```toml tab='TOML configuration'\n[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'    connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'    queue.JMSMS=JMSMS    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'    topic.MyTopic = example.MyTopic    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'    1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.1.1, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets  for instructions.</p> <p>Info </p> <p>API-M 4.1.0 uses OAEP for data encryption in addition to the RSA algorithm     (which is used in the ESB profile of EI 6.1.1). Therefore, the internally encrypted data in your current databases (such as     datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies,     event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using     secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1: Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update (later than the update level released on 18/04/2018) for your existing EI 6.1.1 by using WSO2 Updates. This will give you a new EI distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated EI distribution to your existing databases (which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.       By default, registry and user management data are stored in one database and are configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.      </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf</code> directory) and specify the datasource name.       <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre></p> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.    </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> <li> <p>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </p> </li> </ol> </li> <li> <p>Be sure that the <code>carbon.properties</code> file provided by WSO2 Support is included in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory with the following parameter:</p> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> </li> <li> <p>Start the updated ESB server of EI 6.1.1. This will re-encrypt the data in the databases.</p> </li> </ol> Step 2: Run the migration tool <p>Now, let's run the password decryption tool from EI 6.1.1 to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.1.1.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file provided by WSO2 Support into the migration directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.1.1.</p> </li> </ol> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> <ol> <li>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.1.1/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/","title":"Migrating from WSO2 EI 6.2.x to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.2.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li> <p>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</p> </li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li> <p>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.2.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.2.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.2.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.2.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.2.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.2.0. To update the database schema:</p> <ol> <li> <p>Contact WSO2 Support to obtain the database migration scripts.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.2.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <pre><code>For testing purposes, you can copy the artifacts to the same folder structure inside the `&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default` directory.\n</code></pre>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.2.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.2.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.2.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.2.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.2.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.2.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'     www.wso2.org <pre><code>```toml tab='TOML configuration'\n    [server]\n    hostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'      1 <pre><code>```toml tab='TOML configuration'\n    [server]\n    offset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.primary]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.internal]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [truststore]\n    file_name = \"client-truststore.jks\"  \n    type = \"JKS\"                        \n    password = \"wso2carbon\"            \n    alias = \"symmetric.key.value\"      \n    algorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'      admin admin admin <pre><code>```toml tab='TOML configuration'\n    [super_admin]\n    username = \"admin\"              # inferred\n    password = \"admin\"              # inferred\n    admin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'      true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n    [realm_manager]\n    data_source = \"WSO2CarbonDB\"       \n    properties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    type = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\n    class = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\n    connection_url = \"ldap://localhost:10389\"   #inferred\n    connection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'       org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\n    type = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'      WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n    [[datasource]]\n    id = \"WSO2_CARBON_DB\"\n    url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n    username=\"username\"\n    password=\"password\"\n    driver=\"org.h2.Driver\"\n    pool_options.maxActive=50\n    pool_options.maxWait = 60000 # wait in milliseconds\n    pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n    [server]\n    hot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_formatters]\n    form_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\n    multipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\n    application_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\n    text_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    soap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    text_plain = \"org.apache.axis2.format.PlainTextFormatter\"\n    application_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\n    octet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n    # Custom message formatters.\n    [[custom_message_formatters]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_builders]\n    application_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\n    form_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\n    multipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\n    text_plain = \"org.apache.axis2.format.PlainTextBuilder\"\n    application_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\n    octet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n    # Custom message builders\n    [[custom_message_builders]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'      8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.secured_enable = true              \n    listener.secured_port = 8243        \n    listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \n    listener.secured_bind_address = \"hostname or IP address\"\n    listener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \n    listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    listener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\n    listener.keystore.key_password = \"wso2carbon\"\n    listener.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    listener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.2.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.2.0, you can use the password decryption tool. Contact WSO2 Support to obtain this tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact WSO2 Support to obtain the migration tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server. Contact WSO2 Support if you do not have this file.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Contact WSO2 Support to obtain the migration-conf.properties file if you do not have it and copy it into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.2.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.2.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/","title":"Migrating from WSO2 EI 6.3.x to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.3.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.3.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.3.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.3.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.2.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.2.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.3.0. To update the database schema:</p> <ol> <li> <p>Contact WSO2 Support to obtain the database migration scripts.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li> <p>Open the <code>deployment.toml</code> file of your Micro Integrator.</p> </li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li> <p>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</p> </li> <li> <p>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </p> </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li> <p>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location.</p> </li> <li> <p>Move all the modified user store xml files in step 1 to the above directory.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-the-registry","title":"Migrating the registry","text":""},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-the-registry_1","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li> <p>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</p> </li> <li> <p>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</p> </li> <li> <p>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</p> </li> <li> <p>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</p> </li> <li> <p>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</p> </li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li> <p>Include all the artifacts (using that mediator) in the same CAR.</p> </li> <li> <p>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</p> </li> </ul> </li> <li> <p>If the artifacts are created using the management console of EI 6.3.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</p> </li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li> <p>If the connector is added to EI 6.3.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.3.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> <li> <p>If the connector is added to EI 6.3.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li> <p>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</p> </li> <li> <p>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</p> </li> <li> <p>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.3.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.3.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></p> </li> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></p> </li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.3.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'     www.wso2.org <pre><code>```toml tab='TOML configuration'\n    [server]\n    hostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'      1 <pre><code>```toml tab='TOML configuration'\n    [server]\n    offset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.primary]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.internal]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [truststore]\n    file_name = \"client-truststore.jks\"  \n    type = \"JKS\"                        \n    password = \"wso2carbon\"            \n    alias = \"symmetric.key.value\"      \n    algorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'      admin admin admin <pre><code>```toml tab='TOML configuration'\n    [super_admin]\n    username = \"admin\"              # inferred\n    password = \"admin\"              # inferred\n    admin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'      true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n    [realm_manager]\n    data_source = \"WSO2CarbonDB\"       \n    properties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    type = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\n    class = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\n    connection_url = \"ldap://localhost:10389\"   #inferred\n    connection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'       org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\n    type = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'      WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n    [[datasource]]\n    id = \"WSO2_CARBON_DB\"\n    url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n    username=\"username\"\n    password=\"password\"\n    driver=\"org.h2.Driver\"\n    pool_options.maxActive=50\n    pool_options.maxWait = 60000 # wait in milliseconds\n    pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n    [server]\n    hot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_formatters]\n    form_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\n    multipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\n    application_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\n    text_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    soap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    text_plain = \"org.apache.axis2.format.PlainTextFormatter\"\n    application_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\n    octet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n    # Custom message formatters.\n    [[custom_message_formatters]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_builders]\n    application_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\n    form_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\n    multipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\n    text_plain = \"org.apache.axis2.format.PlainTextBuilder\"\n    application_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\n    octet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n    # Custom message builders\n    [[custom_message_builders]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'      8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.secured_enable = true              \n    listener.secured_port = 8243        \n    listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \n    listener.secured_bind_address = \"hostname or IP address\"\n    listener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \n    listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    listener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\n    listener.keystore.key_password = \"wso2carbon\"\n    listener.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    listener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>``xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>    &lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.</p> <pre><code>    org.apache.commons.logging;\n    version=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.3.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator for API-M 4.1.0. See Encrypt Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.3.0, you can use the password decryption tool. Contact WSO2 Support if you do not have this file.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact WSO2 Support to obtain the tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property. Contact WSO2 Support if you do not have this file.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.3.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.3.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/","title":"Migrating from WSO2 EI 6.4.x to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.4.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.4.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.4.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.4.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.4.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.4.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.4.0. To update the database schema:</p> <ol> <li> <p>Unzip the database migration scripts (<code>migration-scripts-ei6.4.x-to-apim4.1.0.zip</code>), which was provided by WSO2 Support, and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Info</p> <p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.4.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.4.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.4.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.4.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer distributes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.4.0 deployment, you can replicate the setup using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.4.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.4.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.4.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.4.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> tool, which was provided by WSO2 Support, into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.4.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.4.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/","title":"Migrating from WSO2 EI 6.5.x to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.5.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.5.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.5.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.5.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.5.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.5.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>There are changes in the database structure (schema) that is used in EI 6.5.0. To update the database schema:</p> <ol> <li> <p>Contact WSO2 Support to obtain the database migration scripts.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li> <p>A primary user store should be configured. Refer    configuring an LDAP user store.</p> </li> <li> <p>User-core feature should be enabled (disabled by default).</p> </li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li> <p>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location.</p> </li> <li> <p>Move all the modified user store xml files in step 1 to the above directory.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li> <p>If the artifacts are created using the management console of EI 6.5.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</p> </li> </ul> <p>Tip</p> <pre><code>For testing purposes, you can copy the artifacts to the same folder structure inside the `&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default` directory.\n</code></pre>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li> <p>If the connector is added to EI 6.5.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.5.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> <li> <p>If the connector is added to EI 6.5.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li> <p>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</p> </li> <li> <p>The Micro Integrator no longer includes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</p> </li> <li> <p>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.5.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li> <p>Configuration management was handled in EI 6.5.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</p> </li> <li> <p>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</p> </li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></p> </li> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></p> </li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.5.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'     www.wso2.org <pre><code>```toml tab='TOML configuration'\n    [server]\n    hostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'      1 <pre><code>```toml tab='TOML configuration'\n    [server]\n    offset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.primary]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.internal]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [truststore]\n    file_name = \"client-truststore.jks\"  \n    type = \"JKS\"                        \n    password = \"wso2carbon\"            \n    alias = \"symmetric.key.value\"      \n    algorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'      admin admin admin <pre><code>```toml tab='TOML configuration'\n    [super_admin]\n    username = \"admin\"              # inferred\n    password = \"admin\"              # inferred\n    admin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'      true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n    [realm_manager]\n    data_source = \"WSO2CarbonDB\"       \n    properties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    type = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\n    class = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\n    connection_url = \"ldap://localhost:10389\"   #inferred\n    connection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'       org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\n    type = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'      WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n    [[datasource]]\n    id = \"WSO2_CARBON_DB\"\n    url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n    username=\"username\"\n    password=\"password\"\n    driver=\"org.h2.Driver\"\n    pool_options.maxActive=50\n    pool_options.maxWait = 60000 # wait in milliseconds\n    pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n    [server]\n    hot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_formatters]\n    form_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\n    multipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\n    application_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\n    text_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    soap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    text_plain = \"org.apache.axis2.format.PlainTextFormatter\"\n    application_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\n    octet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n    # Custom message formatters.\n    [[custom_message_formatters]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_builders]\n    application_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\n    form_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\n    multipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\n    text_plain = \"org.apache.axis2.format.PlainTextBuilder\"\n    application_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\n    octet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n    # Custom message builders\n    [[custom_message_builders]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'      8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.secured_enable = true              \n    listener.secured_port = 8243        \n    listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \n    listener.secured_bind_address = \"hostname or IP address\"\n    listener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \n    listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    listener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\n    listener.keystore.key_password = \"wso2carbon\"\n    listener.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    listener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.5.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.5.0, you can use the password decryption tool, which you can obtain from WSO2 Support.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact WSO2 Support to obtain the the tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property. Contact WSO2 Support to obtain this file if you do not have it.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.5.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.5.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/","title":"Upgrading from WSO2 EI 6.6.x to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.6.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#upgrading-to-the-micro-integrator","title":"Upgrading to the Micro Integrator","text":"<p>Follow the instructions below to start the upgrade!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.6.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.6.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.6.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> </ul> <p>If you are using an LDAP user store with EI 6.6.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.6.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li> <p>Contact the WSO2 Support Team to obtain the database migration scripts.</p> </li> <li> <p>Select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory </p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.6.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <pre><code>For testing purposes, you can copy the artifacts to the same folder structure inside the `&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default` directory.\n</code></pre>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.6.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.6.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.6.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer includes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.6.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.6.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <pre><code>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.\n\n- `&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml`\n- `&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml`\n\nIf you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in [Setting up the EI Analytics Profile for Observability](https://apim.docs.wso2.com/en/4.1.0/install-and-setup/setup/mi-setup/observability/setting-up-classic-observability-deployment).\n</code></pre> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.6.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <pre><code>    &lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre> <pre><code>    [server]\nhostname = \"www.wso2.org\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <pre><code>    &lt;Ports&gt;\n&lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre> <pre><code>    [server]\noffset  = 0\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <pre><code>    &lt;Security&gt;\n&lt;KeyStore&gt;            &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n&lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre> <pre><code>    [keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <pre><code>    &lt;InternalKeyStore&gt;\n&lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n&lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre> <pre><code>    [keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p><code>xml tab='XML configuration'     &lt;TrustStore&gt;         &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;         &lt;Type&gt;JKS&lt;/Type&gt;         &lt;Password&gt;wso2carbon&lt;/Password&gt;     &lt;/TrustStore&gt;</code></p> <p><code>toml tab='TOML configuration'     [truststore]     file_name = \"client-truststore.jks\"       type = \"JKS\"                             password = \"wso2carbon\"                 alias = \"symmetric.key.value\"           algorithm = \"AES\"</code></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <pre><code>    &lt;Realm&gt;\n&lt;Configuration&gt;\n&lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n&lt;AdminUser&gt;                &lt;UserName&gt;admin&lt;/UserName&gt;                &lt;Password&gt;admin&lt;/Password&gt;\n&lt;/AdminUser&gt;\n&lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre> <pre><code>    [super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre> </li> <li> <p>User datasource</p> <pre><code>    &lt;Realm&gt;\n&lt;Configuration&gt;\n&lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n&lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n&lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre> <pre><code>    [realm_manager]\ndata_source = \"WSO2CarbonDB\"       properties.isCascadeDeleteEnabled = true   </code></pre> </li> <li> <p>LDAP userstore</p> <pre><code>    &lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n&lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n&lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n&lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre> <pre><code>    [internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <pre><code>     &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n&lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre> <pre><code>    [internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <pre><code>    &lt;datasource&gt;\n&lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n&lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n&lt;jndiConfig&gt;\n&lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n&lt;/jndiConfig&gt;\n&lt;definition type=\"RDBMS\"&gt;\n&lt;configuration&gt;\n&lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n&lt;username&gt;wso2carbon&lt;/username&gt;\n&lt;password&gt;wso2carbon&lt;/password&gt;\n&lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n&lt;maxActive&gt;50&lt;/maxActive&gt;\n&lt;maxWait&gt;60000&lt;/maxWait&gt;\n&lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n&lt;/configuration&gt;\n&lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre> <pre><code>    [[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <pre><code>    &lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre> <pre><code>    [server]\nhot_deployment = true\n</code></pre> </li> <li> <p>Enable MTOM</p> <pre><code>    &lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre> <pre><code>    [server]\nenable_mtom = false\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <pre><code>    &lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre> <pre><code>    [server]\nenable_swa = false\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <pre><code>    &lt;messageFormatters&gt;\n&lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\nclass=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n&lt;messageFormatter contentType=\"multipart/form-data\"\nclass=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/xml\"\nclass=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n&lt;messageFormatter contentType=\"text/xml\"\nclass=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/soap+xml\"\nclass=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n&lt;messageFormatter contentType=\"text/plain\"\nclass=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/octet-stream\"\nclass=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/json\"\nclass=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         </code></pre> <pre><code>    [message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <pre><code>    &lt;messageBuilders&gt;\n&lt;messageBuilder contentType=\"application/xml\"\nclass=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n&lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\nclass=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n&lt;messageBuilder contentType=\"multipart/form-data\"\nclass=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n&lt;messageBuilder contentType=\"text/plain\"\nclass=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n&lt;messageBuilder contentType=\"application/octet-stream\"\nclass=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n&lt;messageBuilder contentType=\"application/json\"\nclass=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               </code></pre> <pre><code>    [message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <pre><code>    &lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n&lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n&lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n&lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n&lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n&lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n&lt;parameter name=\"keystore\" locked=\"false\"&gt;\n&lt;KeyStore&gt;\n&lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n&lt;/parameter&gt;\n&lt;parameter name=\"truststore\" locked=\"false\"&gt;\n&lt;TrustStore&gt;\n&lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n&lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         </code></pre> <pre><code>    [transport.http]\nlistener.secured_enable = true              listener.secured_port = 8243        listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  listener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the Micro Integrator configuration catalog.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.6.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.6.0, you can use the password decryption tool. Contact WSO2 Support to obtain this.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact the WSO2 Support team to obtain the migration tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server. Contact WSO2 Support if you do not have this file.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>&lt;EI_HOME&gt;</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property. Contact WSO2 Support if you do not have this file.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.6.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-6.6.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/","title":"Upgrading from WSO2 EI 7.0.x to WSO2 API-M 4.1.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 EI 7.0.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current EI 7.0.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with EI 7.0.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 7.0.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 7.0.0. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts, which you received from WSO2 Support.</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.1.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.1.0. </p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.1.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.0.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.1.0.</p> <p>Info</p> <p>If you have done any customization to the <code>&lt;MI_HOME&gt;/conf/internal-apis.xml</code> file in the Micro Integrator of EI 7.0.0, you have to move them to the <code>deployment.toml</code> file in API-M 4.1.0. </p> <p>See Securing the Management API for instructions.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>In version 7.0.0, secure vault was used to store sensitive information used in synapse configurations and the cipher tool was used for sensitive server configurations. In API-M 4.1.0, all the sensitive information (in server configurations as well as synapse configurations) can simply be encrypted and stored using the cipher tool.</p> <p>To migrate the encrypted passwords from EI 7.0.0, you need to first obtain the plain-text passwords. We provide a migration tool, which allows you to decrypt already encrypted passwords in EI 7.0.0.  The plain-text values can then be added to the <code>[secrets]</code> section of the <code>deployment.toml</code> file of the Micro Integrator of API-M 4.1.0 and re-encrypted by running the cipher tool. </p> <p>Follow the instructions given below.</p> <ol> <li>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</li> <li> <p>Get the latest update for your existing EI 7.0.0 distribution by using WSO2 Updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> file to the <code>MI_HOME/dropins</code> folder in the Micro Integrator of EI 7.0.0.</p> </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh micro-integrator.sh -Dmigrate.from.product.version=mi110 <pre><code>```bash tab='On Windows'\nmicro-integrator.bat -Dmigrate.from.product.version=mi110\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;MI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;MI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in the Micro Integrator of EI 7.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.1.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.0.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/","title":"Upgrading from WSO2 EI 7.1.x to WSO2 API-M 4.1.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 EI 7.1.0 to the Micro Integrator of WSO2 API-M 4.1.0. </p> <p>Note</p> <p>Because there aren't any database changes between the Micro Integrators of EI 7.1.0 and API-M 4.1.0, upgrading involves moving (migrating) all your artifacts and configurations from EI 7.1.0 to API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current EI 7.1.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li>Download and install the latest Micro Integrator in your environment:</li> </ul> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> <ul> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with EI 7.1.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 7.1.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 7.1.0. To update the database schema:</p> <ol> <li> <p>Navigate to the database migration scripts, which you received from WSO2 Support.</p> </li> <li> <p>Unzip the provided file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.1.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.1.0. </p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.1.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.1.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-ei-7.1.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the .jar files need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/","title":"Migrating from WSO2 ESB 5.0.0 to WSO2 API-M 4.1.0","text":"<p>This guide provides the recommended strategy for upgrading from WSO2 ESB 5.0.0 to the Micro Integrator of WSO2 API-M 4.1.0.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li> <p>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</p> </li> <li> <p>If you are migrating from a version older than WSO2 ESB 5.0.0, you should first migrate to ESB 5.0.0 and then migrate to the Micro Integrator of API-M 4.1.0.</p> </li> <li>The distribution folder structure has changed from ESB 5.0.0 to API-M 4.1.0:                       WSO2 ESB 5.0.0                               Micro Integrator of API-M 4.1.0              <code>/repository/conf <code>/conf <code>/repository/components/dropins <code>/dropins <code>/repository/components/extensions <code>/extensions <code>/repository/components/lib <code>/lib <code> <code>/repository/components/plugins <code>/wso2/components/plugins"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the ESB 5.0.0 distribution (<code>&lt;ESB_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current ESB 5.0.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment.</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the &gt;following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin &gt;users and non-admin users.</li> <li>All admin users in your existing ESB 5.0.0 user store will &gt;function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator &gt;does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with ESB 5.0.0, you can simply connect the same to the Micro Integrator of API-M 4.1.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with ESB 5.0.0, you need to first update the database before connecting the same to APIM 4.1.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in ESB 5.0.0. To update the database schema:</p> <ol> <li> <p>Unzip the database migration scripts(<code>migration-scripts-esb5.0.0-to-apim4.1.0.zip</code>), which was provided by WSO2 Support, and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for API-M 4.1.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator of API-M 4.1.0 to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.1.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.1.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 ESB). </li> <li>Your WSO2 ESB registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 ESB among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 ESB server from the migration tool:</p> <p>              Input Value                       Description                       ESB Server URL                        Specify the ESB server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the ESB Server                       Specify the location of the internal truststore used by the ESB server.                       Internal Truststore Type of the ESB Server                       Specify the type of the internal Truststore used by the ESB server. The default is <code>JKS</code>.                       Internal Truststore Password of ESB Server                       Specify the password of the internal Truststore used by the ESB server. The default is <code>wso2carbon</code>.                       Username of the ESB Server          <code>admin</code>.                       Password of the ESB Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 ESB instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective in the Micro Integrator when you migrate from WSO2 ESB 5.0.0 to the Micro Integrator.</p> <p>Removed mediators</p> <p>The following mediators and artifacts are removed in the ESB/Micro Integrator runtime after ESB 5.0.0.</p> <ul> <li>Priority Executors</li> <li>Enqueue Mediator</li> <li>Bean Mediator</li> <li>POJO Command Mediator</li> <li>Spring Mediator</li> <li>Conditional Router Mediator</li> <li>In, Out Mediators</li> <li>Event Mediator</li> <li>In memory Topics</li> <li>Router Mediator</li> <li>Publish Event Mediator </li> </ul> <p>Message mediation</p> <pre><code> -   If you have used the `$ctx` function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The `$ctx` function or the `get-property()` function can be used inside the argument (args) tags to get property values.\n -   The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.\n -   There are validations affecting the &lt;b&gt;Enrich&lt;/b&gt; mediator, which prevents the source and target in the message body.\n -   If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be `&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;`. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".\n -   If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.\n</code></pre> <p>HTTP content negotiation</p> <p>HTTP content negotiation is enabled in the Micro Integrator by default. This setting transforms the message (at the time of building the message) according to the content type specified using the 'Accept' header of the request message. You can disable this behavior by updating the <code>deployment.toml</code> file as shown below. <pre><code>[server]\nhostname = \"localhost\"\nhttp_content_negotiation = true\n</code></pre></p> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;ESB_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of ESB 5.0.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to ESB 5.0.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in ESB 5.0.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 5.0.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;ESB_HOME&gt;/repository/components/lib</code> folder, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your ESB deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;ESB_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in WSO2 ESB 5.0.0 versions via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2 (whereas the ESB 5.0.0 used log4j), which are configured in the <code>log4j2.properties</code> file.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous ESB versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used Analytics with your ESB, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in ESB 5.0.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                   &gt;           \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                 &gt;           \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                 &gt;        \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt; \n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>WSO2 ESB 5.0.0 (and all ESB versions prior to EI 6.6.0) use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older ESB version.</p> <ol> <li> <p>Replace carbon logging or <code>commons.logging</code> dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from ESB 5.0.0, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>Info</p> <p>API-M 4.1.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in ESB 5.0.0). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1 - Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update for your existing ESB 5.0.0 by using WSO2 Updates. This will give you a new ESB distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated ESB distribution to your existing databases (which are used for registry data and user management data):</p> <p>Note</p> <p>Connecting to the database</p> <ol> <li>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</li> </ol> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> Element Description driverClassName The class name of the &gt;database driver. url The URL of the database. username and password The name and &gt;password of the database user. <ol> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf</code> directory) and specify the datasource name.</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/</code> directory) and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.   </p> </li> </ol> Element Description driverClassName The class name of the &gt;database driver. url The URL of the database. username and password The name and &gt;password of the database user. <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </li> </ol> </li> <li> <p>Be sure that the carbon.properties file is included in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/</code> directory with the following parameter:</p> </li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the updated ESB server. This will re-encrypt the data in the databases.</li> </ol> Step 2 - Run the migration tool <p>Now, let's run the password decryption tool from ESB 5.0.0 to decrypt the encrypted passwords. This gives you access to the plain-text passwords in ESB 5.0.0.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code>, which was provided by WSO2 Support, into the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>&lt;ESB_HOME&gt;</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the migration directory, and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh wso2server.sh -Dmigrate.from.product.version=esb\n</code></pre></p> <p>On Windows <pre><code>wso2server.bat -Dmigrate.from.product.version=esb\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;ESB_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;ESB_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in ESB 5.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>You can now follow the instructions in Encrypting Secrets to re-encrypt the plain text secrets for the Micro Integrator.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.1.0/upgrading-from-esb-5.x.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.1.0 Micro Integrator distribution. Therefore, the .jar files need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.1.0/why-upgrade-to-4.1.0/","title":"why-upgrade-to-4.1.0","text":""},{"location":"micro-integrator/MI-4.1.0/why-upgrade-to-4.1.0/#why-upgrade-to-wso2-api-m-410","title":"Why upgrade to WSO2 API-M 4.1.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.1.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.1.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.1.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.1.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.1.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.1.0/why-upgrade-to-4.1.0/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.1.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.1.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/registry-migration/","title":"registry-migration","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> <li>Since the recommended approach to deploying Datasources in MI is to create a Datasources project in the Integration Studio and deploy them as CAR files, if you have any Datasources deployed in the EI registry, you need to manually download the content from the EI Management Console and create the data source definitions in Integration Studio and export them as a CAR app. See the instructions on [Create Datasource Configs](../../...</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/","title":"Upgrading from WSO2 API-M 4.0.0 to WSO2 API-M 4.2.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 API-M 4.0.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p> <p>Note Because there aren't any database changes between the Micro Integrators of API-M 4.0.0 and API-M 4.2.0, upgrading involves moving (migrating) all your artifacts and configurations from API-M 4.0.0 to API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current API-M 4.0.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Note</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with API-M 4.0.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> <p>If you are using a JDBC user store with API-M 4.0.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/userstores</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.2.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.2.0.</p> Migrating the Data Mapper Configurations <ol> <li> <p>Use the Data Mapper Configuration Migration Tool (<code>data-mapper-config-migration-service-1.0.1.jar</code>) provided by WSO2 Support to migrate the Data Mapper configurations.</p> </li> <li> <p>Copy the set of Carbon applications that use the Data Mapper to a different location.</p> </li> <li> <p>Run the above-mentioned JAR file providing the absolute path to the location of the Carbon applications (which use the Data Mapper). Use the following command:</p> </li> </ol> <pre><code>java -jar target/data-mapper-config-migration-service-1.0.1.jar &lt;absolute_path_to_current_capp_location&gt;\n</code></pre> <p>The migrated CApps will be available in a folder named <code>migrated_capps</code>.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.2.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of API-M 4.0.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of API-M 4.0.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.0.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/","title":"Upgrading from WSO2 API-M 4.1.0 to WSO2 API-M 4.2.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 API-M 4.1.0 to the Micro Integrator of WSO2 API-M 4.2.0. </p> <p>Note Because there aren't any database changes between the Micro Integrators of API-M 4.1.0 and API-M 4.2.0, upgrading involves moving (migrating) all your artifacts and configurations from API-M 4.1.0 to API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current API-M 4.1.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Note</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with API-M 4.1.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with API-M 4.1.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/userstores</code> folder in the Micro Integrator of API-M 4.1.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.2.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of API-M 4.1.0 to the same folder in API-M 4.2.0. </p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of API-M 4.1.0 to the same folder in API-M 4.2.0.</p> Migrating the Data Mapper Configurations <ol> <li> <p>Use the Data Mapper Configuration Migration Tool (<code>data-mapper-config-migration-service-1.0.1.jar</code>) provided by WSO2 Support to migrate the Data Mapper configurations.</p> </li> <li> <p>Copy the set of Carbon applications that use the Data Mapper to a different location.</p> </li> <li> <p>Run the above-mentioned JAR file providing the absolute path to the location of the Carbon applications (which use the Data Mapper). Use the following command:</p> </li> </ol> <pre><code>java -jar target/data-mapper-config-migration-service-1.0.1.jar &lt;absolute_path_to_current_capp_location&gt;\n</code></pre> <p>The migrated CApps will be available in a folder named <code>migrated_capps</code>.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of API-M 4.1.0 to the same folder in API-M 4.2.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of API-M 4.1.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of API-M 4.1.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-apim-4.1.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/","title":"Migrating from WSO2 EI 6.1.0 to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.1.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations.</p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.</p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace.</li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.1.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.1.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip:</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your Micro Integrator distribution.</p> <p>Info:</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.1.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.1.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> <p>If you are using a JDBC user store with EI 6.1.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC.</p> <p>There are changes in the database structure (schema) that is used in EI 6.1.0. To update the database schema:</p> <ol> <li> <p>Use the database migration scripts (<code>migration-scripts-ei6.1.0-to-apim4.2.0.zip</code>) provided by WSO2 Support.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator of API-M 4.2.0 to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.</li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin:</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-the-registry","title":"Migrating the registry","text":"<p>Before you begin:</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> <li>Since the recommended approach to deploying Datasources in MI is to create a Datasources project in the Integration Studio and deploy them as CAR files, if you have any Datasources deployed in the EI registry, you need to manually download the content from the EI Management Console and create the data source definitions in Integration Studio and export them as a CAR app. See the instructions on Create Datasource Configs.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Use the tool (<code>registry-migration-service-1.0.0.jar</code>) provided by WSO2 Support and save it to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li>To start the tool without a log file:</li> </ul> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> <ul> <li> <p>To start the tool with a log file:</p> <p>Tip:</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <p><pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </p> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> </li> </ol> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> <ol> <li>Select one of the following options and proceed.</li> </ol> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> <ol> <li> <p>Specify input values depending on which export option you selected.</p> </li> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ol> <p>You should now have a CAR file with the required registry resources.</p> <ol> <li>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.1.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.1.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.1.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note:</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.1.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin:</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.1.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip:</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'  nonWorkerManager <pre><code>```toml tab='TOML configuration'\n# Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.1.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'    www.wso2.org <pre><code>```toml tab='TOML configuration'\n[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'     1 <pre><code>```toml tab='TOML configuration'\n[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'     admin admin admin <pre><code>```toml tab='TOML configuration'\n[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'     true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'     org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'     WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'    true <pre><code>```toml tab='TOML configuration'\n[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'     8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'     8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'    &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'     org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'     localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'         9292 <pre><code>```toml tab='TOML configuration'\n[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning:</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'     true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'         <pre><code>```toml tab='TOML configuration'\n[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'    synapse.threads.core = 20    synapse.threads.max = 100    <pre><code>```toml tab='TOML configuration'\n[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'    worker_pool_size_core=400    worker_pool_size_max=400    worker_pool_queue_length=-1    <pre><code>```toml tab='TOML configuration'\n[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'    http.user.agent.preserve=false    http.server.preserve=true    http.headers.preserve=Content-Type    <pre><code>```toml tab='TOML configuration'\n[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'    connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'    queue.JMSMS=JMSMS    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'    topic.MyTopic = example.MyTopic    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'    1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.1.0, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>Info:</p> <p>API-M 4.2.0 uses OAEP for data encryption in addition to the RSA algorithm  (which is used in the ESB profile of EI 6.1.0). Therefore, the internally encrypted data in your current databases (such as  datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies,  event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using  secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1: Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li>Get the latest update for your existing EI 6.1.0 by using WSO2 Updates. This will give you a new EI distribution with the latest updates.</li> </ol> <p>Info:</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> <ol> <li>Connect the updated EI distribution to your existing databases (which are used for registry data and user management data):</li> </ol> <p>Note:</p> <p>Connecting to the database</p> <ol> <li>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</li> </ol> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.     - <code>driverCalssName</code>: The class name of the database driver.     - <code>url</code>: The URL of the database.     - <code>username</code> and <code>password</code>: The name and password of the database user.</p> <ol> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf</code> directory) and specify the datasource name.   <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre></p> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section. </p> </li> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li> <p><code>username</code> and <code>password</code>: The name and password of the database user.  </p> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> <li> <p>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </p> </li> </ol> <ol> <li>Be sure that the <code>carbon.properties</code> file provided by WSO2 Support is included in the <code>&lt;UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory with the following parameter:</li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the updated ESB server of EI 6.1.0. This will re-encrypt the data in the databases.</li> </ol> Step 2: Run the migration tool <p>Now, let's run the password decryption tool from EI 6.1.0 to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.1.0.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file provided by WSO2 Support into the migration directory and update the following property.</p> </li> </ol> Property Description admin.user.name The user name of the system administrator. <ol> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> </li> </ol> <p>Info:</p> <ul> <li> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.1.0.</p> </li> <li> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> </ul> <ol> <li>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.0/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/","title":"Upgrading from WSO2 EI 6.1.1 to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.1.1 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.</p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes. </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#upgrading-to-the-micro-integrator","title":"Upgrading to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.6.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.6.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.6.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> </ul> <p>If you are using an LDAP user store with EI 6.6.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.6.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.1.1. To update the database schema:</p> <ol> <li> <p>Use the database migration scripts (<code>migration-scripts-ei6.1.1-to-apim4.2.0.zip</code>) provided by WSO2 Support.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Info</p> <p>\"Before you begin\"    - Users in the Micro Integrator are categorized as admin users and non-admin users.    - All the users added from secondary user stores are non-admin users.</p> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required. <pre><code>-DNonUserCoreMode=true \\\n</code></pre></p> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin    Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Info</p> <p>Changed package names    Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li> <p>If the artifacts are created using the management console of EI 6.1.1, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</p> <p>Info</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.1.1 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.1.1 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.1.1 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.1.1 deployment, you can replicate the set up by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin    Note the following:</p> <ul> <li>Configuration management was handled in EI 6.1.1 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'     nonWorkerManager <pre><code>```toml tab='TOML configuration'\n# Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;E1_6.1.1_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.1.1. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p><code>carbon.xml</code></p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'    www.wso2.org <pre><code>```toml tab='TOML configuration'\n[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'     1 <pre><code>```toml tab='TOML configuration'\n[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'     ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p><code>user-mgt.xml</code></p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'     admin admin admin <pre><code>```toml tab='TOML configuration'\n[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'     true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'     org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p><code>master-datasource.xml</code></p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'     WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'    true <pre><code>```toml tab='TOML configuration'\n[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'    false <pre><code>```toml tab='TOML configuration'\n[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'     8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'     8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'    &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'     org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'     localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'         9292 <pre><code>```toml tab='TOML configuration'\n[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Note</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both &gt;parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'     true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'     smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'     <pre><code>```toml tab='TOML configuration'\n[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'         <pre><code>```toml tab='TOML configuration'\n[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p><code>synapse.properties</code></p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'    synapse.threads.core = 20    synapse.threads.max = 100    <pre><code>```toml tab='TOML configuration'\n[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p><code>passthru-http.properties</code></p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'    worker_pool_size_core=400    worker_pool_size_max=400    worker_pool_queue_length=-1    <pre><code>```toml tab='TOML configuration'\n[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'    http.user.agent.preserve=false    http.server.preserve=true    http.headers.preserve=Content-Type    <pre><code>```toml tab='TOML configuration'\n[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p><code>jndi.properties</code></p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'    connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'    queue.JMSMS=JMSMS    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'    topic.MyTopic = example.MyTopic    <pre><code>```toml tab='TOML configuration'\n[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p><code>tasks-config.xml</code></p> <p>```xml tab='XML configuration'    1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.1.1, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets  for instructions.</p> <p>Note</p> <p>API-M 4.2.0 uses OAEP for data encryption in addition to the RSA algorithm     (which is used in the ESB profile of EI 6.1.1). Therefore, the internally encrypted data in your current databases (such as     datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies,     event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using     secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1: Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update (later than the update level released on 18/04/2018) for your existing EI 6.1.1 by using WSO2 Updates. This will give you a new EI distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated EI distribution to your existing databases (which are used for registry data and user management data):</p> <p>Note</p> <p>Connecting to the database</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.       By default, registry and user management data are stored in one database and are configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.      </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf</code> directory) and specify the datasource name.       <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre></p> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.    </p> <ul> <li><code>driverCalssName</code>: The class name of the database driver.</li> <li><code>url</code>: The URL of the database.</li> <li><code>username</code> and <code>password</code>: The name and password of the database user.</li> </ul> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> <li> <p>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </p> </li> </ol> </li> <li> <p>Be sure that the carbon.properties file is included in the <code>&lt;UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory with the following parameter:</p> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> </li> <li> <p>Start the updated ESB server of EI 6.1.1. This will re-encrypt the data in the databases.</p> </li> </ol> Step 2: Run the migration tool <p>Now, let's run the password decryption tool from EI 6.1.1 to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.1.1.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Use the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>) provided by WSO2 Support.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file provided by WSO2 Support file provided by WSO2 Support into the migration directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.1.1.</p> </li> </ol> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> <ol> <li>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.1.1/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/","title":"Migrating from WSO2 EI 6.2.x to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.2.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li> <p>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</p> </li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li> <p>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.2.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.2.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.2.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.2.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.2.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.2.0. To update the database schema:</p> <ol> <li> <p>Contact WSO2 Support to obtain the database migration scripts.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.2.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <pre><code>For testing purposes, you can copy the artifacts to the same folder structure inside the `&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default` directory.\n</code></pre>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.2.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.2.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.2.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.2.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.2.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.2.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'     www.wso2.org <pre><code>```toml tab='TOML configuration'\n    [server]\n    hostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'      1 <pre><code>```toml tab='TOML configuration'\n    [server]\n    offset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.primary]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.internal]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [truststore]\n    file_name = \"client-truststore.jks\"  \n    type = \"JKS\"                        \n    password = \"wso2carbon\"            \n    alias = \"symmetric.key.value\"      \n    algorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'      admin admin admin <pre><code>```toml tab='TOML configuration'\n    [super_admin]\n    username = \"admin\"              # inferred\n    password = \"admin\"              # inferred\n    admin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'      true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n    [realm_manager]\n    data_source = \"WSO2CarbonDB\"       \n    properties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    type = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\n    class = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\n    connection_url = \"ldap://localhost:10389\"   #inferred\n    connection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'       org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\n    type = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'      WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n    [[datasource]]\n    id = \"WSO2_CARBON_DB\"\n    url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n    username=\"username\"\n    password=\"password\"\n    driver=\"org.h2.Driver\"\n    pool_options.maxActive=50\n    pool_options.maxWait = 60000 # wait in milliseconds\n    pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n    [server]\n    hot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_formatters]\n    form_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\n    multipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\n    application_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\n    text_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    soap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    text_plain = \"org.apache.axis2.format.PlainTextFormatter\"\n    application_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\n    octet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n    # Custom message formatters.\n    [[custom_message_formatters]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_builders]\n    application_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\n    form_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\n    multipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\n    text_plain = \"org.apache.axis2.format.PlainTextBuilder\"\n    application_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\n    octet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n    # Custom message builders\n    [[custom_message_builders]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'      8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.secured_enable = true              \n    listener.secured_port = 8243        \n    listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \n    listener.secured_bind_address = \"hostname or IP address\"\n    listener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \n    listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    listener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\n    listener.keystore.key_password = \"wso2carbon\"\n    listener.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    listener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.2.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.2.0, you can use the password decryption tool. Contact WSO2 Support to obtain this tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact WSO2 Support to obtain the migration tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server. Contact WSO2 Support if you do not have this file.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Contact WSO2 Support to obtain the migration-conf.properties file if you do not have it and copy it into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.2.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.2.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/","title":"Migrating from WSO2 EI 6.3.x to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.3.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.3.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.3.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.3.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.2.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.2.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.3.0. To update the database schema:</p> <ol> <li> <p>Contact WSO2 Support to obtain the database migration scripts.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li> <p>Open the <code>deployment.toml</code> file of your Micro Integrator.</p> </li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li> <p>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</p> </li> <li> <p>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </p> </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li> <p>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location.</p> </li> <li> <p>Move all the modified user store xml files in step 1 to the above directory.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-the-registry","title":"Migrating the registry","text":""},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-the-registry_1","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li> <p>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</p> </li> <li> <p>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</p> </li> <li> <p>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</p> </li> <li> <p>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</p> </li> <li> <p>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</p> </li> </ul> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li> <p>Include all the artifacts (using that mediator) in the same CAR.</p> </li> <li> <p>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</p> </li> </ul> </li> <li> <p>If the artifacts are created using the management console of EI 6.3.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</p> </li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li> <p>If the connector is added to EI 6.3.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.3.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> <li> <p>If the connector is added to EI 6.3.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li> <p>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</p> </li> <li> <p>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</p> </li> <li> <p>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.3.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.3.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></p> </li> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></p> </li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.3.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'     www.wso2.org <pre><code>```toml tab='TOML configuration'\n    [server]\n    hostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'      1 <pre><code>```toml tab='TOML configuration'\n    [server]\n    offset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.primary]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.internal]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [truststore]\n    file_name = \"client-truststore.jks\"  \n    type = \"JKS\"                        \n    password = \"wso2carbon\"            \n    alias = \"symmetric.key.value\"      \n    algorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'      admin admin admin <pre><code>```toml tab='TOML configuration'\n    [super_admin]\n    username = \"admin\"              # inferred\n    password = \"admin\"              # inferred\n    admin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'      true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n    [realm_manager]\n    data_source = \"WSO2CarbonDB\"       \n    properties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    type = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\n    class = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\n    connection_url = \"ldap://localhost:10389\"   #inferred\n    connection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'       org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\n    type = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'      WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n    [[datasource]]\n    id = \"WSO2_CARBON_DB\"\n    url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n    username=\"username\"\n    password=\"password\"\n    driver=\"org.h2.Driver\"\n    pool_options.maxActive=50\n    pool_options.maxWait = 60000 # wait in milliseconds\n    pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n    [server]\n    hot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_formatters]\n    form_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\n    multipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\n    application_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\n    text_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    soap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    text_plain = \"org.apache.axis2.format.PlainTextFormatter\"\n    application_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\n    octet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n    # Custom message formatters.\n    [[custom_message_formatters]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_builders]\n    application_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\n    form_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\n    multipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\n    text_plain = \"org.apache.axis2.format.PlainTextBuilder\"\n    application_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\n    octet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n    # Custom message builders\n    [[custom_message_builders]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'      8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.secured_enable = true              \n    listener.secured_port = 8243        \n    listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \n    listener.secured_bind_address = \"hostname or IP address\"\n    listener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \n    listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    listener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\n    listener.keystore.key_password = \"wso2carbon\"\n    listener.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    listener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>``xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>    &lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.</p> <pre><code>    org.apache.commons.logging;\n    version=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.3.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator for API-M 4.2.0. See Encrypt Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.3.0, you can use the password decryption tool. Contact WSO2 Support if you do not have this file.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact WSO2 Support to obtain the tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property. Contact WSO2 Support if you do not have this file.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.3.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.3.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/","title":"Migrating from WSO2 EI 6.4.x to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.4.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.4.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.4.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.4.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.4.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.4.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.4.0. To update the database schema:</p> <ol> <li> <p>Unzip the database migration scripts (<code>migration-scripts-ei6.4.x-to-apim4.2.0.zip</code>), which was provided by WSO2 Support, and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Info</p> <p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.4.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.4.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.4.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.4.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer distributes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.4.0 deployment, you can replicate the setup using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.4.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.4.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.4.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.4.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> tool, which was provided by WSO2 Support, into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.4.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.4.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/","title":"Migrating from WSO2 EI 6.5.x to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.5.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.5.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.5.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.5.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with EI 6.5.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.5.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>There are changes in the database structure (schema) that is used in EI 6.5.0. To update the database schema:</p> <ol> <li> <p>Contact WSO2 Support to obtain the database migration scripts.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li> <p>A primary user store should be configured. Refer    configuring an LDAP user store.</p> </li> <li> <p>User-core feature should be enabled (disabled by default).</p> </li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory</p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li> <p>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location.</p> </li> <li> <p>Move all the modified user store xml files in step 1 to the above directory.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li> <p>If the artifacts are created using the management console of EI 6.5.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</p> </li> </ul> <p>Tip</p> <pre><code>For testing purposes, you can copy the artifacts to the same folder structure inside the `&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default` directory.\n</code></pre>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li> <p>If the connector is added to EI 6.5.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.5.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> <li> <p>If the connector is added to EI 6.5.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li> <p>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</p> </li> <li> <p>The Micro Integrator no longer includes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</p> </li> <li> <p>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.5.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li> <p>Configuration management was handled in EI 6.5.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</p> </li> <li> <p>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</p> </li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> <li>Some mediators like In and Out Mediator have been deprecated and removed from more recent versions of the product.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></p> </li> <li> <p><code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></p> </li> </ul> <p>If you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.5.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>```xml tab='XML configuration'     www.wso2.org <pre><code>```toml tab='TOML configuration'\n    [server]\n    hostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>```xml tab='XML configuration'      1 <pre><code>```toml tab='TOML configuration'\n    [server]\n    offset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.primary]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon wso2carbon <pre><code>```toml tab='TOML configuration'\n    [keystore.internal]\n    file_name = \"wso2carbon.jks\"\n    type = \"JKS\"\n    password = \"wso2carbon\"\n    alias = \"wso2carbon\"\n    key_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>```xml tab='XML configuration'      ${carbon.home}/repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [truststore]\n    file_name = \"client-truststore.jks\"  \n    type = \"JKS\"                        \n    password = \"wso2carbon\"            \n    alias = \"symmetric.key.value\"      \n    algorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>```xml tab='XML configuration'      admin admin admin <pre><code>```toml tab='TOML configuration'\n    [super_admin]\n    username = \"admin\"              # inferred\n    password = \"admin\"              # inferred\n    admin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>```xml tab='XML configuration'      true jdbc/WSO2CarbonDB <pre><code>```toml tab='TOML configuration'\n    [realm_manager]\n    data_source = \"WSO2CarbonDB\"       \n    properties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>```xml tab='XML configuration'      org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager ldap://localhost:10389 uid=admin,ou=system <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    type = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\n    class = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\n    connection_url = \"ldap://localhost:10389\"   #inferred\n    connection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>```xml tab='XML configuration'       org.wso2.carbon.user.core.tenant.JDBCTenantManager <pre><code>```toml tab='TOML configuration'\n    [internal_apis.file_user_store]\n    enable = false\n\n    [user_store]\n    class = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\n    type = \"database\"\n</code></pre></p> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>```xml tab='XML configuration'      WSO2_CARBON_DB The datasource used for registry and user manager jdbc/WSO2CarbonDB jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000 wso2carbon wso2carbon org.h2.Driver 50 60000 true <pre><code>```toml tab='TOML configuration'\n    [[datasource]]\n    id = \"WSO2_CARBON_DB\"\n    url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n    username=\"username\"\n    password=\"password\"\n    driver=\"org.h2.Driver\"\n    pool_options.maxActive=50\n    pool_options.maxWait = 60000 # wait in milliseconds\n    pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>```xml tab='XML configuration'     true <pre><code>```toml tab='TOML configuration'\n    [server]\n    hot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>```xml tab='XML configuration'     false <pre><code>```toml tab='TOML configuration'\n    [server]\n    enable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_formatters]\n    form_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\n    multipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\n    application_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\n    text_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    soap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\n    text_plain = \"org.apache.axis2.format.PlainTextFormatter\"\n    application_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\n    octet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n    # Custom message formatters.\n    [[custom_message_formatters]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [message_builders]\n    application_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\n    form_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\n    multipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\n    text_plain = \"org.apache.axis2.format.PlainTextBuilder\"\n    application_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\n    octet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n    # Custom message builders\n    [[custom_message_builders]]\n    content_type = \"application/json/badgerfish\"\n    class = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>```xml tab='XML configuration'      8243 true TLSv1,TLSv1.1,TLSv1.2 hostname or IP address https://apachehost:port/somepath repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.secured_enable = true              \n    listener.secured_port = 8243        \n    listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \n    listener.secured_bind_address = \"hostname or IP address\"\n    listener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \n    listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    listener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\n    listener.keystore.key_password = \"wso2carbon\"\n    listener.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    listener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.         <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.5.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.5.0, you can use the password decryption tool, which you can obtain from WSO2 Support.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact WSO2 Support to obtain the the tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>EI_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property. Contact WSO2 Support to obtain this file if you do not have it.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.5.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.5.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/","title":"Upgrading from WSO2 EI 6.6.x to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from the ESB profile of WSO2 EI 6.6.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#upgrading-to-the-micro-integrator","title":"Upgrading to the Micro Integrator","text":"<p>Follow the instructions below to start the upgrade!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the EI 6.6.0 distribution (<code>&lt;EI_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.6.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing EI 6.6.0 user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> </ul> <p>If you are using an LDAP user store with EI 6.6.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 6.6.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li> <p>Contact the WSO2 Support Team to obtain the database migration scripts.</p> </li> <li> <p>Select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> <li> <p>If your user store is an LDAP server, migrate the Carbon datasource as well. The Carbon datasource contains the hybrid roles and role allocation details for the LDAP.</p> <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  connection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  user_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\nread_groups = true\n\n[[datasource]]\nid = \"WSO2CarbonDB\"\nurl= \"jdbc:mysql://localhost:3306/primaryDB\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000\npool_options.testOnBorrow = true\n</code></pre> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>Before you begin</p> <ul> <li>Users in the Micro Integrator are categorized as admin users and non-admin users.</li> <li>All the users added from secondary user stores are non-admin users.</li> </ul> <p>To deploy secondary user stores in Micro Integrator</p> <ol> <li>A primary user store should be configured. Refer    configuring an LDAP user store</li> <li>User-core feature should be enabled (disabled by default).</li> </ol> <p>To enable the user-core feature, change the following entry to false in micro-integrator.sh/micro-integrator.bat files as required.</p> <pre><code>-DNonUserCoreMode=true \\\n</code></pre> Step 1 - Update user store XML files <ol> <li> <p>Locate existing user store definitions in <code>&lt;EI_HOME&gt;/repository/deployment/server/userstores</code> directory </p> </li> <li> <p>Apply the following class name changes if applicable.</p> </li> </ol> Old class New Class org.wso2.carbon.user.core.ldap.ReadWriteLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadWriteLDAPUserStoreManager        org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager           org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager        org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager           org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager        org.wso2.carbon.user.core.ldap.ActiveDirectoryUserStoreManager             org.wso2.micro.integrator.security.user.core.ldap.ActiveDirectoryUserStoreManager         Step 2 - Deploying user stores in Micro Integrator <ol> <li>Create a new <code>userstores</code> directory in <code>&lt;MI_HOME&gt;/repository/deployment/server/</code> location</li> <li>Move all the modified user store xml files in step 1 to the above directory.</li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 EI version). </li> <li>Your WSO2 EI registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 EI among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.6.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <pre><code>For testing purposes, you can copy the artifacts to the same folder structure inside the `&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default` directory.\n</code></pre>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.6.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in EI 6.6.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to EI 6.6.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer includes the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your EI 6.6.0 deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.6.0 via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations.</p> Migrating to TOML configurations <p>Tip</p> <pre><code>If you have a [WSO2 subscription](https://wso2.com/subscription), it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.\n</code></pre> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>```xml tab='XML configuration'      nonWorkerManager <pre><code>```toml tab='TOML configuration'\n    # Cluster coordination database connection.\n    [[datasource]]\n    id = \"WSO2_COORDINATION_DB\"\n    url= \"jdbc:mysql://localhost:3306/clusterdb\"\n    username=\"root\"\n    password=\"root\"\n    driver=\"com.mysql.jdbc.Driver\"\n\n    # Identifying nodes in the cluster.\n    [cluster_config]\n    node_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Analytics configurations</p> <pre><code>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.\n\n- `&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml`\n- `&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml`\n\nIf you are using EI Analytics with your new Micro Integrator solution, you can follow the instructions in [Setting up the EI Analytics Profile for Observability](https://apim.docs.wso2.com/en/4.2.0/install-and-setup/setup/mi-setup/observability/setting-up-classic-observability-deployment).\n</code></pre> <p>Given below are some of the most critical XML configuration files in the ESB profile of EI 6.6.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <pre><code>    &lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre> <pre><code>    [server]\nhostname = \"www.wso2.org\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <pre><code>    &lt;Ports&gt;\n&lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre> <pre><code>    [server]\noffset  = 0\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <pre><code>    &lt;Security&gt;\n&lt;KeyStore&gt;            &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n&lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre> <pre><code>    [keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <pre><code>    &lt;InternalKeyStore&gt;\n&lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n&lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre> <pre><code>    [keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p><code>xml tab='XML configuration'     &lt;TrustStore&gt;         &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;         &lt;Type&gt;JKS&lt;/Type&gt;         &lt;Password&gt;wso2carbon&lt;/Password&gt;     &lt;/TrustStore&gt;</code></p> <p><code>toml tab='TOML configuration'     [truststore]     file_name = \"client-truststore.jks\"       type = \"JKS\"                             password = \"wso2carbon\"                 alias = \"symmetric.key.value\"           algorithm = \"AES\"</code></p> <p>Find more parameters.</p> </li> </ul> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <pre><code>    &lt;Realm&gt;\n&lt;Configuration&gt;\n&lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n&lt;AdminUser&gt;                &lt;UserName&gt;admin&lt;/UserName&gt;                &lt;Password&gt;admin&lt;/Password&gt;\n&lt;/AdminUser&gt;\n&lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre> <pre><code>    [super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre> </li> <li> <p>User datasource</p> <pre><code>    &lt;Realm&gt;\n&lt;Configuration&gt;\n&lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n&lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n&lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre> <pre><code>    [realm_manager]\ndata_source = \"WSO2CarbonDB\"       properties.isCascadeDeleteEnabled = true   </code></pre> </li> <li> <p>LDAP userstore</p> <pre><code>    &lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n&lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n&lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n&lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre> <pre><code>    [internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <pre><code>     &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n&lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre> <pre><code>    [internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre> </li> </ul> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <pre><code>    &lt;datasource&gt;\n&lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n&lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n&lt;jndiConfig&gt;\n&lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n&lt;/jndiConfig&gt;\n&lt;definition type=\"RDBMS\"&gt;\n&lt;configuration&gt;\n&lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n&lt;username&gt;wso2carbon&lt;/username&gt;\n&lt;password&gt;wso2carbon&lt;/password&gt;\n&lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n&lt;maxActive&gt;50&lt;/maxActive&gt;\n&lt;maxWait&gt;60000&lt;/maxWait&gt;\n&lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n&lt;/configuration&gt;\n&lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre> <pre><code>    [[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre> <p>Find more parameters.</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <pre><code>    &lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre> <pre><code>    [server]\nhot_deployment = true\n</code></pre> </li> <li> <p>Enable MTOM</p> <pre><code>    &lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre> <pre><code>    [server]\nenable_mtom = false\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <pre><code>    &lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre> <pre><code>    [server]\nenable_swa = false\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <pre><code>    &lt;messageFormatters&gt;\n&lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\nclass=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n&lt;messageFormatter contentType=\"multipart/form-data\"\nclass=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/xml\"\nclass=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n&lt;messageFormatter contentType=\"text/xml\"\nclass=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/soap+xml\"\nclass=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n&lt;messageFormatter contentType=\"text/plain\"\nclass=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/octet-stream\"\nclass=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n&lt;messageFormatter contentType=\"application/json\"\nclass=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         </code></pre> <pre><code>    [message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <pre><code>    &lt;messageBuilders&gt;\n&lt;messageBuilder contentType=\"application/xml\"\nclass=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n&lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\nclass=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n&lt;messageBuilder contentType=\"multipart/form-data\"\nclass=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n&lt;messageBuilder contentType=\"text/plain\"\nclass=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n&lt;messageBuilder contentType=\"application/octet-stream\"\nclass=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n&lt;messageBuilder contentType=\"application/json\"\nclass=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               </code></pre> <pre><code>    [message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>```xml tab='XML configuration'      8280 true hostname or IP address https://apachehost:port/somepath <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    listener.enable = true                     \n    listener.port = 8280    \n    listener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\n    listener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <pre><code>    &lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n&lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n&lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n&lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n&lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n&lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n&lt;parameter name=\"keystore\" locked=\"false\"&gt;\n&lt;KeyStore&gt;\n&lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n&lt;/parameter&gt;\n&lt;parameter name=\"truststore\" locked=\"false\"&gt;\n&lt;TrustStore&gt;\n&lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n&lt;Type&gt;JKS&lt;/Type&gt;\n&lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n&lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         </code></pre> <pre><code>    [transport.http]\nlistener.secured_enable = true              listener.secured_port = 8243        listener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  listener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   listener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p><code>xml tab='XML configuration'     &lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;</code> <pre><code>```toml tab='TOML configuration'\n    [transport.mail.listener]\n    enable = true\n    name = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>```xml tab='XML configuration'      org.apache.activemq.jndi.ActiveMQInitialContextFactory tcp://localhost:61616 TopicConnectionFactory topic <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    listener_enable = true\n\n    [[transport.jms.listener]]\n    name = \"myTopicListener\"\n    parameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\n    parameter.provider_url = \"tcp://localhost:61616\"\n    parameter.connection_factory_name = \"TopicConnectionFactory\"\n    parameter.connection_factory_type = \"topic\" # [queue, topic]\n    parameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    listener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>```xml tab='XML configuration'      localhost 5672 guest guest <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    listener_enable = true\n\n    [[transport.rabbitmq.listener]]\n    name = \"AMQPConnectionFactory\"\n    parameter.hostname = \"localhost\"\n    parameter.port = 5672\n    parameter.username = \"guest\"\n    parameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>```xml tab='XML configuration'          9292 <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.listener]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\n    protocol = \"hl7\"\n    parameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>```xml tab='XML configuration'      true <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    #listener_enable = true\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>```xml tab='XML configuration'      true repository/resources/security/wso2carbon.jks JKS wso2carbon wso2carbon repository/resources/security/client-truststore.jks JKS wso2carbon <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    sender.secured_enable = true\n    sender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\n    sender.keystore.type = \"JKS\"\n    sender.keystore.password = \"wso2carbon\"\n    sender.keystore.key_password = \"wso2carbon\"\n    sender.truststore.location = \"repository/resources/security/client-truststore.jks\"\n    sender.truststore.type = \"JKS\"\n    sender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.vfs]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>```xml tab='XML configuration'      smtp.gmail.com 587 true true synapse.demo.0 mailpassword synapse.demo.0@gmail.com <pre><code>```toml tab='TOML configuration'\n    [[transport.mail.sender]]\n    name = \"mailto\"\n    parameter.hostname = \"smtp.gmail.com\"\n    parameter.port = \"587\"\n    parameter.enable_tls = true\n    parameter.auth = true\n    parameter.username = \"synapse.demo.0\"\n    parameter.password = \"mailpassword\"\n    parameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.fix]\n    sender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.rabbitmq]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>```xml tab='XML configuration'      <pre><code>```toml tab='TOML configuration'\n    [transport.jms]\n    sender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>```xml tab='XML configuration'          <pre><code>```toml tab='TOML configuration'\n    [[custom_transport.sender]]\n    class=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\n    protocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>```xml tab='XML configuration'     synapse.threads.core = 20     synapse.threads.max = 100 <pre><code>```toml tab='TOML configuration'\n    [mediation]\n    synapse.core_threads = 20\n    synapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>```xml tab='XML configuration'     worker_pool_size_core=400     worker_pool_size_max=400     worker_pool_queue_length=-1 <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    core_worker_pool_size = 400         # inferred default: 400\n    max_worker_pool_size = 400          # inferred default: 400\n    worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>```xml tab='XML configuration'     http.user.agent.preserve=false     http.server.preserve=true     http.headers.preserve=Content-Type <pre><code>```toml tab='TOML configuration'\n    [transport.http]\n    preserve_http_user_agent = false\n    preserve_http_server_name = true\n    preserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>```xml tab='XML configuration'     connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'     connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675' <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.connection_factories]\n    'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n    'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>```xml tab='XML configuration'     queue.JMSMS=JMSMS <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.queue]\n    JMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>```xml tab='XML configuration'     topic.MyTopic = example.MyTopic <pre><code>```toml tab='TOML configuration'\n    [transport.jndi.topic]\n    MyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>tasks-config.xml</p> <p>```xml tab='XML configuration'     1 org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver <pre><code>```toml tab='TOML configuration'\n    [task_handling]\n    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n    [[task_resolver]]\n    task_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the Micro Integrator configuration catalog.</p> <p>Note</p> <p>By default, the value for <code>http_content_negotiation</code> in WSO2 Enterprise Integrator is <code>false</code>, while in the WSO2 Micro Integrator, it's <code>true</code>. To set the <code>http_content_negotiation</code> to <code>false</code>, add the following configuration in the <code>deployment.toml</code> of the Micro Integrator:</p> <p><pre><code>[server]\nhttp_content_negotiation = false\n</code></pre> </p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.6.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.6.0, you can use the password decryption tool. Contact WSO2 Support to obtain this.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Contact the WSO2 Support team to obtain the migration tool.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> into the <code>EI_HOME/dropins</code> folder in the server. Contact WSO2 Support if you do not have this file.</p> </li> <li> <p>Create a directory named <code>migration</code> in <code>&lt;EI_HOME&gt;</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the <code>migration</code> directory and update the following property. Contact WSO2 Support if you do not have this file.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh integrator.sh -Dmigrate.from.product.version=ei <pre><code>```bash tab='On Windows'\nintegrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.6.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-6.6.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/","title":"Upgrading from WSO2 EI 7.0.x to WSO2 API-M 4.2.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 EI 7.0.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current EI 7.0.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with EI 7.0.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 7.0.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 7.0.0. To update the database schema:</p> <ol> <li> <p>Contact the WSO2 Support Team to obtain the database migration scripts.</p> </li> <li> <p>Unzip the file and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.2.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.2.0. </p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.2.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.0.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.2.0.</p> <p>Info</p> <p>If you have done any customization to the <code>&lt;MI_HOME&gt;/conf/internal-apis.xml</code> file in the Micro Integrator of EI 7.0.0, you have to move them to the <code>deployment.toml</code> file in API-M 4.2.0. </p> <p>See Securing the Management API for instructions.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>In version 7.0.0, secure vault was used to store sensitive information used in synapse configurations and the cipher tool was used for sensitive server configurations. In API-M 4.2.0, all the sensitive information (in server configurations as well as synapse configurations) can simply be encrypted and stored using the cipher tool.</p> <p>To migrate the encrypted passwords from EI 7.0.0, you need to first obtain the plain-text passwords. We provide a migration tool, which allows you to decrypt already encrypted passwords in EI 7.0.0.  The plain-text values can then be added to the <code>[secrets]</code> section of the <code>deployment.toml</code> file of the Micro Integrator of API-M 4.2.0 and re-encrypted by running the cipher tool. </p> <p>Follow the instructions given below.</p> <ol> <li>Download the tool.</li> <li> <p>Get the latest update for your existing EI 7.0.0 distribution by using WSO2 Updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> file to the <code>MI_HOME/dropins</code> folder in the Micro Integrator of EI 7.0.0.</p> </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>```bash tab='On Linux/Unix' sh micro-integrator.sh -Dmigrate.from.product.version=mi110 <pre><code>```bash tab='On Windows'\nmicro-integrator.bat -Dmigrate.from.product.version=mi110\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;MI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;MI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in the Micro Integrator of EI 7.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in the Micro Integrator of API-M 4.2.0. See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.0.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the jars need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/","title":"Upgrading from WSO2 EI 7.1.x to WSO2 API-M 4.2.0","text":"<p>This guide explains the recommended strategy for upgrading from the Micro Integrator of WSO2 EI 7.1.0 to the Micro Integrator of WSO2 API-M 4.2.0. </p> <p>Note</p> <p>Because there aren't any database changes between the Micro Integrators of EI 7.1.0 and API-M 4.2.0, upgrading involves moving (migrating) all your artifacts and configurations from EI 7.1.0 to API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#setting-up","title":"Setting up","text":"<ul> <li>Make a backup of the databases used by the current EI 7.1.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are using an LDAP user store with EI 7.1.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with EI 7.1.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in EI 7.1.0. To update the database schema:</p> <ol> <li> <p>Contact the WSO2 Support Team to obtain the database migration scripts.</p> </li> <li> <p>Unzip the files and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for APIM 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator to the primary user store:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of API-M 4.2.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.2.0. </p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.2.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.1.0 to the same folder in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.1.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-ei-7.1.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the .jar files need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/","title":"Migrating from WSO2 ESB 4.9.0 to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from WSO2 ESB 4.9.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li> <p>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</p> </li> <li> <p>If you are migrating from a version older than WSO2 ESB 4.9.0, you should first migrate to ESB 4.9.0 and then migrate to the Micro Integrator of API-M 4.2.0.</p> </li> <li>The distribution folder structure has changed from ESB 4.9.0 to API-M 4.2.0:                       WSO2 ESB 4.9.0                               Micro Integrator of API-M 4.2.0              <code>/repository/conf <code>/conf <code>/repository/components/dropins <code>/dropins <code>/repository/components/extensions <code>/extensions <code>/repository/components/lib <code>/lib <code> <code>/repository/components/plugins <code>/wso2/components/plugins"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the ESB 4.9.0 distribution (<code>&lt;ESB_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current ESB 4.9.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment.</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the &gt;following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin &gt;users and non-admin users.</li> <li>All admin users in your existing ESB 4.9.0 user store will &gt;function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator &gt;does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with ESB 4.9.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with ESB 4.9.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in ESB 4.9.0. To update the database schema:</p> <ol> <li> <p>Unzip the database migration scripts(<code>migration-scripts-esb4.9.0-to-apim4.2.0.zip</code>), which was provided by WSO2 Support, and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for API-M 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator of API-M 4.2.0 to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 ESB). </li> <li>Your WSO2 ESB registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 ESB among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 ESB server from the migration tool:</p> <p>              Input Value                       Description                       ESB Server URL                        Specify the ESB server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the ESB Server                       Specify the location of the internal truststore used by the ESB server.                       Internal Truststore Type of the ESB Server                       Specify the type of the internal Truststore used by the ESB server. The default is <code>JKS</code>.                       Internal Truststore Password of ESB Server                       Specify the password of the internal Truststore used by the ESB server. The default is <code>wso2carbon</code>.                       Username of the ESB Server          <code>admin</code>.                       Password of the ESB Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 ESB instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective in the Micro Integrator when you migrate from WSO2 ESB 4.9.0 to the Micro Integrator.</p> <p>Removed mediators</p> <p>The following mediators and artifacts are removed in the ESB/Micro Integrator runtime after ESB 4.9.0.</p> <ul> <li>Priority Executors</li> <li>Enqueue Mediator</li> <li>Bean Mediator</li> <li>POJO Command Mediator</li> <li>Spring Mediator</li> <li>Conditional Router Mediator</li> <li>In, Out Mediators</li> <li>Event Mediator</li> <li>In memory Topics</li> <li>Router Mediator</li> <li>Publish Event Mediator </li> </ul> <p>Message mediation</p> <pre><code> -   If you have used the `$ctx` function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The `$ctx` function or the `get-property()` function can be used inside the argument (args) tags to get property values.\n -   The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.\n -   There are validations affecting the &lt;b&gt;Enrich&lt;/b&gt; mediator, which prevents the source and target in the message body.\n -   If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be `&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;`. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".\n -   If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.\n</code></pre> <p>HTTP content negotiation</p> <p>HTTP content negotiation is enabled in the Micro Integrator by default. This setting transforms the message (at the time of building the message) according to the content type specified using the 'Accept' header of the request message. You can disable this behavior by updating the <code>deployment.toml</code> file as shown below. <pre><code>[server]\nhostname = \"localhost\"\nhttp_content_negotiation = true\n</code></pre></p> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;ESB_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of ESB 4.9.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to ESB 4.9.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in ESB 4.9.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 4.9.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;ESB_HOME&gt;/repository/components/lib</code> folder, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your ESB deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;ESB_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in WSO2 ESB 4.9.0 versions via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2 (whereas the ESB 4.9.0 used log4j), which are configured in the <code>log4j2.properties</code> file.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous ESB versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used Analytics with your ESB, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in ESB 4.9.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                   &gt;           \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                 &gt;           \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                 &gt;        \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt; \n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>WSO2 ESB 4.9.0 (and all ESB versions prior to EI 6.6.0) use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older ESB version.</p> <ol> <li> <p>Replace carbon logging or <code>commons.logging</code> dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from ESB 4.9.0, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>Info</p> <p>API-M 4.2.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in ESB 4.9.0). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1 - Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update for your existing ESB 4.9.0 by using WSO2 Updates. This will give you a new ESB distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated ESB distribution to your existing databases (which are used for registry data and user management data):</p> <p>Note</p> <p>Connecting to the database</p> <ol> <li>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_ESB_4.9.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</li> </ol> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> Element Description driverClassName The class name of the &gt;database driver. url The URL of the database. username and password The name and &gt;password of the database user. <ol> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_ESB_4.9.0_HOME&gt;/conf</code> directory) and specify the datasource name.</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_ESB_4.9.0_HOME&gt;/conf/</code> directory) and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.   </p> </li> </ol> Element Description driverClassName The class name of the &gt;database driver. url The URL of the database. username and password The name and &gt;password of the database user. <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </li> </ol> </li> <li> <p>Be sure that the carbon.properties file is included in the <code>&lt;UPDATED_ESB_4.9.0_HOME&gt;/conf/</code> directory with the following parameter:</p> </li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the updated ESB server. This will re-encrypt the data in the databases.</li> </ol> Step 2 - Run the migration tool <p>Now, let's run the password decryption tool from ESB 4.9.0 to decrypt the encrypted passwords. This gives you access to the plain-text passwords in ESB 4.9.0.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code>, which was provided by WSO2 Support, into the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>&lt;ESB_HOME&gt;</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the migration directory, and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh wso2server.sh -Dmigrate.from.product.version=esb\n</code></pre></p> <p>On Windows <pre><code>wso2server.bat -Dmigrate.from.product.version=esb\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;ESB_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;ESB_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in ESB 4.9.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>You can now follow the instructions in Encrypting Secrets to re-encrypt the plain text secrets for the Micro Integrator.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-4.9.0/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the .jar files need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/","title":"Migrating from WSO2 ESB 5.0.0 to WSO2 API-M 4.2.0","text":"<p>This guide provides the recommended strategy for upgrading from WSO2 ESB 5.0.0 to the Micro Integrator of WSO2 API-M 4.2.0.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li> <p>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</p> </li> <li> <p>If you are migrating from a version older than WSO2 ESB 5.0.0, you should first migrate to ESB 5.0.0 and then migrate to the Micro Integrator of API-M 4.2.0.</p> </li> <li>The distribution folder structure has changed from ESB 5.0.0 to API-M 4.2.0:                       WSO2 ESB 5.0.0                               Micro Integrator of API-M 4.2.0              <code>/repository/conf <code>/conf <code>/repository/components/dropins <code>/dropins <code>/repository/components/extensions <code>/extensions <code>/repository/components/lib <code>/lib <code> <code>/repository/components/plugins <code>/wso2/components/plugins"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the ESB 5.0.0 distribution (<code>&lt;ESB_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current ESB 5.0.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install the latest Micro Integrator in your environment.</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> </li> <li> <p>Use WSO2 Updates to get the latest available updates for your Micro Integrator distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the &gt;following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin &gt;users and non-admin users.</li> <li>All admin users in your existing ESB 5.0.0 user store will &gt;function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator &gt;does not support multitenancy.</li> <li>Secondary user stores are currently not supported in the Micro Integrator.</li> </ul> <p>If you are using an LDAP user store with ESB 5.0.0, you can simply connect the same to the Micro Integrator of API-M 4.2.0 by updating the configuration details in the Micro Integrator's <code>deployment.toml</code> file. </p> <p>If you are using a JDBC user store with ESB 5.0.0, you need to first update the database before connecting the same to APIM 4.2.0.</p> <p>Follow the steps given below.</p> Step 1 - Update the database structure <p>This step is applicable only if your user store is JDBC. </p> <p>There are changes in the database structure (schema) that is used in ESB 5.0.0. To update the database schema:</p> <ol> <li> <p>Unzip the database migration scripts(<code>migration-scripts-esb5.0.0-to-apim4.2.0.zip</code>), which was provided by WSO2 Support, and select the script relevant to your database type.</p> </li> <li> <p>Connect to the database and run the script.</p> </li> </ol> <p>Your database schema is now updated for API-M 4.2.0. Now you can update the configuration details in the Micro Integrator's <code>deployment.toml</code> file.</p> Step 2 - Connect to the user store <p>To connect the Micro Integrator of API-M 4.2.0 to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>See the instructions in the following sections:</p> <ul> <li>Configuring an LDAP user store for the Micro Integrator in API-M 4.2.0.</li> <li>Configuring an RDBMS user store for the Micro Integrator in API-M 4.2.0.  </li> </ul> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>The Micro Integrator uses a file-based registry instead of a database (which is used in your WSO2 ESB). </li> <li>Your WSO2 ESB registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of your WSO2 ESB among multiple nodes, you can do the same for the file-based registry of the Micro Integrator. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of the Micro Integrator.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Save the tool (<code>registry-migration-service-1.0.0.jar</code>), which was provided by WSO2 Support, to a location on your computer.</p> </li> <li> <p>Execute one of the commands given below to start the tool.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip</p> <p>Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 ESB server from the migration tool:</p> <p>              Input Value                       Description                       ESB Server URL                        Specify the ESB server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the ESB Server                       Specify the location of the internal truststore used by the ESB server.                       Internal Truststore Type of the ESB Server                       Specify the type of the internal Truststore used by the ESB server. The default is <code>JKS</code>.                       Internal Truststore Password of ESB Server                       Specify the password of the internal Truststore used by the ESB server. The default is <code>wso2carbon</code>.                       Username of the ESB Server          <code>admin</code>.                       Password of the ESB Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 ESB instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> </li> </ol> </li> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective in the Micro Integrator when you migrate from WSO2 ESB 5.0.0 to the Micro Integrator.</p> <p>Removed mediators</p> <p>The following mediators and artifacts are removed in the ESB/Micro Integrator runtime after ESB 5.0.0.</p> <ul> <li>Priority Executors</li> <li>Enqueue Mediator</li> <li>Bean Mediator</li> <li>POJO Command Mediator</li> <li>Spring Mediator</li> <li>Conditional Router Mediator</li> <li>In, Out Mediators</li> <li>Event Mediator</li> <li>In memory Topics</li> <li>Router Mediator</li> <li>Publish Event Mediator </li> </ul> <p>Message mediation</p> <pre><code> -   If you have used the `$ctx` function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The `$ctx` function or the `get-property()` function can be used inside the argument (args) tags to get property values.\n -   The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.\n -   There are validations affecting the &lt;b&gt;Enrich&lt;/b&gt; mediator, which prevents the source and target in the message body.\n -   If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be `&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;`. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".\n -   If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.\n</code></pre> <p>HTTP content negotiation</p> <p>HTTP content negotiation is enabled in the Micro Integrator by default. This setting transforms the message (at the time of building the message) according to the content type specified using the 'Accept' header of the request message. You can disable this behavior by updating the <code>deployment.toml</code> file as shown below. <pre><code>[server]\nhostname = \"localhost\"\nhttp_content_negotiation = true\n</code></pre></p> <p>The recommended way to create integration artifacts is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;ESB_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of ESB 5.0.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to ESB 5.0.0 via a composite application with the Connector Exporter Project, the same can be used in the Micro Integrator seamlessly. Simply copy the CAR file in ESB 5.0.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 5.0.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in the Micro Integrator.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;ESB_HOME&gt;/repository/components/lib</code> folder, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>The Micro Integrator no longer contains the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME&gt;/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator. Therefore, if you used multiple tenants in your ESB deployment, you can replicate the setup by using separate Micro Integrator nodes.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;ESB_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in WSO2 ESB 5.0.0 versions via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, and <code>axis2.xml</code>.</li> <li>The Micro Integrator uses a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2 (whereas the ESB 5.0.0 used log4j), which are configured in the <code>log4j2.properties</code> file.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to contact WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are the main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous ESB versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used Analytics with your ESB, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you are using Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuration files in ESB 5.0.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n            &lt;username&gt;wso2carbon&lt;/username&gt;\n            &lt;password&gt;wso2carbon&lt;/password&gt;\n            &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n            &lt;maxActive&gt;50&lt;/maxActive&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\"\n                        class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\"\n                        class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\"\n                        class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\"\n                        class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\"\n                        class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\"\n                        class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                   &gt;           \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                 &gt;           \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                 &gt;        \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt; \n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code>synapse.threads.core = 20\nsynapse.threads.max = 100\n</code></pre></p> <p>TOML configuration <pre><code>[mediation]\nsynapse.core_threads = 20\nsynapse.max_threads = 100\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\nworker_pool_size_max=400\nworker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\nmax_worker_pool_size = 400          # inferred default: 400\nworker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n&lt;defaultLocationResolver&gt;\n    &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n&lt;/defaultLocationResolver&gt;      \n</code></pre></p> <p>TOML configuration <pre><code>[task_handling]\nresolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"\n\n[[task_resolver]]\ntask_server_count = \"3\"\n</code></pre></p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>WSO2 ESB 5.0.0 (and all ESB versions prior to EI 6.6.0) use log4j. In the Micro Integrator, the <code>carbon.logging.jar</code> file is not included and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in the Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older ESB version.</p> <ol> <li> <p>Replace carbon logging or <code>commons.logging</code> dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" &lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from ESB 5.0.0, you need to first re-encrypt (using OAEP) all the encrypted information in the database. Then, you can obtain the plain-text passwords by following the normal procedure of encrypting secrets in the Micro Integrator. See Encrypting Secrets for instructions.</p> <p>Info</p> <p>API-M 4.2.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in ESB 5.0.0). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> Step 1 - Re-encrypt all internally encrypted data using OAEP <p>First, let's re-encrypt all the internally encrypted data by using OAEP.</p> <ol> <li> <p>Get the latest update for your existing ESB 5.0.0 by using WSO2 Updates. This will give you a new ESB distribution with the latest updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Connect the updated ESB distribution to your existing databases (which are used for registry data and user management data):</p> <p>Note</p> <p>Connecting to the database</p> <ol> <li>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</li> </ol> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> Element Description driverClassName The class name of the &gt;database driver. url The URL of the database. username and password The name and &gt;password of the database user. <ol> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf</code> directory) and specify the datasource name.</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used in your ESB, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/</code> directory) and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.   </p> </li> </ol> Element Description driverClassName The class name of the &gt;database driver. url The URL of the database. username and password The name and &gt;password of the database user. <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).   </li> </ol> </li> <li> <p>Be sure that the carbon.properties file is included in the <code>&lt;UPDATED_ESB_5.0.0_HOME&gt;/conf/</code> directory with the following parameter:</p> </li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the updated ESB server. This will re-encrypt the data in the databases.</li> </ol> Step 2 - Run the migration tool <p>Now, let's run the password decryption tool from ESB 5.0.0 to decrypt the encrypted passwords. This gives you access to the plain-text passwords in ESB 5.0.0.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code>, which was provided by WSO2 Support, into the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>&lt;ESB_HOME&gt;</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the migration directory, and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh wso2server.sh -Dmigrate.from.product.version=esb\n</code></pre></p> <p>On Windows <pre><code>wso2server.bat -Dmigrate.from.product.version=esb\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files are written respectively to the <code>&lt;ESB_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;ESB_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in ESB 5.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>You can now follow the instructions in Encrypting Secrets to re-encrypt the plain text secrets for the Micro Integrator.</p> </li> </ol>"},{"location":"micro-integrator/MI-4.2.0/upgrading-from-esb-5.x.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the API-M 4.2.0 Micro Integrator distribution. Therefore, the .jar files need to be added to the Micro Integrator server manually. See Configuring the HL7 transport for details.</p>"},{"location":"micro-integrator/MI-4.2.0/why-upgrade-to-4.2.0/","title":"why-upgrade-to-4.2.0","text":""},{"location":"micro-integrator/MI-4.2.0/why-upgrade-to-4.2.0/#why-upgrade-to-wso2-api-m-420","title":"Why upgrade to WSO2 API-M 4.2.0?","text":"<p>Listed below are some of the advantages of moving to API-M 4.2.0 from the ESB.</p> <ul> <li> <p>The Micro Integrator of API-M 4.2.0 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, the Micro Integrator of WSO2 EI 7.x, as well as the Micro Integrator of WSO2 API-M 4.0.0 and WSO2 API-M 4.2.0 contains the same version of WSO2 ESB runtime. </p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The Toml-based configuration strategy in API-M 4.2.0 replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used.  </p> </li> </ul> <p>Upgrading to WSO2 API-M 4.2.0 is recommended for the following requirements:</p> <ul> <li>You need to expose integrations as managed APIs so that integration solutions can be managed and monetized in an API marketplace. </li> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"micro-integrator/MI-4.2.0/why-upgrade-to-4.2.0/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of API-M 4.2.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of API-M 4.2.0 contains changes that impact your migration process. Be sure to read the Comparison: ESB vs the Micro Integrator before you start the migration.</p> </li> <li> <p>Note that API-M 4.2.0 does not allow manual patches. You can use WSO2 Updates to get the latest fixes or updates for this release.</p> </li> <li>The BPS profile does not exist in the latest version of MI and we recommend that you use an alternate product for complex long running processes they are running on BPS. Alternately, you can continue to use BPS until it reaches end-of-life.</li> </ul>"}]}